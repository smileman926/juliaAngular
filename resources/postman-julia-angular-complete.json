{
	"info": {
		"_postman_id": "cc3c6a35-5f26-477a-a957-27dbe4cac51f",
		"name": "JuliaAngular Complete",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "checkAuth",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-csrf-token",
						"value": "x8ptuH1z9SKvfb%2Fy6WjAP5gEhMwAiBilX51KIXlHTihw1onySdDHPK8bp%2FyIYnPUUo1k%2FsGG70xORGpL6gdqi8C%2BFI4Huv9zG4xU88gUJ5KxWWOyLZIutBXEtXLtCftwxwJgMauvuGGGUxgyk7Do9UJLv%2BzFwL1l5Nz4HNNxdbxtfuRriaRnU%3D09Uw5QgW64",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"type\":\"info\"\r\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/checkAuth/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"checkAuth",
						"3",
						"1",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "getCompanyDetails",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\", true ],\n  \"className\": \"AppClass\",\n  \"functionName\": \"getCompanyDetails\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "json fields:\n\nparams: \n\n1) \"appUser\" -> fixed string, needs to be at position 1\n\n2) bool      -> true if this request is called initially at app-start, false if it's called during a session\n\nclassName, functionName -> strings that determine which function from the old API is called"
			},
			"response": []
		},
		{
			"name": "questionMark (example for \"companyCustomerAdmin\")",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "file",
					"file": {}
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/questionMark/3/1/companyCustomerAdmin",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"questionMark",
						"3",
						"1",
						"companyCustomerAdmin"
					]
				}
			},
			"response": []
		},
		{
			"name": "customerAdmin.getCompanyCustomers",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"mustermann\", \"appUser\" ],\n  \"className\": \"CompanyCustomerAdmin\",\n  \"functionName\": \"getCompanyCustomers\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns an array of objects. Each object contains data about a \"companyCustomer\" = lastname, firstname, birthdate and many other properties of a companyCustomer. \nThe name is \"companyCustomer\" because it refers to customers of the company that uses JuliaAngular. Usually we use the term \"customer\" for customers of easybooking and \"companyCustomer\" for customers of our customers...\n\n<br>\nIf there is no result, the request will return an array with only one element which is a fixed string with the content \"ZERO\".<br><br>\n\nparams:\n\n1) string -> Searchtext that comes from the search-text input field. If empty, all \"companyCustomers\" will get returned  \n2) \"appUser\" -> fixed string  \n3) c_id -> optional parameter. If this is specified, only the customer with that `c_id` will get returned"
			},
			"response": []
		},
		{
			"name": "customerAdmin.startExport",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"7005-2902-3496\" ],\n  \"className\": \"CompanyCustomerAdmin\",\n  \"functionName\": \"startExport\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This will trigger an asynchronous companyCustomer-export. The request should return immediately with an empty array but an export will be running in the background at the webserver. After the export is done it's possible to download an XLS file from the webserver.<br><br>\n\nparams:<br>\n1) string -> This needs to be set to the field \"c_serialNumber\" that's in the return object of API request \"getCompanyDetails\""
			},
			"response": []
		},
		{
			"name": "customerAdmin.checkExportProgress",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"CompanyCustomerAdmin\",\n  \"functionName\": \"checkExportProgress\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This will tell the progress of a currently running export. The result is an array that contains only 1 string element. It can be a number between 0 and 100 (the percentage done of the export) or the string \"WRITING_EXCEL_FILE\". While the export at the server is writing the excel file we don't have control over how much is done of the writing... That's why we need this \"extra-progress-status\", we don't know about the percentage here.<br><br>\n\nparams:<br>\n1) \"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "customerAdmin.removeProgressfile",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"CompanyCustomerAdmin\",\n  \"functionName\": \"removeProgressfile\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "If there's a companyCustomer-Export running that was triggered by customerAdmin.startExport and the client knows it's finished, because customerAdmin.checkExportProgress returned \"100\", then the client will call this request. It will return an array with only 1 string-element that holds the path to excel-file which is the result of the export process. A possible result value can be for example \"/wo/Services/emailPDF/srv0010002/custExport_20190618131645123990/Customers.xlsx\" <br><br>\n\nparams:<br>\n1) \"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "customerAdmin.getCompanyCustomerDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 552, \"appUser\" ],\n  \"className\": \"CompanyCustomerDetail\",\n  \"functionName\": \"getCompanyCustomerDetail\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This will return details to a certain companyCustomer record (for example lastname, firstname, address...).<br><br>\n\nparams:<br>\n1) int -> Can be also provided as string. It's a customer_id as it appears as in API request customerAdmin.getCompanyCustomers in the field \"c_id\"<br>\n2) \"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "customerAdmin.anonymizeCustomer",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1397, \"appUser\" ],\n  \"className\": \"CompanyCustomerAdmin\",\n  \"functionName\": \"anonymizeCustomer\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This function anonymizes all data of a given companyCustomer in the database. It returns an object that contains the data as it was BEFORE anonymization<br>\n\nparams:<br>\n1) int -> the c_id of a companyCustomer\n\n2) \"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "customerAdmin.sendAnonymizeConfirmation",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \n  {\n    \"customerBackupObject\": {\n        \"c_id\": \"1397\",\n        \"c_creationDate\": \"2019-04-19 09:18:29\",\n        \"c_customerInterface_id\": null,\n        \"c_externalCustomerId\": null,\n        \"c_accountNo\": \"006621\",\n        \"c_active\": \"on\",\n        \"c_salutation_id\": \"2\",\n        \"c_title\": \"Mag\",\n        \"c_firstName\": \"Max\",\n        \"c_lastName\": \"Mustermann\",\n        \"c_eMailAddress\": \"test@test.test\",\n        \"c_eMailAddress2\": null,\n        \"c_channelEMailAddress\": \"\",\n        \"c_phoneNo\": \"1234567890\",\n        \"c_phoneNo2\": \"\",\n        \"c_addressLine1\": \"Hauptstraße 1 <br> ZUsatzadresse\",\n        \"c_postCode\": \"7000\",\n        \"c_city\": \"Eisenstadt\",\n        \"c_country_id\": \"15\",\n        \"c_country\": \"\",\n        \"c_ipAddress\": \"213.208.157.39\",\n        \"c_sendNewsLetter\": \"off\",\n        \"c_locale_id\": \"2\",\n        \"c_identification\": null,\n        \"c_birthDay\": null,\n        \"c_taxNo\": null,\n        \"c_comment\": \"\",\n        \"c_company\": \"\",\n        \"c_faxNo\": null,\n        \"c_mobileNo\": null,\n        \"c_documentType_id\": null,\n        \"c_documentNo\": null,\n        \"c_nationality_id\": null,\n        \"c_nationality\": null,\n        \"c_addressLine1Plus\": null,\n        \"c_cityPlus\": null,\n        \"c_region\": null,\n        \"c_birthCity\": null,\n        \"c_noOfStays\": null,\n        \"c_postBox\": null,\n        \"c_companyRegNo\": null,\n        \"c_occupation\": null,\n        \"c_occupationBranch\": null,\n        \"c_webUrl\": null,\n        \"c_carRegNo\": null,\n        \"c_sendSafeJourneyMail\": \"on\",\n        \"c_sendThankYouMail\": \"on\",\n        \"c_attachEventsPDF\": \"on\",\n        \"c_sendSafeJourneyPlusPaymentsMail\": \"on\",\n        \"c_guest_id\": \"0\",\n        \"c_latitude\": null,\n        \"c_longitude\": null,\n        \"c_guestPicture\": null,\n        \"c_anonymizedAt\": null,\n        \"c_autoAnonymize\": \"1\",\n        \"c_original_c_id\": null\n    },\n    \"fieldsThatWereAnonymized\": \"c_accountNo,c_title,c_firstName,c_lastName,c_eMailAddress,c_phoneNo,c_addressLine1,c_ipAddress\"\n}, \"ap@easybooking.at\", \"appUser\" ],\n  \"className\": \"EBMailUtil\",\n  \"functionName\": \"sendAnonymizeConfirmation\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This will send an email to the email-address specified in the second parameter of the params array. The email will say something like \"We confirm that we anonymized your data, here is what we anonymized: a, b, c ...\"<br><br>\n\nparams:<br>\n1) object -> An object that contains data about the companyCustomer as it was BEFORE it got anonymized (this object is created by API request customerAdmin.anonymizeCustomer)<br>\n2) string -> the emailaddress to send the anonymization confirmation to<br>\n3) \"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "customerAdmin.adminCompanyCustomerDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"c_sendNewsLetter\": \"off\",\n\t\"c_salutation_id\": \"1\",\n\t\"c_autoAnonymize\": 1,\n\t\"c_sendThankYouMail\": \"on\",\n\t\"c_lastName\": \"Bertalo\",\n\t\"c_sendSafeJourneyPlusPaymentsMail\": \"on\",\n\t\"c_firstName\": \"Birgit\",\n\t\"c_locale_id\": \"2\",\n\t\"c_comment\": \"my comment2\",\n\t\"c_identification\": \"\",\n\t\"c_id\": \"552\",\n\t\"c_postCode\": \"\",\n\t\"action\": \"update\",\n\t\"c_addressLine1\": \"\",\n\t\"c_city\": \"\",\n\t\"c_country_id\": \"15\",\n\t\"c_attachEventsPDF\": \"on\",\n\t\"c_birthDay\": \"1988-06-16\",\n\t\"c_phoneNo\": \"\",\n\t\"c_eMailAddress2\": \"\",\n\t\"c_taxNo\": \"\",\n\t\"c_sendSafeJourneyMail\": \"on\",\n\t\"c_eMailAddress\": \"\",\n\t\"c_accountNo\": \"006149\",\n\t\"c_channelEMailAddress\": \"\",\n\t\"c_title\": \"\"\n}\n, \"appUser\" ],\n  \"className\": \"CompanyCustomerDetail\",\n  \"functionName\": \"adminCompanyCustomerDetail\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This function updates or inserts a companyCustomer record in the database.<br><br>\n\nparams:<br>\n1) object -> data of a companyCustomer record<br>\n2) \"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "customerAdmin.settings.getCharacteristics",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ { \"chl_locale_id\": 2}, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"getCharacteristics\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of characteristics in the specified language.<br><br>\n\nparams:<br>\nobject -> { chl_locale_id: The language in which characteristics shall be returned }<br>\n\"appUser\" -> fixed string<br><br>\n\nDescription of returned objects:<br>\nch_id ... unique id of the characteristic<br>\nch_name ... administrative name of the characteristic<br>\nchl_value ... name of that characteristic in the specified language<br>\nused ... If 'on' then this characteristic was set for at least one guest"
			},
			"response": []
		},
		{
			"name": "customerAdmin.settings.setCharacteristics",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"characteristicsARR\": [{\n\t\t\t\"chl_value\": \"activity holiday\",\n\t\t\t\"chl_characteristics_id\": \"13\"\n\t\t}, {\n\t\t\t\"chl_value\": \"camping\",\n\t\t\t\"chl_characteristics_id\": \"39\"\n\t\t}, {\n\t\t\t\"chl_value\": \"Canyoning\",\n\t\t\t\"chl_characteristics_id\": \"32\"\n\t\t}, {\n\t\t\t\"chl_value\": \"Ice skating\",\n\t\t\t\"chl_characteristics_id\": \"38\"\n\t\t}, {\n\t\t\t\"chl_value\": \"Family & Children\",\n\t\t\t\"chl_characteristics_id\": \"18\"\n\t\t}, {\n\t\t\t\"chl_value\": \"Golf\",\n\t\t\t\"chl_characteristics_id\": \"40\"\n\t\t}, {\n\t\t\t\"chl_value\": \"dogs\",\n\t\t\t\"chl_characteristics_id\": \"17\"\n\t\t}, {\n\t\t\t\"chl_value\": \"Kanu-\\/Kajak\",\n\t\t\t\"chl_characteristics_id\": \"29\"\n\t\t}, {\n\t\t\t\"chl_value\": \"Rock climbing\",\n\t\t\t\"chl_characteristics_id\": \"28\"\n\t\t}, {\n\t\t\t\"chl_value\": \"culinary delights\",\n\t\t\t\"chl_characteristics_id\": \"16\"\n\t\t}, {\n\t\t\t\"chl_value\": \"culture and sightseeing\",\n\t\t\t\"chl_characteristics_id\": \"15\"\n\t\t}, {\n\t\t\t\"chl_value\": \"cross-country skiing\",\n\t\t\t\"chl_characteristics_id\": \"35\"\n\t\t}, {\n\t\t\t\"chl_value\": \"motorcycle riding\",\n\t\t\t\"chl_characteristics_id\": \"34\"\n\t\t}, {\n\t\t\t\"chl_value\": \"Mountain Biking\",\n\t\t\t\"chl_characteristics_id\": \"25\"\n\t\t}, {\n\t\t\t\"chl_value\": \"Outdoor Sports\",\n\t\t\t\"chl_characteristics_id\": \"27\"\n\t\t}, {\n\t\t\t\"chl_value\": \"Romantic holidays\",\n\t\t\t\"chl_characteristics_id\": \"20\"\n\t\t}, {\n\t\t\t\"chl_value\": \"parasailing\",\n\t\t\t\"chl_characteristics_id\": \"33\"\n\t\t}, {\n\t\t\t\"chl_value\": \"cycling\",\n\t\t\t\"chl_characteristics_id\": \"24\"\n\t\t}, {\n\t\t\t\"chl_value\": \"Horse riding\",\n\t\t\t\"chl_characteristics_id\": \"31\"\n\t\t}, {\n\t\t\t\"chl_value\": \"toboggan\",\n\t\t\t\"chl_characteristics_id\": \"37\"\n\t\t}, {\n\t\t\t\"chl_value\": \"Senior travel\",\n\t\t\t\"chl_characteristics_id\": \"21\"\n\t\t}, {\n\t\t\t\"chl_value\": \"Single travel\",\n\t\t\t\"chl_characteristics_id\": \"19\"\n\t\t}, {\n\t\t\t\"chl_value\": \"Skiing \\/ Snowboarding\",\n\t\t\t\"chl_characteristics_id\": \"36\"\n\t\t}, {\n\t\t\t\"chl_value\": \"Summer holidays\",\n\t\t\t\"chl_characteristics_id\": \"11\"\n\t\t}, {\n\t\t\t\"chl_value\": \"Tennis\",\n\t\t\t\"chl_characteristics_id\": \"23\"\n\t\t}, {\n\t\t\t\"chl_value\": \"Hiking\",\n\t\t\t\"chl_characteristics_id\": \"26\"\n\t\t}, {\n\t\t\t\"chl_value\": \"wellness and relax\",\n\t\t\t\"chl_characteristics_id\": \"14\"\n\t\t}, {\n\t\t\t\"chl_value\": \"Winter holidays\",\n\t\t\t\"chl_characteristics_id\": \"12\"\n\t\t}\n\t],\n\t\"chl_locale_id\": \"1\"\n}\n, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"setCharacteristics\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes all characteristics from the database and saves a new list of characteristics that's provided as input parameter.<br><br>\n\nparams:<br>\ncharacteristicsARR ... list of characteristics that should get saved<br>\nchl_locale_id ... language of the specified characteristics<br>\n\"appUser\" ... fixed string"
			},
			"response": []
		},
		{
			"name": "customerAdmin.settings.newCharacteristics",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ { \"chl_value\":\"SomeLabel\" }, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"newCharacteristics\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request creates a new characteristic in the database.<br><br>\n\nparams:<br>\nobject -> { chl_value: Name of the new characteristic }<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "customerAdmin.settings.getVisitReason",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ { \"vrl_locale_id\": 1}, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"getVisitReason\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of visitReasons in the specified language.<br><br>\n\nparams:<br>\nobject -> { vrl_locale_id: The language in which visitReasons shall be returned }<br>\n\"appUser\" -> fixed string<br><br>\n\nDescription of returned objects:<br>\nvr_id ... unique id of the visitReason<br>\nvr_name ... administrative name of the visitReason<br>\nvrl_value ... name of that visitReason in the specified language<br>\nused ... If 'on' then this visitReason was set for at least one guest"
			},
			"response": []
		},
		{
			"name": "customerAdmin.settings.setVisitReason",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"vrl_locale_id\": \"1\",\n\t\"visitReasonARR\": [{\n\t\t\t\"vrl_visitReason_id\": \"3\",\n\t\t\t\"vrl_value\": \"business3\"\n\t\t}, {\n\t\t\t\"vrl_visitReason_id\": \"6\",\n\t\t\t\"vrl_value\": \"honeymoon\"\n\t\t}, {\n\t\t\t\"vrl_visitReason_id\": \"4\",\n\t\t\t\"vrl_value\": \"treatment\"\n\t\t}, {\n\t\t\t\"vrl_visitReason_id\": \"1\",\n\t\t\t\"vrl_value\": \"summer holiday\"\n\t\t}, {\n\t\t\t\"vrl_visitReason_id\": \"5\",\n\t\t\t\"vrl_value\": \"regular guest\"\n\t\t}, {\n\t\t\t\"vrl_visitReason_id\": \"2\",\n\t\t\t\"vrl_value\": \"winter holiday\"\n\t\t}\n\t]\n}, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"setVisitReason\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes all visitReasons from the database and saves a new list of visitReasons that's provided as input parameter.<br><br>\r\n\r\nparams:<br>\r\nvisitReasonARR ... list of visitReasons that should get saved<br>\r\nvrl_locale_id ... language of the specified visitReasons<br>\r\n\"appUser\" ... fixed string"
			},
			"response": []
		},
		{
			"name": "customerAdmin.settings.newVisitReason",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ { \"vrl_value\":\"SomeLabel4\" }, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"newVisitReason\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request creates a new visitReason in the database.<br><br>\n\nparams:<br>\nobject -> { vrl_value: Name of the new visitReason }<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "customerAdmin.settings.getArrivalMethod",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ { \"aml_locale_id\": 1}, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"getArrivalMethod\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of arrivalMethods in the specified language.<br><br>\n\nparams:<br>\nobject -> { aml_locale_id: The language in which arrivalMethods shall be returned }<br>\n\"appUser\" -> fixed string<br><br>\n\nDescription of returned objects:<br>\nam_id ... unique id of the arrivalMethods<br>\nam_name ... administrative name of the arrivalMethods<br>\naml_value ... name of that arrivalMethod in the specified language<br>\nused ... If 'on' then this arrivalMethod was set for at least one guest"
			},
			"response": []
		},
		{
			"name": "customerAdmin.settings.setArrivalMethod",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"aml_locale_id\": \"1\",\n\t\"arrivalMethodARR\": [{\n\t\t\t\"aml_arrivalMethod_id\": \"10\",\n\t\t\t\"aml_value\": \"bahni\"\n\t\t}, {\n\t\t\t\"aml_arrivalMethod_id\": \"11\",\n\t\t\t\"aml_value\": \"pkw\"\n\t\t}, {\n\t\t\t\"aml_arrivalMethod_id\": \"9\",\n\t\t\t\"aml_value\": \"unbekannt\"\n\t\t}\n\t]\n}\n, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"setArrivalMethod\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes all arrivalMethods from the database and saves a new list of arrivalMethods that's provided as input parameter.<br><br>\r\n\r\nparams:<br>\r\narrivalMethodARR ... list of arrivalMethods that should get saved<br>\r\naml_locale_id ... language of the specified arrivalMethods<br>\r\n\"appUser\" ... fixed string"
			},
			"response": []
		},
		{
			"name": "customerAdmin.settings.newArrivalMethod",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ { \"aml_value\":\"Newone\" }\n, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"newArrivalMethod\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request creates a new arrivalMethod in the database.<br><br>\n\nparams:<br>\nobject -> { aml_value: Name of the new arrivalMethod }<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "customerAdmin.settings.getDoctype",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ { \"dtl_locale_id\": 1}, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"getDoctype\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of docTypes in the specified language.<br><br>\n\nparams:<br>\nobject -> { dtl_locale_id: The language in which docTypes shall be returned }<br>\n\"appUser\" -> fixed string<br><br>\n\nDescription of returned objects:<br>\ndt_id ... unique id of the docTypes<br>\ndt_name ... administrative name of the docTypes<br>\ndtl_value ... name of that docType in the specified language<br>\nused ... If 'on' then this docType was set for at least one guest"
			},
			"response": []
		},
		{
			"name": "customerAdmin.settings.setDoctype",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"documentTypeARR\": [{\n\t\t\t\"dtl_documentType_id\": \"4\",\n\t\t\t\"dtl_value\": \"Ausweisnummer1\"\n\t\t}, {\n\t\t\t\"dtl_documentType_id\": \"1\",\n\t\t\t\"dtl_value\": \"driver's license\"\n\t\t}, {\n\t\t\t\"dtl_documentType_id\": \"2\",\n\t\t\t\"dtl_value\": \"ID card\"\n\t\t}, {\n\t\t\t\"dtl_documentType_id\": \"3\",\n\t\t\t\"dtl_value\": \"passport\"\n\t\t}\n\t],\n\t\"dtl_locale_id\": \"1\"\n}\n, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"setDoctype\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes all docTypes from the database and saves a new list of docTypes that's provided as input parameter.<br><br>\r\n\r\nparams:<br>\r\ndocumentTypeARR ... list of docTypes that should get saved<br>\r\ndtl_locale_id ... language of the specified docTypes<br>\r\n\"appUser\" ... fixed string"
			},
			"response": []
		},
		{
			"name": "customerAdmin.settings.newDoctype",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ { \"dtl_value\":\"SomeLabel100\" }\n, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"newDoctype\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request creates a new docType in the database.<br><br>\n\nparams:<br>\nobject -> { dtl_value: Name of the new docType }<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "customerAdmin.settings.getGuestRating",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"CompanyCustomerReview\",\n  \"functionName\": \"getCompanyFields\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request returns guestRating-settings of the given company in an object.<br>\nInputparameter = fixed string \"appUser\""
			},
			"response": []
		},
		{
			"name": "customerAdmin.settings.setGuestRating",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"c_guestRatingActive\", \"off\", \"appUser\" ],\n  \"className\": \"CompanyCustomerReview\",\n  \"functionName\": \"setCompanyField\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request sets single fields in the DB-table company that are relevant for guestRating.<br><br>\n\nparams:<br>\nstring -> Name of the field<br>\nstring -> \"on\" or \"off\" value of the setting<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "customerAdmin.settings.getCustomBookingSources",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\", false, { \"cbsl_locale_id\" : 2 } ],\n  \"className\": \"customBookingSource\",\n  \"functionName\": \"getCustomBookingSources\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request returns a list of bookingsources and their properties.<br><br>\n\nparams:<br>\n\"appUser\" -> fixed string<br>\nbool -> indicator if sources should be synced from channelmanager<br>\nobject -> { cbsl_locale_id: language in which sources should get returned }"
			},
			"response": []
		},
		{
			"name": "customerAdmin.settings.setCustomBookingSources",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"cbsl_locale_id\": \"1\",\n\t\"delList\": [\"27\", \"22\"],\n\t\"customBookingSourceARR\": [{\n\t\t\t\"cbs_show\": \"off\",\n\t\t\t\"cbsl_customBookingSource_id\": \"10\",\n\t\t\t\"cbsl_value\": \"AirBnb23\"\n\t\t}, {\n\t\t\t\"cbs_show\": \"on\",\n\t\t\t\"cbsl_customBookingSource_id\": \"9\",\n\t\t\t\"cbsl_value\": \"Book on departure EN\"\n\t\t}, {\n\t\t\t\"cbs_show\": \"on\",\n\t\t\t\"cbsl_customBookingSource_id\": \"7\",\n\t\t\t\"cbsl_value\": \"E-Mail\"\n\t\t}, {\n\t\t\t\"cbs_show\": \"on\",\n\t\t\t\"cbsl_customBookingSource_id\": \"11\",\n\t\t\t\"cbsl_value\": \"FeWo-direkt \\/ HomeAway\"\n\t\t}, {\n\t\t\t\"cbs_show\": \"on\",\n\t\t\t\"cbsl_customBookingSource_id\": \"8\",\n\t\t\t\"cbsl_value\": \"Letter\"\n\t\t}, {\n\t\t\t\"cbs_show\": \"off\",\n\t\t\t\"cbsl_customBookingSource_id\": \"5\",\n\t\t\t\"cbsl_value\": \"Phone\"\n\t\t}, {\n\t\t\t\"cbs_show\": \"off\",\n\t\t\t\"cbsl_customBookingSource_id\": \"6\",\n\t\t\t\"cbsl_value\": \"Walk-Into\"\n\t\t}, {\n\t\t\t\"cbs_show\": \"on\",\n\t\t\t\"cbsl_customBookingSource_id\": \"2\",\n\t\t\t\"cbsl_value\": \"Reception\"\n\t\t}, {\n\t\t\t\"cbs_show\": \"on\",\n\t\t\t\"cbsl_customBookingSource_id\": \"32\",\n\t\t\t\"cbsl_value\": \"booking.com first\"\n\t\t}, {\n\t\t\t\"cbs_show\": \"on\",\n\t\t\t\"cbsl_customBookingSource_id\": \"33\",\n\t\t\t\"cbsl_value\": \"booking.com second\"\n\t\t}\n\t]\n}\n, \"appUser\" ],\n  \"className\": \"customBookingSource\",\n  \"functionName\": \"setCustomBookingSources\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request updates/deletes bookingSources in the database<br><br>\n\nparams:<br>\nobject -> <br>\n{<br> \n&nbsp;&nbsp;cbsl_locale_id: The language that the update is for,<br>\n&nbsp;&nbsp;delList: Array of cbs_id, all customBookingSource records with ids from this array will get deleted from the database<br>\n&nbsp;&nbsp;customBookingSourceARR: Array of customBookingSource objects:<br>\n&nbsp;&nbsp;&nbsp;&nbsp;{ <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cbs_show: \"on\" or \"off\", represents the checkbox shown in the settings-GUI<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cbsl_customBookingSource_id: cbs_id of the customBookingSource record<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cbsl_value: Text-Label of the customBookingSource, represents the inputbox shown in the settings-GUI<br>\n&nbsp;&nbsp;&nbsp;&nbsp;}<br>\n&nbsp;&nbsp;}<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "customerAdmin.settings.validateCustomBookingSources",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\", {\"l_id\":\"1\",\"ids\":\"7, 11, 8, 9, 2\"} ],\n  \"className\": \"customBookingSource\",\n  \"functionName\": \"validateFields\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request checks if there are empty text labels for customBookingSources in the database.<br>\nIt does the check for labels in a different language than the currently selected language of the GUI<br><br>\n\nparams:<br>\n\"appUser\" -> fixed string<br>\nobject -> <br>\n{ <br>\n&nbsp;&nbsp;l_id: language id of the currently selected language in the settings GUI<br>\n&nbsp;&nbsp;ids: csv string of cbs_ids that the GUI wants to save<br>\n}<br><br>\n\nThe request will return the string \"OK\" if validation is okay or return the cbs_id of an invalid customBookingSource."
			},
			"response": []
		},
		{
			"name": "customerAdmin.settings.newCustomBookingSource",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ { \"cbsl_value\" : \"A new source\" }, \"appUser\" ],\n  \"className\": \"customBookingSource\",\n  \"functionName\": \"newCustomBookingSource\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request inserts a new customBookingSource into the database<br><br>\n\nparams:<br>\nobject -> { cbsl_value: Name of the new source }<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "customerInteraction.getInteractionList",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"untilDate\":\"2019-11-19\",\"showEN\":\"on\",\"fromDate\":\"2018-04-01\",\"showAdmin\":\"off\",\"showBO\":\"off\",\"showWorkflow\":\"off\",\"showRE\":\"on\",\"c_id\":1416}, \"appUser\" ],\n  \"className\": \"CustomerInteraction\",\n  \"functionName\": \"getCIlist\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request returns a list of \"interaction\" items (emails that are linked to certain bookings) based on a filter.<br><br>\n\nparams:<br>\nobject -> <br>\n{ <br>\n&nbsp;&nbsp;fromDate, untilDate: period of the query, format = YYYY-MM-DD<br>\n&nbsp;&nbsp;showEN: \"on\" or \"off\", filter on enquiries<br>\n&nbsp;&nbsp;showRE: \"on\" or \"off\", filter on reservations<br>\n&nbsp;&nbsp;showBO: \"on\" or \"off\", filter on bookings<br>\n&nbsp;&nbsp;showAdmin: \"on\" or \"off\", filter on admin mails<br>\n&nbsp;&nbsp;showWorkflow: \"on\" or \"off\", filter on workflow mails<br>\n&nbsp;&nbsp;c_id: int, optional parameter. If provided, only data for the given customer record will get returned  \n}<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "customerInteraction.resendInteraction",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1064, \"customerEMail\", \"appUser\" ],\n  \"className\": \"CompanyCustomerInteraction\",\n  \"functionName\": \"resendInteraction\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This sends an email that was already sent in the past again.<br><br>\n\nParameters:<br>\nint -> ce_id of an interaction item<br>\nstring -> interactionType of an interaction item<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "customerInteraction.restorePDF",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"/var/www/html/wo/Services/emailPDF/srv0010002/845_20190410124303_339323_customer.pdf\" ],\n  \"className\": \"CustomerInteraction\",\n  \"functionName\": \"restorePDF\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "It's possible, that PDF files that got sent through email are not existing anymore on the webserver because they got archived.<br>\nUsing this API request it's possible to restore it again from archive.<br><br>\n\nparams:<br>\nstring -> a full path to the PDF as in ce_stdAttachmentPath of customerInteraction.getInteractionList"
			},
			"response": []
		},
		{
			"name": "enquiryPool.getEnquiries",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\", \"2019-06-01\", \"2019-10-30\", \"on\", \"off\", \"on\", \"off\", \"arrivalDate\" ],\n  \"className\": \"enquiryPool\",\n  \"functionName\": \"getEnquiries\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of enquiries that are stored in the enquiryPool<br>\nIf from-date or until-date is null (one of them or both) the API will decide on default-rules which period of time to filter<br><br>\n\nParams:<br>\n\"appUser\" -> fixed string<br>\nstring -> fromDate for filtering the list, can be null. Format = YYYY-MM-DD<br>\nstring -> untilDate for filtering the list, can be null. Format = YYYY-MM-DD<br>\nstring -> 'on' or 'off' - filter on auto-answered enquiries (\"autoCHK\" in task description)<br>\nstring -> 'on' or 'off' - filter on manually answered enquiries (\"manualCHK\" in task description)<br>\nstring -> 'on' or 'off' - filter on open enquiries (\"openCHK\" in task description)<br>\nstring -> 'on' or 'off' - filter on declined enquiries (\"cancelledCHK\" in task description)<br>\nstring -> the dateFilterOption, can be either empty, \"inputDate\" or \"arrivalDate\" (if it's empty then \"inputDate\" is chosen by default)"
			},
			"response": []
		},
		{
			"name": "enquiryPool.cancelEnquiry",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\", \n  {\n        \"_explicitType\": \"com.eBook.enquiryPool.dto.enquiryPoolDTO\",\n        \"ep_id\": \"14\",\n        \"ep_salutation_id\": \"2\",\n        \"ep_title\": \"\",\n        \"ep_firstname\": \"Christoph\",\n        \"ep_name\": \"Wariszlovich\",\n        \"ep_addressLine1\": \"Teststraße 1\",\n        \"ep_postCode\": \"7000\",\n        \"ep_city\": \"Eisenstadt\",\n        \"ep_country_id\": \"15\",\n        \"ep_email\": \"cw@easybooking.at\",\n        \"ep_phone\": \"\",\n        \"ep_entityGroup_id\": \"6\",\n        \"ep_altEntityGroup_id\": \"22\",\n        \"ep_serviceType_id\": \"1\",\n        \"ep_serviceTypeName\": null,\n        \"ep_arrival\": \"2019-08-18 00:00:00\",\n        \"ep_arrival_UK\": \"2019-08-18 00:00:00\",\n        \"ep_departure\": \"2019-08-22 00:00:00\",\n        \"ep_noOfPersons\": \"2\",\n        \"ep_noOfChildren\": \"0\",\n        \"ep_comment\": \"test\",\n        \"ep_status\": \"openEnquiry\",\n        \"ep_source\": \"Enquiry Form\",\n        \"ep_inputDate\": \"01.06.2018 13:38:39\",\n        \"ep_nights\": \"4\",\n        \"ep_childAge1\": null,\n        \"ep_childAge2\": null,\n        \"ep_childAge3\": null,\n        \"ep_childAge4\": null,\n        \"ep_childAge5\": null,\n        \"ep_childAge6\": null,\n        \"ep_childBDay1\": null,\n        \"ep_childBDay2\": null,\n        \"ep_childBDay3\": null,\n        \"ep_childBDay4\": null,\n        \"ep_childBDay5\": null,\n        \"ep_childBDay6\": null,\n        \"ep_DOBs\": null,\n        \"ep_price\": \"€ 0.00\",\n        \"ep_childAges\": \"\",\n        \"ep_statusSortId\": \"1\",\n        \"actualArrival\": null,\n        \"actualDeparture\": null,\n        \"entity_id\": null,\n        \"ep_booking_id\": null,\n        \"ep_booking_id0\": null,\n        \"ep_booking_id1\": null,\n        \"ep_booking_id2\": null,\n        \"b_bookingStatus_id\": null,\n        \"tooltip_text\": null,\n        \"ep_enquiryPoolExt_id\": null,\n        \"ep_customer_id\": \"827\",\n        \"ep_locale_id\": \"2\",\n        \"ep_cancelDate\": \"\",\n        \"ep_ip\": \"\",\n        \"currentMaxId\": null,\n        \"ep_arrival_display\": \"18.08.2019\",\n        \"epe_rangeFromDate\": null,\n        \"epe_rangeUntilDate\": null,\n        \"mainCategory\": \"Familienzimmer\",\n        \"altCategory\": \"Suite\",\n        \"catering\": \"Ohne Verpflegung\",\n        \"arrivalTooltip\": \"18.08.2019\",\n        \"departureTooltip\": \"22.08.2019\",\n        \"rangeEnquiry\": \"off\",\n        \"cl_name\": \"Österreich\",\n        \"language\": \"de\",\n        \"ep_status_SORT\": \"openEnquiry\",\n        \"ep_source_SORT\": \"\",\n        \"ep_name_SORT\": \"Wariszlovich\",\n        \"ep_inputDate_SORT\": \"2018-06-01 13:38:39\",\n        \"ep_nights_SORT\": \"4\",\n        \"ep_noOfPersons_SORT\": \"2\",\n        \"ep_price_SORT\": null,\n        \"epe_rangeFromDate_UK\": null,\n        \"epe_rangeUntilDate_UK\": null,\n        \"ep_deleted\": null,\n        \"ep_airbnbConfirmationCode\": null,\n        \"ep_airbnbCcId\": null,\n        \"isAirbnb\": \"off\"\n    }\n],\n  \"className\": \"enquiryPool\",\n  \"functionName\": \"cancelEnquiry\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This function cancels an enquiry from the pool. The enquiry can still be viewed in the UI. An Email is sent to the guest about the cancellation.<br><br>\n\nparams:<br>\n\"appUser\": fixed string<br>\nobject: an object as it's returned in the result-array of enquiryPool.getEnquiries"
			},
			"response": []
		},
		{
			"name": "enquiryPool.deleteEnquiry",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\", \n  {\n        \"_explicitType\": \"com.eBook.enquiryPool.dto.enquiryPoolDTO\",\n        \"ep_id\": \"14\",\n        \"ep_salutation_id\": \"2\",\n        \"ep_title\": \"\",\n        \"ep_firstname\": \"Christoph\",\n        \"ep_name\": \"Wariszlovich\",\n        \"ep_addressLine1\": \"Teststraße 1\",\n        \"ep_postCode\": \"7000\",\n        \"ep_city\": \"Eisenstadt\",\n        \"ep_country_id\": \"15\",\n        \"ep_email\": \"cw@easybooking.at\",\n        \"ep_phone\": \"\",\n        \"ep_entityGroup_id\": \"6\",\n        \"ep_altEntityGroup_id\": \"22\",\n        \"ep_serviceType_id\": \"1\",\n        \"ep_serviceTypeName\": null,\n        \"ep_arrival\": \"2019-08-18 00:00:00\",\n        \"ep_arrival_UK\": \"2019-08-18 00:00:00\",\n        \"ep_departure\": \"2019-08-22 00:00:00\",\n        \"ep_noOfPersons\": \"2\",\n        \"ep_noOfChildren\": \"0\",\n        \"ep_comment\": \"test\",\n        \"ep_status\": \"openEnquiry\",\n        \"ep_source\": \"Enquiry Form\",\n        \"ep_inputDate\": \"01.06.2018 13:38:39\",\n        \"ep_nights\": \"4\",\n        \"ep_childAge1\": null,\n        \"ep_childAge2\": null,\n        \"ep_childAge3\": null,\n        \"ep_childAge4\": null,\n        \"ep_childAge5\": null,\n        \"ep_childAge6\": null,\n        \"ep_childBDay1\": null,\n        \"ep_childBDay2\": null,\n        \"ep_childBDay3\": null,\n        \"ep_childBDay4\": null,\n        \"ep_childBDay5\": null,\n        \"ep_childBDay6\": null,\n        \"ep_DOBs\": null,\n        \"ep_price\": \"€ 0.00\",\n        \"ep_childAges\": \"\",\n        \"ep_statusSortId\": \"1\",\n        \"actualArrival\": null,\n        \"actualDeparture\": null,\n        \"entity_id\": null,\n        \"ep_booking_id\": null,\n        \"ep_booking_id0\": null,\n        \"ep_booking_id1\": null,\n        \"ep_booking_id2\": null,\n        \"b_bookingStatus_id\": null,\n        \"tooltip_text\": null,\n        \"ep_enquiryPoolExt_id\": null,\n        \"ep_customer_id\": \"827\",\n        \"ep_locale_id\": \"2\",\n        \"ep_cancelDate\": \"\",\n        \"ep_ip\": \"\",\n        \"currentMaxId\": null,\n        \"ep_arrival_display\": \"18.08.2019\",\n        \"epe_rangeFromDate\": null,\n        \"epe_rangeUntilDate\": null,\n        \"mainCategory\": \"Familienzimmer\",\n        \"altCategory\": \"Suite\",\n        \"catering\": \"Ohne Verpflegung\",\n        \"arrivalTooltip\": \"18.08.2019\",\n        \"departureTooltip\": \"22.08.2019\",\n        \"rangeEnquiry\": \"off\",\n        \"cl_name\": \"Österreich\",\n        \"language\": \"de\",\n        \"ep_status_SORT\": \"openEnquiry\",\n        \"ep_source_SORT\": \"\",\n        \"ep_name_SORT\": \"Wariszlovich\",\n        \"ep_inputDate_SORT\": \"2018-06-01 13:38:39\",\n        \"ep_nights_SORT\": \"4\",\n        \"ep_noOfPersons_SORT\": \"2\",\n        \"ep_price_SORT\": null,\n        \"epe_rangeFromDate_UK\": null,\n        \"epe_rangeUntilDate_UK\": null,\n        \"ep_deleted\": null,\n        \"ep_airbnbConfirmationCode\": null,\n        \"ep_airbnbCcId\": null,\n        \"isAirbnb\": \"off\"\n    }\n],\n  \"className\": \"enquiryPool\",\n  \"functionName\": \"deleteEnquiry\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This function deletes an enquiry from the pool. Afterwards the enquiry can just be viewed by directly accessing the DB, the user cannot see it anymore in the UI<br><br>\n\nparams:<br>\n\"appUser\": fixed string<br>\nobject: an object as it's returned in the result-array of enquiryPool.getEnquiries"
			},
			"response": []
		},
		{
			"name": "enquiryPool.sendToAirbnb",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [   {\n    \"attempt_action\": \"accept\",\n    \"ep_id\": \"14\"\n  }, \"appUser\"\n],\n  \"className\": \"enquiryPool\",\n  \"functionName\": \"sendToAirbnb\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request either accepts or declines an enquiry at airbnb. There are 2 different types of input objects to this request:<br><br>\nexample object for accept:<br>\n{<br>\n&nbsp;&nbsp;\"attempt_action\": \"accept\",<br>\n&nbsp;&nbsp;\"ep_id\": \"14\"<br>\n}<br><br>\nexample object for decline:<br>\n{<br>\n&nbsp;&nbsp;\"attempt_action\": \"deny\",<br>\n&nbsp;&nbsp;\"decline_reason\": \"not_comfortable\",<br>\n&nbsp;&nbsp;\"decline_message_to_guest\": \"Dear guest. Unfortunately we need to decline your request\",<br>\n&nbsp;&nbsp;\"ep_id\": \"14\"<br>\n}<br><br><br>\nattempt_action defines the type of request to airbnb, can be either \"accept\" or \"deny\".<br>\nep_id comes from elements as they are provided by enquiryPool.getEnquiries<br>\ndecline_reason is a string from this list: \"dates_not_available\", \"not_a_good_fit\", \"waiting_for_better_reservation\", \"not_comfortable\"<br>\ndecline_message_to_guest = free text"
			},
			"response": []
		},
		{
			"name": "enquiryPool.autoCreateEnquiry",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"params\": [\"appUser\", {\r\n\t\t\t\"_explicitType\": \"com.eBook.enquiryPool.dto.enquiryPoolDTO\",\r\n\t\t\t\"ep_id\": \"1\",\r\n\t\t\t\"ep_salutation_id\": \"2\",\r\n\t\t\t\"ep_title\": \"\",\r\n\t\t\t\"ep_firstname\": \"Easybooking Test AP\",\r\n\t\t\t\"ep_name\": \"Easybooking Test AP\",\r\n\t\t\t\"ep_addressLine1\": \"Hauptstraße 3\",\r\n\t\t\t\"ep_postCode\": \"7000\",\r\n\t\t\t\"ep_city\": \"Eisenstadt\",\r\n\t\t\t\"ep_country_id\": \"15\",\r\n\t\t\t\"ep_email\": \"ap@easybooking.at\",\r\n\t\t\t\"ep_phone\": \"\",\r\n\t\t\t\"ep_entityGroup_id\": \"1\",\r\n\t\t\t\"ep_altEntityGroup_id\": \"6\",\r\n\t\t\t\"ep_serviceType_id\": \"1\",\r\n\t\t\t\"ep_serviceTypeName\": null,\r\n\t\t\t\"ep_arrival\": \"2018-08-19 00:00:00\",\r\n\t\t\t\"ep_arrival_UK\": \"2019-08-19 00:00:00\",\r\n\t\t\t\"ep_departure\": \"2018-08-24 00:00:00\",\r\n\t\t\t\"ep_noOfPersons\": \"2\",\r\n\t\t\t\"ep_noOfChildren\": \"0\",\r\n\t\t\t\"ep_comment\": \"\",\r\n\t\t\t\"ep_status\": \"openEnquiry\",\r\n\t\t\t\"ep_source\": \"Enquiry Form\",\r\n\t\t\t\"ep_inputDate\": \"13.06.2017 14:58:21\",\r\n\t\t\t\"ep_nights\": \"5\",\r\n\t\t\t\"ep_childAge1\": null,\r\n\t\t\t\"ep_childAge2\": null,\r\n\t\t\t\"ep_childAge3\": null,\r\n\t\t\t\"ep_childAge4\": null,\r\n\t\t\t\"ep_childAge5\": null,\r\n\t\t\t\"ep_childAge6\": null,\r\n\t\t\t\"ep_childBDay1\": null,\r\n\t\t\t\"ep_childBDay2\": null,\r\n\t\t\t\"ep_childBDay3\": null,\r\n\t\t\t\"ep_childBDay4\": null,\r\n\t\t\t\"ep_childBDay5\": null,\r\n\t\t\t\"ep_childBDay6\": null,\r\n\t\t\t\"ep_DOBs\": null,\r\n\t\t\t\"ep_price\": \"€ 1150.00\",\r\n\t\t\t\"ep_childAges\": \"\",\r\n\t\t\t\"ep_statusSortId\": \"1\",\r\n\t\t\t\"actualArrival\": null,\r\n\t\t\t\"actualDeparture\": null,\r\n\t\t\t\"entity_id\": null,\r\n\t\t\t\"ep_booking_id\": \"13\",\r\n\t\t\t\"ep_booking_id0\": \"0\",\r\n\t\t\t\"ep_booking_id1\": \"0\",\r\n\t\t\t\"ep_booking_id2\": \"0\",\r\n\t\t\t\"b_bookingStatus_id\": \"1\",\r\n\t\t\t\"tooltip_text\": null,\r\n\t\t\t\"ep_enquiryPoolExt_id\": null,\r\n\t\t\t\"ep_customer_id\": \"13\",\r\n\t\t\t\"ep_locale_id\": \"2\",\r\n\t\t\t\"ep_cancelDate\": \"\",\r\n\t\t\t\"ep_ip\": \"\",\r\n\t\t\t\"currentMaxId\": null,\r\n\t\t\t\"ep_arrival_display\": \"19.08.2019\",\r\n\t\t\t\"epe_rangeFromDate\": null,\r\n\t\t\t\"epe_rangeUntilDate\": null,\r\n\t\t\t\"mainCategory\": \"Doppelzimmer\",\r\n\t\t\t\"altCategory\": \"Familienzimmer\",\r\n\t\t\t\"catering\": \"Ohne Verpflegung\",\r\n\t\t\t\"arrivalTooltip\": \"19.08.2019\",\r\n\t\t\t\"departureTooltip\": \"24.08.2019\",\r\n\t\t\t\"rangeEnquiry\": \"off\",\r\n\t\t\t\"cl_name\": \"Österreich\",\r\n\t\t\t\"language\": \"de\",\r\n\t\t\t\"ep_status_SORT\": \"openEnquiry\",\r\n\t\t\t\"ep_source_SORT\": \"\",\r\n\t\t\t\"ep_name_SORT\": \"Easybooking Test AP\",\r\n\t\t\t\"ep_inputDate_SORT\": \"2017-06-13 14:58:21\",\r\n\t\t\t\"ep_nights_SORT\": \"5\",\r\n\t\t\t\"ep_noOfPersons_SORT\": \"2\",\r\n\t\t\t\"ep_price_SORT\": \"1150.00000\",\r\n\t\t\t\"epe_rangeFromDate_UK\": null,\r\n\t\t\t\"epe_rangeUntilDate_UK\": null,\r\n\t\t\t\"ep_deleted\": null,\r\n\t\t\t\"ep_airbnbConfirmationCode\": null,\r\n\t\t\t\"ep_airbnbCcId\": null,\r\n\t\t\t\"isAirbnb\": \"off\",\r\n\t\t\t\"bs_name\": \"Enquiry\",\r\n\t\t\t\"bs_name0\": null,\r\n\t\t\t\"bs_name1\": null,\r\n\t\t\t\"bs_name2\": null,\r\n\t\t\t\"minFromDate\": \"2017-06-19\",\r\n\t\t\t\"minFromDate0\": null,\r\n\t\t\t\"minFromDate1\": null,\r\n\t\t\t\"minFromDate2\": null\r\n\t\t}, null, \"on\", false, null, true],\r\n\t\"className\": \"enquiryPool\",\r\n\t\"functionName\": \"autoCreateEnquiry\"\r\n}\r\n"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request tries to create an offer to a guest.<br><br>\n\nparams:<br>\n1) \"appUser\" -> fixed string<br>\n2) object -> an object as it's returned in the list of enquiryPool.getEnquiries<br>\n3) int -> maxDayTolerance. If an arrival is not possible at a certain date, the function tries to find other dates that are within this number of days. Can be null.<br>\n4) string -> \"on\" or \"off\". Indicator if the function was called by Julia (\"on\") or by the booking mask of a customer website<br>\n5) bool -> The \"nolimits\" flag: If false, then the search for a valid offer will use a lot of extra criteria and filters. If true, then there will be \"no limits\"<br>\n6) string -> parameter for extra information. Currently not in use - set it to null<br>\n7) bool -> Indicator, if this function was meant for the angular or the flash roomplan. Set it to true in the JuliaAngular context.<br><br>\n\nThe result will be an object. If no matching offer could be found, resultobject.status will be \"NOTHINGFOUND\".<br>\nOtherwise resultobject.status will be \"OK\" and can be passed to the angular roomplan as it is."
			},
			"response": []
		},
		{
			"name": "enquiryPool.setEnquiryStatusToManual",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\", { \"ep_id\": \"13\" } ],\n  \"className\": \"enquiryPool\",\n  \"functionName\": \"setEnquiryStatusToManual\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This function just sets the status of an enquiry in the enquiryPool to manually assigned <br><br>\n\nparams:<br>\n\"appUser\" -> fixed string<br>\nobject -> { ep_id: ep_id of the enquiry to set manually assigned }<br>"
			},
			"response": []
		},
		{
			"name": "calendar.settingsGetColors",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"CalendarColor\",\n  \"functionName\": \"getCalendarColor\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns data about calendar colors<br><br>\n\nparams:<br>\n\"appUser\" -> fixed string<br>"
			},
			"response": []
		},
		{
			"name": "calendar.settingsSetColors",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n    \"dummy\": \"dummy\",\n    \"enquiryColor\": \"3266187\",\n    \"reservationColor\": \"1022463\",\n    \"bookingColor\": \"16461695\",\n    \"blockColor\": \"14667524\",\n    \"contingentColor\": \"13260\",\n    \"invoiceCreatedIndicatorColor\": \"13421772\",\n    \"c_defaultRoomplan\": \"old\",\n    \"cc_colorMonday\": \"16777215\",\n    \"cc_colorTuesday\": \"16777215\",\n    \"cc_colorWednesday\": \"16777215\",\n    \"cc_colorThursday\": \"16777215\",\n    \"cc_colorFriday\": \"16777215\",\n    \"cc_colorSaturday\": \"13421772\",\n    \"cc_colorSunday\": \"13421772\",\n    \"calendarCustomPeriodColors\": [\n        {\n            \"ccpc_id\": \"4\",\n            \"ccpc_name\": \"Test\",\n            \"ccpc_fromDate\": \"2018-01-18 00:00:00\",\n            \"ccpc_untilDate\": \"2018-01-18 00:00:00\",\n            \"ccpc_color\": \"6750207\"\n        },\n        {\n            \"ccpc_id\": \"6\",\n            \"ccpc_name\": \"dsfeda\",\n            \"ccpc_fromDate\": \"2018-04-03 00:00:00\",\n            \"ccpc_untilDate\": \"2018-04-04 00:00:00\",\n            \"ccpc_color\": \"16776960\"\n        },\n        {\n            \"ccpc_id\": \"5\",\n            \"ccpc_name\": \"rfgsadfa\",\n            \"ccpc_fromDate\": \"2018-04-05 00:00:00\",\n            \"ccpc_untilDate\": \"2018-04-05 00:00:00\",\n            \"ccpc_color\": \"65433\"\n        },\n        {\n            \"ccpc_id\": \"2\",\n            \"ccpc_name\": \"Pfingsten\",\n            \"ccpc_fromDate\": \"2018-05-18 00:00:00\",\n            \"ccpc_untilDate\": \"2018-05-21 00:00:00\",\n            \"ccpc_color\": \"6750207\"\n        },\n        {\n            \"ccpc_id\": \"7\",\n            \"ccpc_name\": \"Name der Periode\",\n            \"ccpc_fromDate\": \"2018-10-17 00:00:00\",\n            \"ccpc_untilDate\": \"2018-10-24 00:00:00\",\n            \"ccpc_color\": \"16777215\"\n        },\n        {\n            \"ccpc_id\": \"3\",\n            \"ccpc_name\": \"skdfns\",\n            \"ccpc_fromDate\": \"2019-05-30 00:00:00\",\n            \"ccpc_untilDate\": \"2019-06-02 00:00:00\",\n            \"ccpc_color\": \"6750207\"\n        }\n    ],\n    \"cc_useSpecialColoring\": \"on\"\n}, \"appUser\" ],\n  \"className\": \"CalendarColor\",\n  \"functionName\": \"setCalendarColor\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves data about calendar colors.<br><br>\n\nparams:<br>\nobject -> an object as it's returned by calendar.settingsGetColors<br>\n\"appUser\" -> fixed string<br>"
			},
			"response": []
		},
		{
			"name": "billingOverview.getList",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"untilDate\": \"2019-07-06\",\n\t\"showDeleted\": \"on\",\n\t\"fromDate\": \"2019-04-01\",\n\t\"searchString\": \"\",\n\t\"showSplitBills\": \"on\",\n\t\"filterOption\": \"all\",\n\t\"dateFilterOption\": \"departureDate\",\n\t\"outstandingOption\": \"all\"\n}\n, \"appUser\" ],\n  \"className\": \"BillingWorkbench\",\n  \"functionName\": \"getBillingForPeriod\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request retrieves a list of bills and respects a view filters<br><br>\n\nparams:<br>\nobject -> <br>\n{ <br>\n&nbsp;&nbsp;untilDate, fromDate: Dates in format YYYY-MM-DD that specifiy the chosen daterange<br>\n&nbsp;&nbsp;showDeleted: string that's either 'on' or 'off'. Indicates if bills of deleted bookings should be shown<br>\n&nbsp;&nbsp;searchString: a text-filter where it's possible to search for a certain guestname or invoicenumber for example<br>\n&nbsp;&nbsp;showSplitBills: string that's eiter 'on' or 'off'. Indicates if working bills of billsplits should be shown<br>\n&nbsp;&nbsp;filterOption: string that can be eiter 'all', 'bills' or 'preview'. Filters on showing bills with an invoice number, or only preview bills or all bills<br>\n&nbsp;&nbsp;dateFilterOption: string that's either 'arrivalDate', 'departureDate' or 'invoiceDate'. It explains the field that the specified date-range should filter on<br>\n&nbsp;&nbsp;outstandingOption: string that's either 'all', 'with' or 'without'<br>\n}<br>\n\"appUser\": fixed string"
			},
			"response": []
		},
		{
			"name": "billingOverview.generatePDF",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1036, 837, \"appUser\", false ],\n  \"className\": \"Billing\",\n  \"functionName\": \"generateBillVersionPDF\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request generates the PDF for a certain bill.<br><br>\n\nparams:<br>\nint -> bill_id<br>\nint -> booking_id<br>\n\"appUser\" -> fixed string<br>\nbool -> indicator, if this request was called to generate a final invoice PDF. Parameter is optional, will default to false if not provided.<br><br>\n\nReturn:<br>\nArray with 1 element containing the path to the PDF, relative to the webserver root directory<br>\nExample:<br>\n[<br>\n&nbsp;&nbsp;&nbsp;&nbsp;\"/wo/Services/invoices/srv0010002/1036_837.pdf\"<br>\n]"
			},
			"response": []
		},
		{
			"name": "billingOverview.deleteBill",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1062, \"appUser\" ],\n  \"className\": \"Billing\",\n  \"functionName\": \"deleteBill\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This function deletes a standalone bill from the DB.<br><br>\n\nparams:<br>\nint -> bill_id<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "billingOverview.sendInvoice",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1033, 1374, \"test@test.test\", \"appUser\" ],\n  \"className\": \"BillingWorkbench\",\n  \"functionName\": \"sendInvoiceCustomerMail\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request sends the PDF of an invoice together with some standard email text to a guest.<br><br>\n\nparams:<br>\nint -> bill_id<br>\nint -> customer_id<br>\nstring -> email-address<br>\n\"appuser\" -> fixed string<br><br>\n\nReturn:<br>\nThe request will return an array with 1 string-element that's either \"Success\" or \"Failed\""
			},
			"response": []
		},
		{
			"name": "billingOverview.cancelInvoice",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1033, \"appUser\" ],\n  \"className\": \"Billing\",\n  \"functionName\": \"cancelInvoice\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request creates a cancellation-invoice of an invoice = it creates a copy of an invoice but all values are negatives of the original values.<br>\nThen it unlinks the original invoice from the linked booking and creates a new preview invoice for the booking<br><br>\n\nparams:<br>\nint -> bill_id<br>\n\"appUser\" -> fixed string<br>"
			},
			"response": []
		},
		{
			"name": "billingOverview.restoreInvoiceForPermanentlyDeletedBooking",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 836, \"appUser\" ],\n  \"className\": \"Billing\",\n  \"functionName\": \"restoreInvoiceForPermanentlyDeletedBooking\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This restores an already deleted invoice for a deleted booking<br><br>\n\nparams:<br>\nint -> booking_id<br>\n\"appUser\" -> fixed string<br>"
			},
			"response": []
		},
		{
			"name": "billingOverview.restoreInvoiceForDeletedStandaloneInvoice",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1062, \"appUser\" ],\n  \"className\": \"Billing\",\n  \"functionName\": \"restoreInvoiceForDeletedStandaloneInvoice\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This restores an already deleted standalone invoice<br><br>\n\nparams:<br>\nint -> bill_id<br>\n\"appUser\" -> fixed string<br>"
			},
			"response": []
		},
		{
			"name": "billingOverview.getBillVersionDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"on\", 1008, 827, \"appUser\" ],\n  \"className\": \"Billing\",\n  \"functionName\": \"getBillVersionDetail\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request retrieves details about a certain bill (that's usually also linked to a booking)<br><br>\n\nparams:<br>\nstring -> either 'on' or 'off': indicates, if the bill-details should get refreshed in the DB before they are read and delivered to the client<br>\nint -> bill_id<br>\nint -> booking_id"
			},
			"response": []
		},
		{
			"name": "searchCustomer",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"searchText\":\"pinter\",\"c_id_dontshow\":\"\"}, \"appUser\" ],\n  \"className\": \"CompanyCustomerSearch\",\n  \"functionName\": \"searchCustomers\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request takes a piece of text as searchparameter and searches for matching guests in the database<br><br>\n\nparams:<br>\nobject -><br> \n{<br> \n&nbsp;&nbsp;&nbsp;&nbsp;searchText: the text to search for, <br>\n&nbsp;&nbsp;&nbsp;&nbsp;c_id_dontshow: optional parameter. The guest with the given id will be excluded in the search result<br>\n},<br> \n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "billingOverview.editInvoiceItems.getRegformsToBooking",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 248, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"getRegformsToBooking\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of registrationForms that are linked to a certain booking<br><br>\n\nparams:<br>\nint -> The booking_id of the booking\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "earlyBirdDiscount.getLocale",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"ebd_id\":\"20\",\"ebdl_locale_id\":\"3\"}, \"appUser\" ],\n  \"className\": \"EarlyBirdDiscount\",\n  \"functionName\": \"getLocale\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "earlyBirdDiscount.adminEarlyBirdDiscount",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"ebd_id\": \"21\",\n\t\"ebd_fromDate\": \"2018-05-02\",\n\t\"ebd_untilDate\": \"2018-05-31\",\n\t\"ebd_value\": \"10.00\",\n\t\"ebd_daysBeforeArrival\": 30,\n\t\"ebdl_locale_id\": \"2\",\n\t\"ebdl_value\": \"Frühbucherrabatt\",\n\t\"ebd_fixedDate\": \"2018-04-30\",\n\t\"ebd_nightsFrom\": \"7\",\n\t\"ebd_nightsUntil\": \"16\",\n\t\"ebd_type\": \"fixeddate\",\n\t\"ebd_discountType\": \"PricePerPersonPerNight\"\n}\n, \"appUser\" ],\n  \"className\": \"EarlyBirdDiscount\",\n  \"functionName\": \"adminEarlyBirdDiscount\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request inserts a new earlyBirdDiscount configuration or updates an existing one.  \nOnly 3 fields are needed when inserting a new earlyBirdDiscount, I made them bold<br><br>\n\nparams:  \nobject ->  \n{  \n&nbsp;&nbsp;**int ebd_id: unique id of the earlyBirdDiscount. Provide 0 here when inserting a new discount**  \n&nbsp;&nbsp;**string ebd_fromDate and ebd_untilDate: Range that the discounts is meant for. Provide in format YYYY-MM-DD**  \n&nbsp;&nbsp;float ebd_value: Value of the discount  \n&nbsp;&nbsp;int ebd_daysBeforeArrival: within this number of days before arrival the discount is valid  \n&nbsp;&nbsp;int ebdl_locale_id: the id of the language that the label ebdl_value is provided in  \n&nbsp;&nbsp;string ebdl_value: label of the discount  \n&nbsp;&nbsp;string ebd_fixedDate: Date until the discount is valid in format YYYY-MM-DD. Provide empty string if ebd_type != \"fixeddate\"  \n&nbsp;&nbsp;int ebd_nightsFrom and ebd_nightsUntil: range of nights that the discount is meant for  \n&nbsp;&nbsp;string ebd_type: type of the discount, either \"xdays\" or \"fixeddate\"  \n&nbsp;&nbsp;string ebd_discountType: either \"PricePerPersonPerNight\", \"PercOnTotal\" or \"perDayBeforeArrival\"  \n}  \n\"appUser\" -> fixed string<br><br>\n\nThe request returns an array with only 1 element: The ebd_id of the discount configuration (so if it was a newly inserted discount it contains the new ebd_id)"
			},
			"response": []
		},
		{
			"name": "earlyBirdDiscount.deleteEarlyBirdDiscount",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 21, \"appUser\" ],\n  \"className\": \"EarlyBirdDiscount\",\n  \"functionName\": \"deleteEarlyBirdDiscount\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes an earlyBirdDiscount configuration from the database<br><br>\n\nparams:  \nint -> ebd_id of the discount  \n\"appUser\" -> fixed string<br><br>\n\nReturn value is irrelevant"
			},
			"response": []
		},
		{
			"name": "guestRating.getEBReview",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 716, \"srv0010002\" ],\n  \"className\": \"CompanyCustomerReview\",\n  \"functionName\": \"getEBReview\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns data about guest-reviews for a given guest, identified by c_id.<br><br>\n\nparams:  \nint -> c_id of the customer (guest) record  \nstring -> dbName of the user (companyDetails.dbName)  \nint -> optional parameter b_id. Use this to filter on guest-reviews that are linked to a certain booking <br><br>\n\nReturn:  \nIf the guest was not found in the review-database this request will just return an empty array.  \nElse the return is an object containing these fields:  \nstring reviewFound: either 'on' or 'off'. Indicates, if there's at least 1 guest-review for this guest  \nint countOfReviews: the total count of reviews for this guest  \nint gr_id: unique id of the last guestreview record in the DB  \nint gr_reviewer_id: unique id of the reviewer (that's usually the hotel of the user or another hotel that uses easybooking)  \nint gr_guest_id: unique id of the guest in the rating database  \nstring gr_date: date of the last review in format (YYYY-MM-DD)  \nint gr_externalBooking_id: id of the booking that the last review was done for - can be null  \nint gr_externalGuest_id: unique id of the guest in the local user DB (actually the c_id that's provided as input parameter)  \nint gr_externalID: not used  \nstring gr_fromDate, gr_untilDate: If this review was done related to a booking then this tells when the arrival (fromDate) and departure (untilDate) was (format YYYY-MM-DD)  \nfloat gr_price: Price of the booking (if the review was done related to a booking)  \nint gr_behavior, gr_paymentWilling, gr_respectedHouseRules, gr_cleanliness, gr_serviceCosts, gr_vipFactor: number between 0 and 5 that describes the rating of the certain rating-category  \nstring gr_thumbUp: either 'on' or 'off', indicates if thumb was up or down at this review  \nstring gr_comment: comment to this review  \nint avgRatingThisReview: average rating of the returned review  \nint recommendationPerc: The quota of thumbUps over all reviews (for example 100 reviews were done, 30 thumbups given = 30 %)  \nint overallRatingNetwork: the average rating over all reviews that were done for this guest"
			},
			"response": []
		},
		{
			"name": "guestRating.setEBReview",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 716, {\n\t\"gr_comment\": \"Just another test comment 4\",\n\t\"gr_thumbUp\": \"on\",\n\t\"gr_serviceCosts\": 1,\n\t\"gr_paymentWilling\": 0,\n\t\"gr_vipFactor\": 2,\n\t\"gr_respectedHouseRules\": 0,\n\t\"gr_cleanliness\": 1,\n\t\"gr_behavior\": 1\n}, \n\"srv0010002\" ],\n  \"className\": \"CompanyCustomerReview\",\n  \"functionName\": \"setEBReview\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves a guest-review to the DB.<br><br>\n\nparams:  \nint -> c_id of the guest that's getting rated  \nobject ->  \n{  <br>\n&nbsp;&nbsp;string gr_comment: comment to this guest  \n&nbsp;&nbsp;string gr_thumbUp: either 'on' = thumbUp or 'off' = thumbDown  \n&nbsp;&nbsp;int gr_behavior, gr_paymentWilling, gr_respectedHouseRules, gr_cleanliness, gr_serviceCosts, gr_vipFactor: number between 0 and 5 that describes the rating of the certain rating-category  \n}  <br>\nstring -> dbName of the user (companyDetails.dbName)<br><br>\n\nreturn of this is irrelevant, it's always an empty array."
			},
			"response": []
		},
		{
			"name": "mergeGuests.getMergeCustomerDetails",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"c_id_1\":\"716\",\"c_id_2\":\"9\"}, \"appUser\" ],\n  \"className\": \"CompanyCustomerDetail\",\n  \"functionName\": \"getMergeCustomerDetails\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns details about 2 customer DB records that match the given ids<br><br>\n\nparams:  \nobject ->  \n{  <br>\n&nbsp;&nbsp;int c_id_1: c_id of the first customer  \n&nbsp;&nbsp;int c_id_2: c_id of the second customer  \n}  <br>\n\"appUser\" -> fixed string<br><br>\n\nReturn:  \nAn array containing 2 objects get returned, for each customer DB record one."
			},
			"response": []
		},
		{
			"name": "mergeGuests.getDropdownBoxes",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"getDropdownBoxes\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns data that's needed for dropdowns. No special parameters, only \"appUser\" fixed."
			},
			"response": []
		},
		{
			"name": "mergeGuests.mergeCustomers",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"main_cid\": \"747\",\n\t\"other_cid\": \"748\",\n\t\"c_eMailAddress\": \"ap@easybooking.eu\",\n\t\"c_carRegNo\": \"\",\n\t\"c_nationality_id\": \"250\",\n\t\"c_occupationBranch\": \"\",\n\t\"c_postBox\": \"\",\n\t\"c_birthCity\": \"\",\n\t\"bookingGuestCharacteristicsLST\": \"17, 13, 11\",\n\t\"c_company\": \"\",\n\t\"c_title\": \"\",\n\t\"c_occupation\": \"\",\n\t\"c_salutation_id\": \"2\",\n\t\"c_documentType_id\": 0,\n\t\"c_lastName\": \"Entscheff-Pinter\",\n\t\"c_companyRegNo\": \"\",\n\t\"c_firstName\": \"Andreas\",\n\t\"c_region\": \"\",\n\t\"c_addressLine1\": \"Asdf\",\n\t\"c_comment\": \"\",\n\t\"c_postCode\": \"7000\",\n\t\"c_addressLine1Plus\": \"\",\n\t\"c_cityPlus\": \"\",\n\t\"c_city\": \"Eisenstadt\",\n\t\"c_birthDay\": \"1979-01-19\",\n\t\"c_faxNo\": \"\",\n\t\"c_country_id\": \"15\",\n\t\"c_taxNo\": \"\",\n\t\"c_phoneNo\": \"1234\",\n\t\"c_documentNo\": \"\",\n\t\"c_webUrl\": \"\",\n\t\"c_noOfStays\": \"\"\n}\n, \"appUser\" ],\n  \"className\": \"CompanyCustomerDetail\",\n  \"functionName\": \"mergeCustomers\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request merges data of 2 DB records in the customer (guests) table together into 1 DB record and sets the other record inactive<br><br>\n\nparams:  \nobject ->  \n{  <br>\n&nbsp;&nbsp;int main_cid: This is the c_id of the customer-record that all data will be merged into  \n&nbsp;&nbsp;int other_cid: The c_id of the customer-record that will get set inactive  \n&nbsp;&nbsp;*Rest of the fields contain userinput because the user can choose to modify data of the mergeresult a bit. Grouping fields together by type:*  \n&nbsp;&nbsp;int: c_salutation_id, c_nationality_id, c_country_id, c_documentType_id  \n&nbsp;&nbsp;string: c_title, c_firstName, c_lastName, c_addressLine1, c_addressLine1Plus, c_postCode, c_city, c_cityPlus, c_region, c_birthDay (format YYYY-MM-DD), c_birthCity, c_documentNo, c_noOfStays, c_postBox, c_company, c_taxNo, c_companyRegNo, c_comment, c_occupation, c_occupationBranch, c_phoneNo, c_faxNo, c_eMailAddress, c_webUrl, c_carRegNo  \n&nbsp;&nbsp;array of int: characteristicsARR  \n}<br><br>\n\nReturn of this is irrelevant, it's always an empty array"
			},
			"response": []
		},
		{
			"name": "guestDetails.getBookingGuests",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ null, \"appUser\", null, 1097 ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"getBookingGuests\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns details about guest (customer) records  \nIt's used in 2 contexts:  \n1) For displaying details about 1 certain guest-record.  \n2) For displaying details about multiple guest-records that are linked together for registrationform-service<br><br>\n\nparams:  \nint -> b_id. It's possible to put null into this parameter, but then the 4th parameter must get provided. If provided, the request will return all guests that are linked to the booking of this b_id through registrationform-service. This parameter belongs to context #2  \n\"appUser\" -> fixed string  \nstring -> optional. Either 'on' or 'off'. Indicates, if only guest-records shall be returned that are not linked to a registrationform yet (context #2)  \nc_id -> optional. If provided then only details for exactly 1 customer record identified by this c_id get returned (context #1)  \nrfgs_id -> optional. The id, of the registrationform-service that the returned guests will belong to. Needed for auto-identifying tax-types of guests<br><br>\n\nReturn is an array of objects that contain guest-data. Fieldnames should be selfexplaining. If the request is used for context #1 then the array will only contain 1 element."
			},
			"response": []
		},
		{
			"name": "guestDetails.saveBookingGuest",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"c_eMailAddress\": \"ap@easybooking.eu\",\n\t\"c_occupationBranch\": \"\",\n\t\"c_company\": \"\",\n\t\"c_faxNo\": \"\",\n\t\"c_title\": \"\",\n\t\"c_occupation\": \"\",\n\t\"c_salutation_id\": \"2\",\n\t\"c_documentType_id\": 0,\n\t\"c_birthCity\": \"Eisenstadt\",\n\t\"c_noOfStays\": \"0\",\n\t\"c_companyRegNo\": \"\",\n\t\"c_addressLine1Plus\": \"\",\n\t\"c_cityPlus\": \"\",\n\t\"c_webUrl\": \"\",\n\t\"c_comment\": \"\",\n\t\"c_carRegNo\": \"\",\n\t\"c_nationality_id\": \"247\",\n\t\"c_postBox\": \"\",\n\t\"c_lastName\": \"Entscheff-Pinter\",\n\t\"c_firstName\": \"Andreas\",\n\t\"c_region\": \"\",\n\t\"characteristicsARR\": [\"11\", \"13\", \"17\"],\n\t\"c_addressLine1\": \"Asdf\",\n\t\"c_postCode\": \"7000\",\n\t\"c_taxNo\": \"\",\n\t\"c_city\": \"Eisenstadt\",\n\t\"c_birthDay\": \"1979-01-19\",\n\t\"c_country_id\": \"15\",\n\t\"c_phoneNo\": \"1234\",\n\t\"c_documentNo\": \"\",\n\t\"c_phoneNo2\": \"\"\n}\n, \"appUser\", 747 ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"saveBookingGuest\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves guest-details to the database<br><br>\n\nparams:  \nobject -> object that contains all fields that need to get saved  \n\"appUser\" -> fixed string  \nOPTIONAL int -> c_id of the guest (customer) record to save.  \n  \nThe optional c_id parameter is needed if this request is called from Company-Customer-Admin screen. In this case no modifications to any registrationform-data must happen and the API assumes that there are no fields like cbrf_* in the input object (these are purely for registrationform things) . So it assumes there's also no cbrf_customer_id in the input object and expects the c_id as separate optional parameter to identify the guest (\"customer\").  \n  \nReturn of this request is irrelevant, it's always returning an empty array"
			},
			"response": []
		},
		{
			"name": "feratelGuestImport",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "*/*",
						"disabled": true
					},
					{
						"key": "Accept-Encoding",
						"value": "gzip, deflate",
						"disabled": true
					},
					{
						"key": "Cache-Control",
						"value": "no-cache",
						"disabled": true
					},
					{
						"key": "Connection",
						"value": "keep-alive",
						"disabled": true
					},
					{
						"key": "Content-Length",
						"value": "834",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data; boundary=--------------------------471309130221788153218149",
						"disabled": true
					},
					{
						"key": "Cookie",
						"value": "juliaAngularToken=Jp08nIWrzCExnMEUiNH9X5gf122ytbilwwNH4XqREDkAODdLDiay2Rw3vmqmptjQVzFY%2BnuFRBEGam5hijNxUKPPThmmT78Ywo01sNKUqmYVnous%2FZXdAsLHnZjxBHhxhXZDYxeL09wdhi%2FqTZLKlF0bnA3cRp5AEepCRD%2Bqq5ugAg%2Fa2Z1SI%3DS46FX12CUq"
					},
					{
						"key": "Host",
						"value": "172.30.7.170",
						"disabled": true
					},
					{
						"key": "Postman-Token",
						"value": "2a3cc4ef-1968-4f7e-83b0-2273f45eea6e,02b12078-03a6-4ca7-bf7e-563e0bf18036",
						"disabled": true
					},
					{
						"key": "User-Agent",
						"value": "PostmanRuntime/7.19.0",
						"disabled": true
					},
					{
						"key": "cache-control",
						"value": "no-cache",
						"disabled": true
					},
					{
						"key": "content-type",
						"value": "multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW",
						"disabled": true
					},
					{
						"key": "x-csrf-token",
						"value": "tvj1a3kadhl43xq212138a50y5878v",
						"disabled": true
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "Filedata",
							"type": "file",
							"src": "/Y:/testimport.csv"
						},
						{
							"key": "uploadType",
							"value": "backendUpload",
							"type": "text"
						},
						{
							"key": "Item",
							"value": "dummy",
							"type": "text"
						},
						{
							"key": "backEndToken",
							"value": "2019-11-18 14:59:53",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/report/guestImportStep1?customerID=3&sugarId=81d1b826-3cf1-9c8e-6413-52a580de064d",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"report",
						"guestImportStep1"
					],
					"query": [
						{
							"key": "customerID",
							"value": "3"
						},
						{
							"key": "sugarId",
							"value": "81d1b826-3cf1-9c8e-6413-52a580de064d"
						}
					]
				},
				"description": "This request uploads a csv file that needs to be in a certain format and imports it to the guest-table of the customers database.<br><br>\n\nGET parameters:  \ncustomerID -> customer-id of the user itself = c_id GET parameter of JuliaAngular main app  \nsugarId -> sugar_id of the user = companyDetails.c_sugarId<br><br>\n\nPOST parameters:  \nFiledata -> the csv file as upload-stream  \nuploadType -> string \"backendUpload\" fixed  \nItem -> string \"dummy\" fixed  \nbackEndToken -> can be actually any string. Used to identify the import. Flash client currently uses the date and time, for example \"2019-11-18 14:59:53\". This \"token\" is needed later for API request checkGuestImport to check, if the guestimport with this token worked correctly<br><br>"
			},
			"response": []
		},
		{
			"name": "checkGuestImport",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"2019-11-18 14:59:53\", \"appUser\" ],\n  \"className\": \"CompanyCustomerAdmin\",\n  \"functionName\": \"checkGuestImport\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This API reqeuest checks, if a guest import identified by a certain token actually worked.<br><br>\n\nparams:  \nstring -> \"token\" id of the import  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array with only 1 string-element.  \n\"SUCCESS\" = import worked correctly.  \n\"ERROR\" = there was a problem at this import"
			},
			"response": []
		},
		{
			"name": "customerAdmin.getCompanyCustomerBooking",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1416, false, \"appUser\" ],\n  \"className\": \"CompanyCustomerBooking\",\n  \"functionName\": \"getCompanyCustomerBooking\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns an overview of bookings that are linked to a certain guest<br><br>\n\nparams:  \nint -> c_id of the guest  \nbool -> \"Show deleted entries\" indicator: indicates, if deleted bookings shall be shown (true) or not (false)  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array of objects that have these fields:  \nint b_id -> unique id of a booking  \nstring b_bookingNo -> booking-code  \nstring b_creationDate -> date and time of the creation of this booking in format YYYY-MM-DD HH:ii:SS (i stands for minute)  \nstring eb_fromDate -> The minimum arrival date of this booking in format YYYY-MM-DD (a booking can constist of multiple rooms that can get arrived at different dates)"
			},
			"response": []
		},
		{
			"name": "customerAdmin.getBookingDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 699, \"appUser\" ],\n  \"className\": \"CompanyCustomerBooking\",\n  \"functionName\": \"getBookingDetail\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns details of a booking<br><br>\n\nparams:  \nint -> b_id, unique id of the booking  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an object containing lots of fields. Needed fields will be explained in the relevant trello cards."
			},
			"response": []
		},
		{
			"name": "customerAdmin.getGtcDetails",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 852, \"appUser\" ],\n  \"className\": \"CompanyCustomerBooking\",\n  \"functionName\": \"getGtcDetails\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request shows consents of a guest related to a certain booking, for example if Terms-and-Conditions were agreed on<br><br>\n\nparams:  \nint -> b_id, unique id of the booking  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an object having 2 fields:  \n1) \"legalDocs\" -> array of objects:  \n{  <br>\n&nbsp;&nbsp;string code: Code of the document that was agreed on  \n&nbsp;&nbsp;int id: unique id of the document  \n&nbsp;&nbsp;string version: version-code of the document  \n&nbsp;&nbsp;string name: Name of the document  \n&nbsp;&nbsp;string docUrl: URL to the document  \n&nbsp;&nbsp;bool agreed: true if the document was agreed on or false if not  \n}<br>\n2) \"agreedAt\" -> string containing date and time in format YYYY-MM-DD HH:ii:SS (ii = minutes)"
			},
			"response": []
		},
		{
			"name": "customerAdmin.getPCIInfoFromCM",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"https://service.pcibooking.net/api/payments/paycard/5d7637636bdb47ad9a64f72433e8147f\", \"appUser\" ],\n  \"className\": \"CompanyCustomerBooking\",\n  \"functionName\": \"getPCIInfoFromCM\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns PCI information about a channelmanager booking (input/output is the same as for customerAdmin.getPCIInfo)<br><br>\n\nparams:  \nstring -> credit-card token  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an object with these 2 fields:  \nint c_useCCProxy: Either \"1\" or \"0\". If \"1\" then the user has the PCI-module active, else not  \nint cc_numDataRequested: The count of views the user already did at this creditCard-detail"
			},
			"response": []
		},
		{
			"name": "customerAdmin.getPCIInfo",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"https://service.pcibooking.net/api/payments/paycard/5d7637636bdb47ad9a64f72433e8147f\", \"appUser\" ],\n  \"className\": \"CompanyCustomerBooking\",\n  \"functionName\": \"getPCIInfo\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns PCI information about a clientWeb booking (input/output is the same as for customerAdmin.getPCIInfoFromCM)<br><br>\n\nparams:  \nstring -> credit-card token  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an object with these 2 fields:  \nint c_useCCProxy: Either \"1\" or \"0\". If \"1\" then the user has the PCI-module active, else not  \nint cc_numDataRequested: The count of views the user already did at this creditCard-detail"
			},
			"response": []
		},
		{
			"name": "customerAdmin.increasePCICounterFromCM",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"https://service.pcibooking.net/api/payments/paycard/5d7637636bdb47ad9a64f72433e8147f\" ],\n  \"className\": \"CompanyCustomerBooking\",\n  \"functionName\": \"increasePCICounterFromCM\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request increases the view-counter at a PCI detail identified by the given token. PCI origin = channelmanager<br><br>\n\nparams:  \nstring -> pci token<br><br>\n\nReturn is irrelevant, there's always an empty array returned."
			},
			"response": []
		},
		{
			"name": "customerAdmin.increasePCICounter",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"https://service.pcibooking.net/api/payments/paycard/6626768f9f4049daa682069fc39966d6\", \"appUser\" ],\n  \"className\": \"CompanyCustomerBooking\",\n  \"functionName\": \"increasePCICounter\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request increases the view-counter at a PCI detail identified by the given token. PCI origin = ClientWeb<br><br>\n\nparams:  \nstring -> pci token<br><br>\n\nReturn is irrelevant, there's always an empty array returned."
			},
			"response": []
		},
		{
			"name": "guestDetails.guestCopyTo",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"fields\": \"c_firstName,c_lastName,c_addressLine1\",\n\t\"source_cbrf_id\": 95,\n\t\"copyTo\": \"96,97\"\n},\n\"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"guestCopyTo\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request copies data of a given guest to other guest-entries in the database (existing data gets overwritten)<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;array fields: csv string of fieldnames that shall be copied  \n&nbsp;&nbsp;int source_cbrf_id: id of the entry in table customerBookingRegistrationForm that contains info about the source-guest to copy data from  \n&nbsp;&nbsp;array copyTo: csv string of cbrf_ids, these identify the target guest db-entries  \n},  \n\"appUser\" -> fixed string<br><br>\n\nReturn is irrelevant, it's always an empty array."
			},
			"response": []
		},
		{
			"name": "customerAdmin.getBookingEntityDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 687, \"appUser\" ],\n  \"className\": \"CompanyCustomerBooking\",\n  \"functionName\": \"getBookingEntityDetail\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of details to booked rooms that belong to a certain booking<br><br>\n\nparams:  \nint -> b_id of the booking  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array of objects that contain room-details (for example number of persons in that room, room-price, room-number and so on)"
			},
			"response": []
		},
		{
			"name": "chargingScheme.getChargingSchemeList",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"ChargingScheme\",\n  \"functionName\": \"getChargingSchemeList\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of the currently configured chargingScheme charges<br><br>\n\nparams:  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array of objects that contain details about chargingScheme charges configuration."
			},
			"response": []
		},
		{
			"name": "chargingScheme.getActiveChargingSchemeList",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"ChargingScheme\",\n  \"functionName\": \"getActiveChargingSchemeList\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of the 3 currently possible types of chargingScheme charges and their names in the language that's provided in the URL-route-parameter<br><br>\n\nparams:  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array of objects. Most important fields in these objects:  \nint cs_id -> unique id of the chargingScheme charge type  \nstring cs_name -> unique identifying string of the type (\"ExtraChargeOverDayOfWeekPeriod\", \"ExtraChargeOverPeriod\", or \"FixedAmountOnNightsStay\")  \nstring csl_name -> translated name of the type"
			},
			"response": []
		},
		{
			"name": "chargingScheme.getActiveChargingSchemeDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 33, \"appUser\" ],\n  \"className\": \"ChargingScheme\",\n  \"functionName\": \"getActiveChargingSchemeDetail\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns details about a certain chargingScheme charge identified by its acs_id<br><br>\n\nparams:  \nint -> the acs_id of the chargingScheme charge  \n\"appUser\" -> fixed string<br><br>\n\nreturn is an object with details about the chargingScheme charge."
			},
			"response": []
		},
		{
			"name": "chargingScheme.getLinkedCategories",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 33, \"appUser\" ],\n  \"className\": \"ChargingScheme\",\n  \"functionName\": \"getLinkedCategories\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of all possible room categories and information if a certain chargingScheme charge is active for a category or not<br><br>\n\nparams:  \nint -> acs_id of the chargingScheme charge  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array of objects:  \n{<br>\n&nbsp;&nbsp;int eg_id: unique id of the room category  \n&nbsp;&nbsp;string eg_name: name of the category  \n&nbsp;&nbsp;string checked: either 'on' or 'off', indicates, if the chargingScheme charge is active for this room category  \n}<br><br>\n\nNote: An object with eg_id = 0 and eg_name = \"All\" is also included in the returned array.  \nThis one is actually not a room category. In the UI this is meant as a tool checkbox to select/deselect all categories at once."
			},
			"response": []
		},
		{
			"name": "insurance.getValidContractMonthList",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"InsuranceProductWorkbench\",\n  \"functionName\": \"getValidContractMonthList\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns an array of months where insurance contract have been done. Format = YYYY-MM.<br>\nNo input parameters needed, just fixed string \"appUser\"."
			},
			"response": []
		},
		{
			"name": "insurance.getInsuranceProductContractSummary",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"2019-03\", \"appUser\" ],\n  \"className\": \"InsuranceProductWorkbench\",\n  \"functionName\": \"getInsuranceProductContractSummary\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "insurance.getInsuranceProductInteraction",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"fromDate\":\"2019-03-01\",\"untilDate\":\"2019-07-15\"}, \"appUser\" ],\n  \"className\": \"InsuranceProductWorkbench\",\n  \"functionName\": \"getInsuranceProductInteraction\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of insurance offers that were created in a specified period of time<br><br>\n\nparams:<br>\nobject -> { fromDate, untilDate: dates in the format YYYY-MM-DD. specify the period to query<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "insurance.getInsuranceInterfaceReqResp",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"offerRequest\", 2693, \"appUser\" ],\n  \"className\": \"InsuranceProductWorkbench\",\n  \"functionName\": \"getInsuranceInterfaceReqResp\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This returns a list of key/value pairs that describe a sending process to or from the insurance provider interface<br><br>\n\nparams:<br>\nstring -> type of sending process. Can be either \"offerRequest\", \"offerResponse\", \"contractRequest\" or \"contractResponse\"<br>\nint -> id of the sending process<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "channelmanager.getBookingSources",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"bookingSource\",\n  \"functionName\": \"getBookingSources\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "The main purpose of this function is to return the URL with all needed GET parameters to the channelmanager application for a given customer.<br><br>\n\nparams:<br>\n\"appUser\" -> fixed string<br>\nbool -> optional parameter. Indicates if this is called for statistics functionality - if it's set to true, the return object will look different a bit"
			},
			"response": []
		},
		{
			"name": "billingOverview.editInvoiceItems.adminVersionDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n  \"billId\": \"1069\",\n  \"bookingId\": \"859\",\n  \"bvd_additionalInfo\": null,\n  \"bvd_billVersionPaymentType_id\": \"0\",\n  \"bvd_billVersion_id\": \"1069\",\n  \"bvd_bookingProduct_id\": \"0\",\n  \"bvd_cashRegisterGrouping\": null,\n  \"bvd_consumptionDate\": \"0000-00-00 00:00:00\",\n  \"bvd_displayText\": \"Kurtaxe (2019)\",\n  \"bvd_freeText\": \"alternative text vitaliy\",\n  \"bvd_id\": \"20035\",\n  \"bvd_insuranceProduct_id\": null,\n  \"bvd_isLocalPayment\": \"off\",\n  \"bvd_isRoomBookingDetail\": \"off\",\n  \"bvd_orig_billVersionDetail_id\": null,\n  \"bvd_paymentDate\": \"0000-00-00 00:00:00\",\n  \"bvd_paymentDescription\": \"\",\n  \"bvd_prepaymentAmountPaid\": \"0.00000\",\n  \"bvd_productAgeGroupPrice_id\": \"0\",\n  \"bvd_product_id\": null,\n  \"bvd_source\": null,\n  \"bvd_tax_id\": \"14\",\n  \"bvd_totalGross\": \"12\",\n  \"bvd_totalNet\": \"0\",\n  \"bvd_totalTax\": \"12\",\n  \"bvd_type\": \"VisitorsTax\",\n  \"bvd_unitCount\": \"4\",\n  \"bvd_unitPriceGross\": \"3\",\n  \"insuranceProductName\": null,\n  \"t_name\": \"0prozent\"\n},\n  \"appUser\" ],\n  \"className\": \"BillVersionDetail\",\n  \"functionName\": \"adminVersionDetail\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request updates details at an invoice-item of an invoice.<br><br>\n\nparams:<br>\nobject -> an object with the same structure as it's returned by API request billingOverview.getBillVersionDetail in the billVersionDetail array<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "billingOverview.editInvoiceItems.getTax",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"Tax\",\n  \"functionName\": \"getTax\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the list of possible tax rates. No extra parameters needed, just the fixed \"appUser\" string."
			},
			"response": []
		},
		{
			"name": "billingOverview.editInvoiceItems.deleteBillVersionDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"bvd_additionalInfo\":null,\"bvd_cashRegisterGrouping\":null,\"bookingId\":\"827\",\"invoiceAlreadyCreated\":\"off\",\"bvd_id\":\"19910\",\"bvd_billVersion_id\":\"1008\",\"billId\":\"1008\",\"bvd_isRoomBookingDetail\":\"off\",\"bp_insuranceOffer_id\":0,\"bvd_product_id\":\"78\",\"bvd_tax_id\":\"2\",\"bvd_unitPriceGross\":\"0.10000\",\"bvd_bookingProduct_id\":\"1928\",\"bvd_unitCount\":\"1\",\"bvd_totalNet\":\"0.09091\",\"bvd_type\":null,\"bvd_totalTax\":\"0.00909\",\"bvd_prepaymentAmountPaid\":\"0.00000\",\"bvd_totalGross\":\"0.10000\",\"bvd_orig_billVersionDetail_id\":null,\"bvd_paymentDate\":\"0000-00-00 00:00:00\",\"bvd_displayText\":\"test\",\"bvd_billVersionPaymentType_id\":3,\"bvd_productAgeGroupPrice_id\":0,\"bvd_insuranceProduct_id\":null,\"bvd_consumptionDate\":\"2019-03-22 00:00:00\",\"bvd_paymentDescription\":\"\",\"bvd_freeText\":null},\n  \"appUser\" ],\n  \"className\": \"Billing\",\n  \"functionName\": \"deleteBillVersionDetail\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes an invoice item from an invoice. Parameters work exactly the same as for billingOverview.editInvoiceItems.adminVersionDetail<br><br>\n\nparams:<br>\nobject -> an object with the same structure as it's returned by API request billingOverview.getBillVersionDetail in the billVersionDetail array<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "billingOverview.editInvoiceItems.getPaymentType",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 0, \"appUser\" ],\n  \"className\": \"BillVersionPayment\",\n  \"functionName\": \"getPaymentType\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of possible payment-types. <br><br>\n\nparams:<br>\nint -> The request usually only shows active payment types. Providing an id at this parameter shows the payment-type with this id, even if it's deactivated<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "billingOverview.editInvoiceItems.adminBillVersionPayment",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"_explicitType\": \"com.eBook.billing.dto.BillVersionPaymentDTO\",\n\t\"bvp_id\": 0,\n\t\"bvp_billVersion_id\": 1008,\n\t\"bvp_billVersionPaymentType_id\": 3,\n\t\"bvp_paymentDate\": \"2019-07-12\",\n\t\"bvp_desc\": \"test\",\n\t\"bvp_amount\": \"1230.00\",\n\t\"bvp_amountDisplay\": null,\n\t\"bvpt_id\": 0,\n\t\"bvpt_name\": null,\n\t\"bvpt_isCashPayment\": null,\n\t\"rc_id\": null,\n\t\"bvptl_billVersionPaymentType_id\": 0,\n\t\"bvptl_locale_id\": 0,\n\t\"bvptl_name\": null,\n\t\"isBookingPrepayment\": \"off\",\n\t\"bvp_isLocalPayment\": \"off\",\n\t\"bvpt_active\": \"on\",\n\t\"bvpt_isCreditCard\": \"off\",\n\t\"bvpt_isCustom\": \"off\",\n\t\"bvpt_isCashPaymentAdvanced\": \"off\",\n\t\"bvp_orig_billVersion_id\": null\n} , \"appUser\" ],\n  \"className\": \"BillVersionPayment\",\n  \"functionName\": \"adminBillVersionPayment\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request update or inserts a payment into the DB<br><br>\n\nparams:<br>\nobject -> an object describing the payment<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "billingOverview.editInvoiceItems.deleteBillVersionPayment",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"_explicitType\":\"com.eBook.billing.dto.BillVersionPaymentDTO\",\"bvp_id\":178,\"bvp_billVersion_id\":1008,\"bvp_billVersionPaymentType_id\":3,\"bvp_paymentDate\":\"2019-07-12 12:55:13\",\"bvp_desc\":\"asdf\",\"bvp_amount\":\"123.00000\",\"bvp_amountDisplay\":null,\"bvpt_id\":3,\"bvpt_name\":\"BankTransfer\",\"bvpt_isCashPayment\":\"off\",\"rc_id\":null,\"bvptl_billVersionPaymentType_id\":3,\"bvptl_locale_id\":2,\"bvptl_name\":\"Bank\\u00fcberweisung\",\"isBookingPrepayment\":\"off\",\"bvp_isLocalPayment\":\"off\",\"bvpt_active\":\"on\",\"bvpt_isCreditCard\":\"off\",\"bvpt_isCustom\":\"off\",\"bvpt_isCashPaymentAdvanced\":\"off\",\"bvp_orig_billVersion_id\":null} , \"appUser\" ],\n  \"className\": \"BillVersionPayment\",\n  \"functionName\": \"deleteBillVersionPayment\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request removes a payment from an invoice<br><br>\n\nparams:<br>\nobject -> a billVersionPayment object as it's returned in API request billingOverview.getBillVersionDetail within the billVersionPayment array<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "billingOverview.editInvoiceItems.cancelCashPayment",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"_explicitType\":\"com.eBook.billing.dto.BillVersionPaymentDTO\",\"bvp_id\":179,\"bvp_billVersion_id\":1008,\"bvp_billVersionPaymentType_id\":1,\"bvp_paymentDate\":\"2019-07-15 11:26:33\",\"bvp_desc\":\"test\",\"bvp_amount\":\"123.00000\",\"bvp_amountDisplay\":null,\"bvpt_id\":1,\"bvpt_name\":\"Cash\",\"bvpt_isCashPayment\":\"on\",\"rc_id\":\"178\",\"bvptl_billVersionPaymentType_id\":1,\"bvptl_locale_id\":2,\"bvptl_name\":\"Bar\",\"isBookingPrepayment\":\"off\",\"bvp_isLocalPayment\":\"on\",\"bvpt_active\":\"on\",\"bvpt_isCreditCard\":\"off\",\"bvpt_isCustom\":\"off\",\"bvpt_isCashPaymentAdvanced\":\"off\",\"bvp_orig_billVersion_id\":null} , \n  \"appUser\" ],\n  \"className\": \"BillVersionPayment\",\n  \"functionName\": \"cancelCashPayment\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request cancels a cash-payment from an invoice<br><br>\n\nparams:<br>\nobject -> a billVersionPayment object as it's returned in API request billingOverview.getBillVersionDetail within the billVersionPayment array<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "billingOverview.editInvoiceItems.setEmailForPayment",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1, \"test2@test2.test2\", \"appUser\" ],\n  \"className\": \"BillVersionPayment\",\n  \"functionName\": \"setEmailForPayment\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request updates the email-address of a customer in the database<br><br>\n\nparams:<br>\nint -> the c_id of a customer-record in the DB<br>\nstring -> the new email-address<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "BillVersionPayment.emailPaymentConfirmation",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"off\", 177, \"appUser\" ],\n  \"className\": \"BillVersionPayment\",\n  \"functionName\": \"emailPaymentConfirmation\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "Email-sends a payment confirmation to a certain companyCustomer that's linked to a payment in the database<br><br>\n\nparams:<br>\nstring -> either \"on\" or \"off\", indicates if the payment that it's about is the pre-payment to a booking<br>\nint -> the bvp_id of the payment in the database<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "BillVersionPayment.printPaymentConfirmation",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"params\":[\"off\",179,\"appUser\"],\r\n    \"className\":\"BillVersionPayment\",\r\n    functionName\":\"printPaymentConfirmation\"\r\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request generates a PDF containing a payment confirmation at the webserver OR <br>\ngives information about receipt-printing that's needed for the URL for iframing content<br><br>\n\nparams:<br>\nstring -> either \"on\", \"off\" or \"RECEIPT\". \"on\" or \"off\" indicates if the payment that it's about is the pre-payment to a booking (\"on\") or an additional payment (\"off\").  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"RECEIPT\" has a special meaning: In this case the provided id is not the id of a payment but a receipt (the  rc_id )  \nint -> the bvd_id or bvp_id of the payment in the database<br>\n\"appUser\" -> fixed string<br><br>\n\nThe return is an object that either contains these 2 fields:<br><br>\n\nisCashPayment: either \"on\" or \"off\", indicates, if the payment to print is a cash-payment<br>\npdf_filename: path to the generated PDF at the webserver<br><br>\n\nOR<br><br>\n\nthese 6 or 7 fields:<br><br>\nisCashPayment: same as above, either \"on\" or \"off\", indicates, if the payment to print is a cash-payment<br>\njustSending: either \"on\" or \"off\", indicates, if the receipt is just being sent to cash-register-provider<br>\ncashPaymentDefaultFormat: string that shows which format the user has set as default-receipt-printing format<br>\nvalidPayment: either \"on\" or \"off\", indicates, if everything is OK with the payment and receipt<br>\nrc_id: the id of the receipt in the database<br>\nsendingDurationLeft: estimated time of sending duration that's still left<br>\n[pdf_filename: will be provided if cashPaymentDefaultFormat != 'manual' ]"
			},
			"response": []
		},
		{
			"name": "billingOverview.editInvoiceItems.adminBillBillVersion",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"params\": [\r\n        1068,\r\n        {\r\n            \"c_accountNo\": \"xxx\",\r\n            \"c_salutation_id\": \"51\",\r\n            \"c_title\": \"Test\",\r\n            \"c_firstName\": \"xxx\",\r\n            \"c_lastName\": \"xxxst\",\r\n            \"c_company\": \"\",\r\n            \"c_eMailAddress\": \"test@test.test\",\r\n            \"c_addressLine1\": \"xxx\",\r\n            \"c_postCode\": \"6465\",\r\n            \"c_city\": \"Nassereith\",\r\n            \"c_locale_id\": \"0\",\r\n            \"c_country_id\": \"15\",\r\n            \"c_taxNo\": \"\",\r\n            \"c_id\": 1409\r\n        },\r\n        \"000037-2019\",\r\n        null,\r\n        \"Vielen Dank für Ihren Besuch!&&&&\",\r\n        \"2019-07-24\",\r\n        \"2019-07-15\",\r\n        \"2019-07-16\",\r\n        \"\",\r\n        \"off\",\r\n        \"appUser\"\r\n    ],\r\n    \"className\": \"Billing\",\r\n    \"functionName\": \"adminBillBillVersion\"\r\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request updates details of an existing bill<br><br>\n\nparams:<br>\nint -> bill_id<br>\nobject -> customer data<br>\nstring -> invoice number<br>\nstring -> registration No.<br>\nstring -> invoice text<br>\nstring -> invoice date in format YYYY-MM-DD<br>\nstring -> invoice from date in format YYYY-MM-DD<br>\nstring -> invoice until date in format YYYY-MM-DD<br>\nempty string -> fixed string (this was formerly used for the invoice due date, it's obsolete)<br>\nstring -> either 'on' or 'off', indicator if forced mode was used or not<br>\n\"appUser\" -> fixed string<br><br>\n\nreturn object:<br>\nnew_c_id: Will only be provided if the input parameter 2, the object, had the field c_id == \"0\"\nlocaleChange: string that's eiter \"on\" or \"off\", indicates, if a localeChange of the customer record occured<br>\nbv_billText001: obsolete - just returns the \"invoice text\" as it was in input-parameter #5<br>"
			},
			"response": []
		},
		{
			"name": "billingOverview.editInvoiceItems.generateInvoice",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1008, 827, null, \"000037-2019\", \"\", \"2019-07-16\", \"appUser\" ],\n  \"className\": \"Billing\",\n  \"functionName\": \"generateInvoice\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request generates an invoice from a normal preview invoice. <br><br>\n\nparams:<br>\nint -> bill_id<br>\nint -> booking_id<br>\nnull -> used to be an object describing the customer-object but is not needed anymore, use null fixed<br>\nstring -> invoice number<br>\nstring -> registration No.<br>\nstring -> invoice date in format YYYY-MM-DD<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "billingOverview.editInvoiceItems.generateBillVersionPDF",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1008, 827, \"appUser\" ],\n  \"className\": \"Billing\",\n  \"functionName\": \"generateBillVersionPDF\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request generates the PDF to an existing invoice<br><br>\n\nparams:<br>\nint -> bill_id<br>\nint -> booking_id<br>\n\"appUser\" -> fixed string<br><br>\n\nreturn value is an array with only 1 element. It's a string that contains the relative path at the webserver including the filename to the generated PDF.<br>\n(For example \"/wo/Services/invoices/srv0010002/1008_827.pdf\")"
			},
			"response": []
		},
		{
			"name": "seasonPeriods.getSeasonPeriod",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"AppClass\",\n  \"functionName\": \"getSeasonPeriod\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This returns a list of currently configured season-periods and properties of these seasons.<br><br>\n\nparams:<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "seasonPeriods.getSeasonPeriodDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 150, \"appUser\" ],\n  \"className\": \"SeasonPeriod\",\n  \"functionName\": \"getSeasonPeriodDetail\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns details to a certain season-period<br><br>\n\nparams:<br>\nint -> sp_id of the season-period as it's returned for example by API-request seasonPeriods.getSeasonPeriod<br>\n\"appUser\" --> fixed string"
			},
			"response": []
		},
		{
			"name": "seasonPeriods.adminSeasonPeriod",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"action\": \"editForAll\",\n\t\"sp_id\": \"150\",\n\t\"sp_name\": \"Winter\",\n\t\"sp_fromDate\": \"2019-11-28\",\n\t\"sp_untilDate\": \"2020-3-31\",\n\t\"sp_minStay\": 1,\n\t\"sp_maxStay\": 28,\n\t\"sp_anMon\": \"on\",\n\t\"sp_anTue\": \"on\",\n\t\"sp_anWed\": \"on\",\n\t\"sp_anThu\": \"on\",\n\t\"sp_anFri\": \"on\",\n\t\"sp_anSat\": \"on\",\n\t\"sp_anSun\": \"on\",\n\t\"sp_abTue\": \"on\",\n\t\"sp_abWed\": \"on\",\n\t\"sp_abThu\": \"on\",\n\t\"sp_abFri\": \"on\",\n\t\"sp_abSat\": \"on\",\n\t\"sp_abSun\": \"on\",\n\t\"sp_abMon\": \"on\",\n\t\"sp_useNightsMultiple\": \"off\",\n\t\"sp_allowEnquiry\": \"on\",\n\t\"sp_allowReservation\": \"on\",\n\t\"sp_allowBooking\": \"off\",\n\t\"ssc_active\": \"off\",\n\t\"ssc_minUnit\": 3,\n\t\"ssc_chargeType\": \"PricePerPersonPerNight\",\n\t\"ssc_charge\": 10.00\t\n} , \"appUser\" ],\n  \"className\": \"SeasonPeriod\",\n  \"functionName\": \"adminSeasonPeriod\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request updates, inserts or deletes a season-period in the database.<br><br>\n\nparams:<br>\nobject -><br>\n{<br>\n&nbsp;&nbsp;&nbsp;action: \"editForAll\" for updating, \"insert\" for adding a new season-period, \"delete\" to delete a season-period<br>\n&nbsp;&nbsp;&nbsp;sp_id: sp_id of the season-period to update or delete. Not needed when doing insert.<br>\n&nbsp;&nbsp;&nbsp;copyFromSPID: optional parameter, just used at inserting new seasons. Indicator for the API to copy season details from the season with this sp_id<br>\n&nbsp;&nbsp;&nbsp;...Rest of the fields come from UI components<br>\n}<br>\n\"appUser\" -> fixed string<br><br>\n\nReturn: An array that only contains 1 string element.<br>\nAt update: The element will contain the sp_id of the updated season<br>\nAt insert: The element will contain the sp_id of the newly created season<br>\nAt delete: The element will be '0'"
			},
			"response": []
		},
		{
			"name": "seasonPeriods.getEntityList",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"AppClass\",\n  \"functionName\": \"getEntityList\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of ids (e_id) of all active entities in db-table entity<br><br>\n\nparams:<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "seasonPeriods.setBookingCalendar",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 185, \"2019-03-31\", \"2020-04-29\", \"appUser\" ],\n  \"className\": \"AppClass\",\n  \"functionName\": \"setBookingCalendar\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This updates the Booking-Calendar Cache for a given room and period<br><br>\n\nparams:<br>\nint -> e_id of the room<br>\nstring -> from-date in format YYYY-MM-DD<br>\nstring -> until-date in format YYYY-MM-DD<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "category.getEntityGroup",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"EntityGroup\",\n  \"functionName\": \"getEntityGroup\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "Returns a list of categories (called \"entityGroup\" in the database)<br><br>\n\nparams:<br>\n\"appUser\" -> fixed string<br>\n[e_id] -> optional. An id of a room (called \"entity\" in the database) can be provided. If it's provided, each category object in the returnlist will have an extra field \"preselectThis\" that will be true, if that category contains the room with this id or false if not."
			},
			"response": []
		},
		{
			"name": "category.insertEntityGroup",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ { \"eg_name\" : \"A new category\" }, \"appUser\" ],\n  \"className\": \"EntityGroup\",\n  \"functionName\": \"insertEntityGroup\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This function creates a new room category (called \"entityGroup\" in the database).<br><br>\n\nparams:<br>\nobject -> { eg_name: Administrative name of the category to add }<br>\n\"appUser\" -> fixed string<br><br>\n\nReturn:<br>\nThe function will return an array with only 1 int element. It is the id of the new category. If a category with the given name already existed, the id of the already existing category will be returned."
			},
			"response": []
		},
		{
			"name": "category.getLinkedEntities",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1, \"appUser\" ],\n  \"className\": \"EntityGroup\",\n  \"functionName\": \"getLinkedEntities\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request checks if there are rooms linked to a given room-category.<br><br>\n\nparams:<br>\nint -> id of a room category (= field eg_id of elements returned by category.getEntityGroup)<br>\n\"appUser\" -> fixed string<br><br>\n\nReturn:<br>\nThe function will return an array with only 1 string element that has the value \"NONE\" if there are no rooms linked.<br>\nElse it will return an array of objects { e_uniqueNo: string-value }. The field e_uniqueNo represents a room number (that can contain also letters)."
			},
			"response": []
		},
		{
			"name": "category.deleteEntityGroup",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 59, \"appUser\" ],\n  \"className\": \"EntityGroup\",\n  \"functionName\": \"deleteEntityGroup\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This function deletes a room category (called \"entityGroup\" in the database)<br><br>\n\nparams:<br>\nint -> id of a room category (= field eg_id of elements returned by category.getEntityGroup)<br>\n\"appUser\" -> fixed string<br><br>\n\nReturn:<br>\nThe return value is irrelevant. It's an array containing 1 int element."
			},
			"response": []
		},
		{
			"name": "category.adminEntityGroup",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"eg_name\": \"Familienzimmer\",\n\t\"ignoreSortOrder\" : false,\n    \"eg_sortOrder\": \"007\",\n\t\"egls\": [{\n\t\t\t\"egl_valueLongDescHTML\": \"<TEXTFORMAT LEADING=\\\"2\\\"><P ALIGN=\\\"LEFT\\\"><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">Familienzimmer bis 5 Personen<\\/FONT><\\/P><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">mit Doppelbett<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">Zusatzbetten<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">K\\u00fcche<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">Sat-TV<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">2 B\\u00e4der mit Dusche\\/WC<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">Terrasse<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT>\",\n\t\t\t\"egl_priceInfoTextHTML\": \"\",\n\t\t\t\"egl_value\": \"Familyroom\",\n\t\t\t\"l_id\": \"1\",\n\t\t\t\"egl_id\": \"11\",\n\t\t\t\"egl_valueLongDesc\": \"Familienzimmer bis 5 Personen\\rmit Doppelbett\\rZusatzbetten\\rK\\u00fcche\\rSat-TV\\r2 B\\u00e4der mit Dusche\\/WC\\rTerrasse\\r\",\n\t\t\t\"egl_priceInfoText\": \"\"\n\t\t}, {\n\t\t\t\"egl_valueLongDescHTML\": \"<TEXTFORMAT LEADING=\\\"2\\\"><P ALIGN=\\\"LEFT\\\"><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">Familienzimmer bis 5 Personen<\\/FONT><\\/P><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">mit Doppelbett<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">Zusatzbetten<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">K\\u00fcche<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">Sat-TV<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">2 B\\u00e4der mit Dusche\\/WC<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"0\\\">Sat-TV<\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"0\\\">2 B\\u00e4der mit Dusche\\/WC<\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"0\\\">Terrasse<\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">Zusatzbetten<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">K\\u00fcche<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">Sat-TV<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">2 B\\u00e4der mit Dusche\\/WC<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">Terrasse<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">Zusatzbetten<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">K\\u00fcche<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">Sat-TV<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">2 B\\u00e4der mit Dusche\\/WC<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">Terrasse<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT>\",\n\t\t\t\"egl_priceInfoTextHTML\": \"\",\n\t\t\t\"egl_value\": \"Familienzimmer\",\n\t\t\t\"l_id\": \"2\",\n\t\t\t\"egl_id\": \"12\",\n\t\t\t\"egl_valueLongDesc\": \"Familienzimmer bis 5 Personen\\rmit Doppelbett\\rZusatzbetten\\rK\\u00fcche\\rSat-TV\\r2 B\\u00e4der mit Dusche\\/WC\\rSat-TV\\r2 B\\u00e4der mit Dusche\\/WC\\rTerrasse\\rZusatzbetten\\rK\\u00fcche\\rSat-TV\\r2 B\\u00e4der mit Dusche\\/WC\\rTerrasse\\rZusatzbetten\\rK\\u00fcche\\rSat-TV\\r2 B\\u00e4der mit Dusche\\/WC\\rTerrasse\\r\",\n\t\t\t\"egl_priceInfoText\": \"\"\n\t\t}, {\n\t\t\t\"egl_valueLongDescHTML\": \"<TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">Familienzimmer bis 5 Personen<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">mit Doppelbett<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">Zusatzbetten<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">K\\u00fcche<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">Sat-TV<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">2 B\\u00e4der mit Dusche\\/WC<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">Sat-TV<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">2 B\\u00e4der mit Dusche\\/WC<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"1\\\">Terrasse<FONT KERNING=\\\"0\\\"><\\/FONT><\\/FONT><\\/LI><\\/TEXTFORMAT>\",\n\t\t\t\"egl_priceInfoTextHTML\": \"\",\n\t\t\t\"egl_value\": \"Familie kamer\",\n\t\t\t\"l_id\": \"3\",\n\t\t\t\"egl_id\": \"15\",\n\t\t\t\"egl_valueLongDesc\": \"Familienzimmer bis 5 Personen\\rmit Doppelbett\\rZusatzbetten\\rK\\u00fcche\\rSat-TV\\r2 B\\u00e4der mit Dusche\\/WC\\rSat-TV\\r2 B\\u00e4der mit Dusche\\/WC\\rTerrasse\\r\",\n\t\t\t\"egl_priceInfoText\": \"\"\n\t\t}, {\n\t\t\t\"egl_valueLongDescHTML\": \"<TEXTFORMAT LEADING=\\\"2\\\"><P ALIGN=\\\"LEFT\\\"><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"0\\\">Camera per famiglia per 5 persone al massimo<\\/FONT><\\/P><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"0\\\">- letto matrimoniale<\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"0\\\">- letto extra<\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"0\\\">- cucina<\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><LI><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"0\\\">- TV satellitare<\\/FONT><\\/LI><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><P ALIGN=\\\"LEFT\\\"><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"0\\\">- 2 bagni con doccia\\/WC<\\/FONT><\\/P><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><P ALIGN=\\\"LEFT\\\"><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"0\\\">- terrazza<\\/FONT><\\/P><\\/TEXTFORMAT>\",\n\t\t\t\"egl_priceInfoTextHTML\": \"\",\n\t\t\t\"egl_value\": \"Camera per famiglia\",\n\t\t\t\"l_id\": \"4\",\n\t\t\t\"egl_id\": \"18\",\n\t\t\t\"egl_valueLongDesc\": \"Camera per famiglia per 5 persone al massimo\\r- letto matrimoniale\\r- letto extra\\r- cucina\\r- TV satellitare\\r- 2 bagni con doccia\\/WC\\r- terrazza\\r\",\n\t\t\t\"egl_priceInfoText\": \"\"\n\t\t}, {\n\t\t\t\"egl_valueLongDescHTML\": \"<TEXTFORMAT LEADING=\\\"2\\\"><P ALIGN=\\\"LEFT\\\"><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"0\\\">Notre chambre double sup\\u00e9rieure avec vue sur la montagne offre une belle vue sur la montagne \\u00e0 l&apos;est en direction de Garmisch-Partenkirchen. <\\/FONT><\\/P><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><P ALIGN=\\\"LEFT\\\"><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"0\\\">Ils regardent notre jardin et les maisons voisines vers &quot;Kramer&quot;, &quot;Wank&quot; et &quot;Kreuzeck&quot;. Dans notre chambre double Superior Mountain View, <\\/FONT><\\/P><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><P ALIGN=\\\"LEFT\\\"><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"0\\\">vous trouverez une salle de bains moderne avec baignoire ou douche. Commencez vos vacances diff\\u00e9remment: d\\u00e9gustez une tasse de caf\\u00e9 fra\\u00eechement m<\\/FONT><\\/P><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><P ALIGN=\\\"LEFT\\\"><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"0\\\">oulu dans votre chambre. Nous sommes heureux de vous inviter! Votre chambre dispose d&apos;une machine \\u00e0 caf\\u00e9 Nespresso. Profitez de notre inclus <\\/FONT><\\/P><\\/TEXTFORMAT><TEXTFORMAT LEADING=\\\"2\\\"><P ALIGN=\\\"LEFT\\\"><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"0\\\">petit-d\\u00e9jeuner buffet alpin.<\\/FONT><\\/P><\\/TEXTFORMAT>\",\n\t\t\t\"egl_priceInfoTextHTML\": \"\",\n\t\t\t\"egl_value\": \"Chambre Double Sup\\u00e9rieure Montagnes\",\n\t\t\t\"l_id\": \"5\",\n\t\t\t\"egl_id\": \"21\",\n\t\t\t\"egl_valueLongDesc\": \"Notre chambre double sup\\u00e9rieure avec vue sur la montagne offre une belle vue sur la montagne \\u00e0 l'est en direction de Garmisch-Partenkirchen. \\rIls regardent notre jardin et les maisons voisines vers \\\"Kramer\\\", \\\"Wank\\\" et \\\"Kreuzeck\\\". Dans notre chambre double Superior Mountain View, \\rvous trouverez une salle de bains moderne avec baignoire ou douche. Commencez vos vacances diff\\u00e9remment: d\\u00e9gustez une tasse de caf\\u00e9 fra\\u00eechement m\\roulu dans votre chambre. Nous sommes heureux de vous inviter! Votre chambre dispose d'une machine \\u00e0 caf\\u00e9 Nespresso. Profitez de notre inclus \\rpetit-d\\u00e9jeuner buffet alpin.\\r\",\n\t\t\t\"egl_priceInfoText\": \"\"\n\t\t}\n\t],\n\t\"eg_id\": \"6\"\n}\n, \"appUser\" ],\n  \"className\": \"EntityGroup\",\n  \"functionName\": \"adminEntityGroup\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This function saves details about a room category to the database.<br><br>\n\nparams:<br>\nobject -> <br>\n{<br>\n&nbsp;&nbsp; eg_name: string, administrative System text of the category<br>\n&nbsp;&nbsp; eg_sortOrder: string, sorting key<br>\n&nbsp;&nbsp;*Optional* bool ignoreSortOrder: If this is true then the field eg_sortOrder will be ignored and not saved  \n&nbsp;&nbsp; egls: array of language specific data related to the category:<br>\n&nbsp;&nbsp;&nbsp;&nbsp;[ { <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;egl_valueLongDescHTML: string, HTML formatted Display Name of the category<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;egl_valueLongDesc: string, contains exactly the same as egl_valueLongDescHTML, only in plain text with no HTML tags<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;egl_priceInfoTextHTML: string, HTML formatted Price Info Text of the category<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;egl_priceInfoText: string, contains exactly the same as egl_priceInfoTextHTML, only in plain text with no HTML tags<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;egl_value: string, the language specific name of the category <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l_id: int, id of the language (as it comes from languagesDataProvider of getCompanyDetails) <br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;egl_id: int, id of the language specific category entry in the database (as it comes from category.getEntityGroup) <br>\n&nbsp;&nbsp;&nbsp;&nbsp;} ] <br>\n}<br>\n\"appUser\" -> fixed string<br><br>\n\nThe return value of this API request is irrelevant"
			},
			"response": []
		},
		{
			"name": "category.getAgeGroups",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"AppClass\",\n  \"functionName\": \"getAgeGroups\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request returns a list of agegroups and their percentage discount<br><br>\n\nparams:<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "category.getPricingScheme",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"EntitySeasonPeriod\",\n  \"functionName\": \"getPricingScheme\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "Returns a list of possible pricing schemes for this company. Only input parameter is the fixed string \"appUser\"."
			},
			"response": []
		},
		{
			"name": "category.getPricing",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 0, 229, 146, \"appUser\" ],\n  \"className\": \"EntitySeasonPeriod\",\n  \"functionName\": \"getPricing\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request returns the pricing configuration for a given category or room and seasonPeriod.<br><br>\n\nparams:<br>\nint -> id of the category (eg_id). If the config for a room is wanted, use 0 (zero) for this parameter.<br>\nint -> id of the entity (e_id). If the config for a category is wanted, use 0 (zero) for this parameter.<br>\nint -> sp_id of the seasonperiod to get the config for (comes from seasonPeriods.getSeasonPeriod)<br>"
			},
			"response": []
		},
		{
			"name": "category.getActiveServiceType",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"AppClass\",\n  \"functionName\": \"getActiveServiceType\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the list of catering types (called serviceType in the database) that are active for the given hotel.<br><br>\r\n\r\nparams:  \r\n\"appUser\" -> fixed string  \r\noptional bool -> if set to true, ALL catering types will get returned, also the inactive ones. The field `st_active` determines if a serviceType is active (\"on\") or not (\"off\")"
			},
			"response": []
		},
		{
			"name": "category.resetAgeGroups",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"sp_id\":\"146\",\"eg_id\":\"6\",\"e_id\":\"0\"}, \"appUser\" ],\n  \"className\": \"EntitySeasonPeriod\",\n  \"functionName\": \"resetAgeGroups\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request resets the age-groups in the pricing configuration for a given seasonperiod and room category or room.<br><br>\n\nparams:<br>\nobject -> <br>\n&nbsp;&nbsp;{ <br>\n&nbsp;&nbsp;&nbsp;&nbsp;sp_id: sp_id of the seasonperiod to reset the agegroups for (comes from seasonPeriods.getSeasonPeriod)<br>\n&nbsp;&nbsp;&nbsp;&nbsp;eg_id: id of the category (eg_id). If the agegroups for room-pricing are meant, use 0 (zero) for this parameter.<br>\n&nbsp;&nbsp;&nbsp;&nbsp;e_id: id of the entity (e_id). If the agegroups for category-pricing are meant, use 0 (zero) for this parameter.<br>\n&nbsp;&nbsp;}<br>\n\"appUser\" -> fixed string<br><br>\n\nReturnvalue of this request is irrelevant"
			},
			"response": []
		},
		{
			"name": "category.adminPricing",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"sp_id\": \"146\",\n\t\"eg_id\": \"6\",\n\t\"e_id\": \"0\",\n\t\"spe_pricingScheme_id\": \"2\",\n    \"spe_cleanUpPrice\": \"2.00\",\n\t\"spe_childUnderXForfree\": 0,\n\t\"spe_minPersons\": 1,\n\t\"spe_maxPersons\": 3,\n\t\"spe_stdPricePosition\": 1,\n\t\"spe_childDiscountStartPosition\": 0,\n\t\"updateForAllEntitiesOfThisGroup\": false,\n\t\"seasonPeriodEntityEntityGroupServiceType\": [{\n\t\t\t\"ag3_5\": \"0.00\",\n\t\t\t\"speegst_active\": \"on\",\n\t\t\t\"speegst_stdDisplayPrice\": \"off\",\n\t\t\t\"st_id\": \"1\",\n\t\t\t\"adultPrice\": \"5.00\",\n\t\t\t\"ag0_2\": \"0.00\",\n\t\t\t\"ag11_17\": \"0.00\",\n\t\t\t\"ag6_10\": \"0.00\"\n\t\t}, {\n\t\t\t\"ag3_5\": \"0.00\",\n\t\t\t\"speegst_active\": \"on\",\n\t\t\t\"speegst_stdDisplayPrice\": \"on\",\n\t\t\t\"st_id\": \"2\",\n\t\t\t\"adultPrice\": \"10.00\",\n\t\t\t\"ag0_2\": \"0.00\",\n\t\t\t\"ag11_17\": \"0.00\",\n\t\t\t\"ag6_10\": \"0.00\"\n\t\t}, {\n\t\t\t\"ag3_5\": \"0.00\",\n\t\t\t\"speegst_active\": \"on\",\n\t\t\t\"speegst_stdDisplayPrice\": \"off\",\n\t\t\t\"st_id\": \"3\",\n\t\t\t\"adultPrice\": \"15.00\",\n\t\t\t\"ag0_2\": \"0.00\",\n\t\t\t\"ag11_17\": \"0.00\",\n\t\t\t\"ag6_10\": \"0.00\"\n\t\t}\n\t],\n\t\"pricing\": [{\n\t\t\t\"ag3_5\": \"4.00_90\",\n\t\t\t\"isStdPricePosition\": \"on\",\n\t\t\t\"ag11_17\": \"12.00_70\",\n\t\t\t\"personsNo\": \"1\",\n\t\t\t\"ag6_10\": \"8.00_80\",\n\t\t\t\"adultPrice\": \"40.00\",\n\t\t\t\"serviceTypeId\": \"0\",\n\t\t\t\"ag0_2\": \"0.00_100\"\n\t\t}, {\n\t\t\t\"ag3_5\": \"3.00_90\",\n\t\t\t\"isStdPricePosition\": \"off\",\n\t\t\t\"ag11_17\": \"9.00_70\",\n\t\t\t\"personsNo\": \"2\",\n\t\t\t\"ag6_10\": \"6.00_80\",\n\t\t\t\"adultPrice\": \"30.00\",\n\t\t\t\"serviceTypeId\": \"0\",\n\t\t\t\"ag0_2\": \"0.00_100\"\n\t\t}, {\n\t\t\t\"ag3_5\": \"2.00_90\",\n\t\t\t\"isStdPricePosition\": \"off\",\n\t\t\t\"ag11_17\": \"6.00_70\",\n\t\t\t\"personsNo\": \"3\",\n\t\t\t\"ag6_10\": \"4.00_80\",\n\t\t\t\"adultPrice\": \"20.00\",\n\t\t\t\"serviceTypeId\": \"0\",\n\t\t\t\"ag0_2\": \"0.00_100\"\n\t\t}\n\t]\n}\n, \"appUser\" ],\n  \"className\": \"EntitySeasonPeriod\",\n  \"functionName\": \"adminPricing\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This saves the catering- and pricing-configuration for a given room category or room.  \n  \nparams:  \nobject ->  \n{  \n&nbsp;&nbsp;int sp_id: seasonperiod_id, id of the Season Period  \n&nbsp;&nbsp;int eg_id: entityGroup_id = id of the roomcategory (use 0 if this update is meant for a room and not a roomcategory)  \n&nbsp;&nbsp;int e_id: entity_id = id of the room (use 0 if this update is meant for a roomcategory)  \n&nbsp;&nbsp;int spe_pricingScheme_id: id of the Pricing Scheme  \n&nbsp;&nbsp;float spe_cleanUpPrice: Final cleaning value  \n&nbsp;&nbsp;int spe_childUnderXForfree: \"Children Free under age of\" value  \n&nbsp;&nbsp;int spe_minPersons, spe_maxPersons: Min Persons and Max Persons value  \n&nbsp;&nbsp;int spe_stdPricePosition: Std Price Position  \n&nbsp;&nbsp;int spe_childDiscountStartPosition: \"Full Payers\" value  \n&nbsp;&nbsp;bool updateForAllEntitiesOfThisGroup: If true then the configuration will not only be applied to the roomcategory, but also to all rooms that are linked to this category  \n&nbsp;&nbsp;seasonPeriodEntityEntityGroupServiceType: array that describes the catering configuration (explained in another paragraph below)  \n&nbsp;&nbsp;pricing: array that describes the pricing configuration (explained below)  \n}    \n\"appUser\" -> fixed string  \n<br>\n\n**seasonPeriodEntityEntityGroupServiceType**  \nObjects in this array show the catering price per catering type and age-group and also which catering types are active and standard.  \n* agX_Y: This field is used to pass an age-group price. There can be multiple fields in 1 object that are prefixed with \"ag\". X needs to be the fromAge, Y the toAge. The value of the field is the price of this agegroup.  \n* speegst_active: If that catering type is active, this needs to be 'on' else 'off'\n* speegst_stdDisplayPrice: If this is 'on', then this is the Std catering type. There must be only 1 catering type that's Std\n* st_id: Id of the catering type\n* adultPrice: The adult price of this catering type  \n<br>\n\n**pricing**  \nObjects in this array describe the lodging price per person-number and age-group. The percentage-discounts of age-groups are also integrated in this data.  \n* agX_Y: Works the same as explained under *seasonPeriodEntityEntityGroupServiceType* but with an addition: The value contains also the percentage discount of this age-group. The value is delimited by an underscore _ and the first part is a float value representing the price of this agegroup, second part is an integer representing the percentage discount\n* isStdPricePosition: If 'on' then this price is the standard price (else it would be 'off'). This could be actually also determined by checking if spe_stdPricePosition == personsNo\n* personsNo: Number of the person that this price is meant for\n* adultPrice: The adult price\n* serviceTypeId: The catering type that this price is meant for. If the user has set companyDetails.c_methodDefaultCatering == 'quota' and companyDetails.c_methodOtherCatering == 'absolute' then this needs to contain an id > 0. Else the prices are not specific to catering types and serviceTypeId needs to be 0 in this case.  \n<br>\n<br>\n\nReturn value of this request is irrelevant, it's always returning the string \"AA\""
			},
			"response": []
		},
		{
			"name": "category.getSeasonPeriod",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"EntitySeasonPeriod\",\n  \"functionName\": \"getSeasonPeriod\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request returns a list of season periods that are configured at the given hotel. No special parameters needed, only fixed string \"appUser\"."
			},
			"response": []
		},
		{
			"name": "category.getEntityGroupLight",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"EntitySeasonPeriod\",\n  \"functionName\": \"getEntityGroup\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request returns a list of room categories (entitygroups) for the given hotel. Only fixed string \"appUser\" needed as input parameter"
			},
			"response": []
		},
		{
			"name": "category.copyTo",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"sourceSPID\": \"146\",\n\t\"sourceEGID\": \"6\",\n\t\"egArr\": [\"49\", \"45\"],\n\t\"spArr\": [\"150\", \"149\"],\n\t\"dataArr\": [\"catering\", \"prices\", \"seasonProperties\", \"cleanupCharge\"]\n}, \"appUser\" ],\n  \"className\": \"EntitySeasonPeriod\",\n  \"functionName\": \"copyTo\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request copies the chosen configuration for a specified room category and season to other room categories and seasons.  \n  \nparams:  \nobject ->   \n{   \n&nbsp;&nbsp;int sourceSPID: sp_id of the season to copy from  \n&nbsp;&nbsp;int sourceEGID: eg_id of the room category (entityGroup) to copy from  \n&nbsp;&nbsp;array of int egArr: target list of eg_ids (ids of room categories) to copy to  \n&nbsp;&nbsp;array of int spArr: target list of sp_ids (ids of season periods) to copy to  \n&nbsp;&nbsp;array of strings dataArr: list of configuration categories that shall be copied. Possible values are \"catering\", \"prices\", \"seasonProperties\", \"cleanupCharge\"  \n}  \n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "category.getSeasonPeriodEntityGroup",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 6, 146, \"appUser\" ],\n  \"className\": \"EntitySeasonPeriod\",\n  \"functionName\": \"getSeasonPeriodEntityGroup\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request returns season-details for a given room category- and season id  \n  <br>\nparams:  \nint -> eg_id, room category id  \nint -> sp_id, season period id  \n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "category.updateEntitySeasonPeriod",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"spe_id\": \"6386\",\n\t\"entityGroupUpdate\": \"true\",\n\t\"updateForAllEntitiesOfThisGroup\": false,\n\t\"spe_minStay\": 1,\n\t\"spe_maxStay\": 28,\n\t\"spe_anMon\": \"on\",\n\t\"spe_anTue\": \"on\",\n\t\"spe_anWed\": \"on\",\n\t\"spe_anThu\": \"on\",\n\t\"spe_anFri\": \"on\",\n\t\"spe_anSat\": \"on\",\n\t\"spe_anSun\": \"on\",\n\t\"spe_abMon\": \"on\",\n\t\"spe_abTue\": \"on\",\n\t\"spe_abWed\": \"on\",\n\t\"spe_abThu\": \"on\",\n\t\"spe_abFri\": \"on\",\n\t\"spe_abSat\": \"on\",\n\t\"spe_abSun\": \"on\",\n\t\"spe_useNightsMultiple\": \"off\",\n\t\"spe_allowEnquiry\": \"on\",\n\t\"spe_allowReservation\": \"on\",\n}, \"appUser\" ],\n  \"className\": \"EntitySeasonPeriod\",\n  \"functionName\": \"updateEntitySeasonPeriod\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request saves configuration for a given seasonperiod-room or room-category configuration (identified by spe_id)<br>\n<br>\nparameters:  \nobject ->   \n{  \n&nbsp;&nbsp;spe_id int: identifies the seasonperiod-room/room-category configuration  \n&nbsp;&nbsp;entityGroupUpdate string(!): can be either \"true\" or \"false\", indicates, if the config is meant for a room-category (\"true\") or a room (\"false\")  \n&nbsp;&nbsp;spe_minStay, spe_maxStay int: Min Nights and Max Nights    \n&nbsp;&nbsp;spe_an[WEEKDAY], spe_ab[WEEKDAY] string: Can be either \"on\" or \"off\", indicate if the weekday is possible to arrive (an) or depart (ab)\n&nbsp;&nbsp;spe_useNightsMultiple string: \"on\" or \"off\", special pricing setting  \n&nbsp;&nbsp;spe_allowEnquiry, spe_allowReservation: \"on\" or \"off\", indicates if it shall be possible to create an enquiry or reservation in this configuration-scenario  \n&nbsp;&nbsp;spe_cleanUpPrice float: Final cleaning value. This is just needed at updating room configuration (if the field entityGroupUpdate is \"false\")  \n}  \n,\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "category.getEntityGroupPic",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 33, \"appUser\" ],\n  \"className\": \"EntityGroupPic\",\n  \"functionName\": \"getEntityGroupPic\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request returns a list of objects that contain the path to pictures that are linked to the given room category.<br><br>\n\n\nparams:  \nint -> eg_id, id of the room category (entityGroup)  \n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "category.updateEntityGroupPic",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"egp_id\":\"112\",\"egp_sortOrder\":4}, \"appUser\" ],\n  \"className\": \"EntityGroupPic\",\n  \"functionName\": \"updateEntityGroupPic\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request updates the sortOrder of a given room category picture identified by egp_id<br><br>\n\nparams:  \nobject -> { egp_id int: id of the picture, egp_sortOrder int: new value for the sort order }  \n\"appUser\" -> fixed string<br><br>\n\nReturn value of this request is irrelevant"
			},
			"response": []
		},
		{
			"name": "category.deleteEntityGroupPic",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 14, \"appUser\" ],\n  \"className\": \"EntityGroupPic\",\n  \"functionName\": \"deleteEntityGroupPic\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request deletes a room category picture identified by egp_id<br><br>\n\nparams:  \nint -> egp_id of the picture to delete  \n\"appUser\" -> fixed string<br><br>\n\nReturn value is irrelevant, it's always an empty array."
			},
			"response": []
		},
		{
			"name": "category.imageUpload",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "dbName",
							"value": "srv0010002",
							"type": "text"
						},
						{
							"key": "Filename",
							"value": "pelna-glowa.jpg",
							"type": "text"
						},
						{
							"key": "imageType",
							"value": "entityGroupImage",
							"type": "text"
						},
						{
							"key": "timeStamp",
							"value": "201991113643533",
							"type": "text"
						},
						{
							"key": "eg_id",
							"value": "6",
							"type": "text"
						},
						{
							"key": "e_id",
							"value": "0",
							"type": "text"
						},
						{
							"key": "Filedata",
							"type": "file",
							"src": "/D:/Downloads/pełna-głowa.jpg"
						}
					]
				},
				"url": {
					"raw": "http://{{SERVERIP}}/wo/Services/com/eBook/imageUpload/ImageUpload.php",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"wo",
						"Services",
						"com",
						"eBook",
						"imageUpload",
						"ImageUpload.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "category.getEntityGroupsForPictures",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 14, \"appUser\" ],\n  \"className\": \"EntityGroupPic\",\n  \"functionName\": \"getEntityGroup\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request returns a list of all room categories excluding one category that's identified by the id of the first input parameter<br><br>\n\nparams:  \nint -> eg_id of the room category to filter away  \n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "category.getEntityForPictures",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"EntityGroupPic\",\n  \"functionName\": \"getEntity\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request returns a list of all rooms. No special parameters, just fixed \"appUser\""
			},
			"response": []
		},
		{
			"name": "category.copyPictures",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"egArr\": [\"44\", \"22\"],\n\t\"eArr\": [\"192\", \"185\"],\n\t\"source_eg_id\": \"6\"\n}\n, \"appUser\" ],\n  \"className\": \"EntityGroupPic\",\n  \"functionName\": \"copyPictures\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request copies picture configuration of a given room category to other room categories and rooms<br><br>\n\nparams:  \nobject ->  \n{  \n&nbsp;&nbsp;egArr: array of int, eg_ids of room categories to copy to (empty array is possible)  \n&nbsp;&nbsp;eArr: array of int, e_ids of rooms to copy to (empty array is possible)  \n&nbsp;&nbsp;source_eg_id int: eg_id of the source room category to copy from  \n}<br><br>\n\nReturnvalue is irrelevant, the request always returns an empty array"
			},
			"response": []
		},
		{
			"name": "category.getEntityGroupFeatures",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 6, \"appUser\" ],\n  \"className\": \"EntityGroup\",\n  \"functionName\": \"getEntityGroupFeatures\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request returns a list of \"features\" and if a feature is available or not at a given room category.<br><br>\n\nparams:  \nint -> eg_id of the room category to show features for  \n\"appUser\" -> fixed string<br><br>\n\nReturn value is an object. Fieldnames = feature key, Values = feature value"
			},
			"response": []
		},
		{
			"name": "category.getEntityType",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"EntityGroup\",\n  \"functionName\": \"getEntityType\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request returns the list of possible room-types. Input parameter is just fixed \"appUser\""
			},
			"response": []
		},
		{
			"name": "category.validateChangedEntityFeatures",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"eg_id\": \"6\",\n\t\"forAll\": \"off\",\n\t\"eg_entityType_id\": \"2\",\n\t\"babyBed\": 0,\n\t\"hairDryer\": \"on\",\n\t\"whirlpoolBad\": \"on\",\n\t\"backRohr\": \"on\",\n\t\"seperateKitchen\": \"on\",\n\t\"internet\": \"on\",\n\t\"telephone\": \"on\",\n\t\"bad\": \"on\",\n\t\"singleBed\": \"on\",\n\t\"kingSizeBed\": 0,\n\t\"wohnKuche\": \"on\",\n\t\"bakingOven\": \"off\",\n\t\"balcony\": \"on\",\n\t\"sitzEcke\": \"on\",\n\t\"kaffeeAutomat\": \"on\",\n\t\"bathrobe\": \"on\",\n\t\"std_bathRoom\": 1,\n\t\"kaffeeMaschine\": \"on\",\n\t\"antiAllergie\": \"on\",\n\t\"wohnzimmerMitSchlafcouch\": \"on\",\n\t\"behinderteGerecht\": \"on\",\n\t\"nichtRaucher\": \"on\",\n\t\"kinderZimmer\": \"off\",\n\t\"std_bathShower\": \"on\",\n\t\"klima\": \"off\",\n\t\"terasse\": \"on\",\n\t\"bidet\": \"off\",\n\t\"cooker2Plate\": \"on\",\n\t\"wohnSchlafZimmerGetrennt\": \"on\",\n\t\"breadrollService\": \"on\",\n\t\"cooker4Plate\": \"on\",\n\t\"microwelle\": \"on\",\n\t\"towls\": \"on\",\n\t\"std_bedding\": \"on\",\n\t\"cookingFacility\": \"on\",\n\t\"miniBar\": \"on\",\n\t\"pitchSquareMeters\": \"50\",\n\t\"cutlery\": \"on\",\n\t\"roomSizeM2\": \"50\",\n\t\"pitch\": \"on\",\n\t\"doubleSink\": \"on\",\n\t\"std_cable_sat\": \"on\",\n\t\"dusche\": \"on\",\n\t\"std_isolabella\": \"on\",\n\t\"water\": \"on\",\n\t\"radio\": \"on\",\n\t\"waschMaschine\": \"on\",\n\t\"eigenerEingang\": \"on\",\n\t\"electricity\": \"on\",\n\t\"wasserKocher\": \"on\",\n\t\"electricityAmpereValue\": \"\",\n\t\"anzahlSchlafzimmer\": 1,\n\t\"schlafCouch2Pers\": 0,\n\t\"wc\": \"on\",\n\t\"safe\": \"on\",\n\t\"frenchBed\": 0,\n\t\"sauna\": \"off\",\n\t\"fridge\": \"on\",\n\t\"schlafCouch1Pers\": 0,\n\t\"seperateLivingRoom\": \"on\",\n\t\"schreibTisch\": \"on\",\n\t\"app_doubleBeds\": 1,\n\t\"etagenBett\": 0,\n\t\"app_singleBeds\": 0,\n\t\"garage\": \"on\",\n\t\"sewage\": \"on\",\n\t\"schwimmbad\": \"on\",\n\t\"geschirrspulMaschine\": \"off\",\n\t\"wcGetrennt\": \"on\"\n}, \"appUser\" ],\n  \"className\": \"EntityGroup\",\n  \"functionName\": \"validateChangedEntityFeatures\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request checks, if changes to a room category that are requested by the user would be possible according to the license of this user.<br><br>\n\n\nparams:  \nobject  \n{  \n&nbsp;&nbsp;eg_id int: eg_id of the room category to update,  \n&nbsp;&nbsp;forAll string: either 'on' or 'off', indicates if all rooms of the given category should be updated  \n&nbsp;&nbsp;eg_entityType_id int: et_id of the room category  \n&nbsp;&nbsp;Rest of the fields have the same structure as the return object received from category.getEntityGroupFeatures  \n}<br><br>\n\nReturnvalue is an object that can contain following fields:  \nbedValueAdminOnly int: The \"bed\" value of admin only rooms (this is relevant for bed licensing)  \nadminOnlyCount int: Number of rooms that are flagged as adminOnly  \nbedStats array: a license statistics, content is dynamic  \nmaxBeds int: max number of beds the user is allowed to have according to the license  \nbedsInUse int: actual number of beds used  \nmsg string: This can be either \"TooManyBeds\" or \"OK\""
			},
			"response": []
		},
		{
			"name": "category.updateEntityGroupFeatures",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"eg_id\": \"6\",\n\t\"forAll\": \"off\",\n\t\"eg_entityType_id\": \"2\",\n\t\"babyBed\": 0,\n\t\"hairDryer\": \"on\",\n\t\"whirlpoolBad\": \"on\",\n\t\"backRohr\": \"on\",\n\t\"seperateKitchen\": \"on\",\n\t\"internet\": \"on\",\n\t\"telephone\": \"on\",\n\t\"bad\": \"on\",\n\t\"singleBed\": \"on\",\n\t\"kingSizeBed\": 0,\n\t\"wohnKuche\": \"on\",\n\t\"bakingOven\": \"off\",\n\t\"balcony\": \"on\",\n\t\"sitzEcke\": \"on\",\n\t\"kaffeeAutomat\": \"on\",\n\t\"bathrobe\": \"on\",\n\t\"std_bathRoom\": 1,\n\t\"kaffeeMaschine\": \"on\",\n\t\"antiAllergie\": \"on\",\n\t\"wohnzimmerMitSchlafcouch\": \"on\",\n\t\"behinderteGerecht\": \"on\",\n\t\"nichtRaucher\": \"on\",\n\t\"kinderZimmer\": \"off\",\n\t\"std_bathShower\": \"on\",\n\t\"klima\": \"off\",\n\t\"terasse\": \"on\",\n\t\"bidet\": \"off\",\n\t\"cooker2Plate\": \"on\",\n\t\"wohnSchlafZimmerGetrennt\": \"on\",\n\t\"breadrollService\": \"on\",\n\t\"cooker4Plate\": \"on\",\n\t\"microwelle\": \"on\",\n\t\"towls\": \"on\",\n\t\"std_bedding\": \"on\",\n\t\"cookingFacility\": \"on\",\n\t\"miniBar\": \"on\",\n\t\"pitchSquareMeters\": \"50\",\n\t\"cutlery\": \"on\",\n\t\"roomSizeM2\": \"50\",\n\t\"pitch\": \"on\",\n\t\"doubleSink\": \"on\",\n\t\"std_cable_sat\": \"on\",\n\t\"dusche\": \"on\",\n\t\"std_isolabella\": \"on\",\n\t\"water\": \"on\",\n\t\"radio\": \"on\",\n\t\"waschMaschine\": \"on\",\n\t\"eigenerEingang\": \"on\",\n\t\"electricity\": \"on\",\n\t\"wasserKocher\": \"on\",\n\t\"electricityAmpereValue\": \"\",\n\t\"anzahlSchlafzimmer\": 1,\n\t\"schlafCouch2Pers\": 0,\n\t\"wc\": \"on\",\n\t\"safe\": \"on\",\n\t\"frenchBed\": 0,\n\t\"sauna\": \"off\",\n\t\"fridge\": \"on\",\n\t\"schlafCouch1Pers\": 0,\n\t\"seperateLivingRoom\": \"on\",\n\t\"schreibTisch\": \"on\",\n\t\"app_doubleBeds\": 1,\n\t\"etagenBett\": 0,\n\t\"app_singleBeds\": 0,\n\t\"garage\": \"on\",\n\t\"sewage\": \"on\",\n\t\"schwimmbad\": \"on\",\n\t\"geschirrspulMaschine\": \"off\",\n\t\"wcGetrennt\": \"on\"\n}, \"appUser\" ],\n  \"className\": \"EntityGroup\",\n  \"functionName\": \"updateEntityGroupFeatures\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This updates features for a given room category<br><br>\n\nparams:  \nobject  \n{  \n&nbsp;&nbsp;eg_id int: eg_id of the room category to update,  \n&nbsp;&nbsp;forAll string: either 'on' or 'off', indicates if all rooms of the given category should be updated  \n&nbsp;&nbsp;eg_entityType_id int: et_id of the Room Type of the room category  \n&nbsp;&nbsp;Rest of the fields have the same structure as the return object received from category.getEntityGroupFeatures  \n}<br><br>\n\nReturnvalue of this function is irrelevant, it's always returning [ \"0\" ]"
			},
			"response": []
		},
		{
			"name": "category.copyFeatures",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"egArr\": [\"44\", \"22\"],\n\t\"eArr\": [\"192\", \"185\"],\n\t\"source_eg_id\": \"6\"\n}\n, \"appUser\" ],\n  \"className\": \"EntityGroup\",\n  \"functionName\": \"copyFeatures\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request copies feature configuration of a given room category to other room categories and rooms<br><br>\n\nparams:  \nobject ->  \n{  \n&nbsp;&nbsp;egArr: array of int, eg_ids of room categories to copy to (empty array is possible)  \n&nbsp;&nbsp;eArr: array of int, e_ids of rooms to copy to (empty array is possible)  \n&nbsp;&nbsp;source_eg_id int: eg_id of the source room category to copy from  \n}<br><br>\n\nReturnvalue is irrelevant, the request always returns { \"msg\" : \"OK\" }"
			},
			"response": []
		},
		{
			"name": "category.getImage",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"eg_id\":\"5\"}, \"appUser\" ],\n  \"className\": \"EntityGroup\",\n  \"functionName\": \"getImage\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request returns the layout image of the given room category<br><br>\n\nparams:  \nobject -> Just one field in this object, eg_id of the room category  \n\"appUser\" -> fixed string<br><br>\n\nReturn:  \nThe request returns an array with only 1 string element. This is the path to the picture, for example \"/wo/Services/images/srv0010002/20135291429495_zimmer.jpg\".  \nIt's needed to prefix it with the path to the media-server to get the picture, for example:  \n(http/https)://media.easy-booking.at/wo/Services/images/srv0010002/20135291429495_zimmer.jpg"
			},
			"response": []
		},
		{
			"name": "category.clearImage",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"eg_id\":\"5\"}, \"appUser\" ],\n  \"className\": \"EntityGroup\",\n  \"functionName\": \"clearImage\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request clears the currently used layout image for a given room category and replaces it by a default image<br><br>\n\nparams:  \nobject -> Just one field in this object, eg_id of the room category  \n\"appUser\" -> fixed string<br><br>\n\nReturnvalue is irrelevant, the request always returns an empty array."
			},
			"response": []
		},
		{
			"name": "room.getEntityGroup",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"AppClass\",\n  \"functionName\": \"getEntityGroup\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This returns the list of room categories and their translations. Input parameter is just \"appUser\" fixed"
			},
			"response": []
		},
		{
			"name": "room.validateNumberOfRooms",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"entArr\": [{\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}\n\t],\n\t\"et_id\": \"1\"\n}\n, \"appUser\" ],\n  \"className\": \"EntityType\",\n  \"functionName\": \"validateNumberOfRooms\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request checks if it would be allowed to add a certain set of rooms to the configuration according to the license of the user<br><br>\n\nparams (exactly the same as for request room.insertEntity):  \nobject ->  \n{  \n&nbsp;&nbsp;entArr array of objects:  \n&nbsp;&nbsp;{  \n&nbsp;&nbsp;&nbsp;&nbsp;eUniqueNo string: Room No.  \n&nbsp;&nbsp;&nbsp;&nbsp;egId int: eg_id of the room category of the room to add  \n&nbsp;&nbsp;&nbsp;&nbsp;e_adminOnly string: either 'on' or 'off', indicates, if this \"not bookable by customer\" (a so called admin only room)  \n&nbsp;&nbsp;}  \n&nbsp;&nbsp;et_id int: id of the entityType of the room to add  \n}  \n\"appUser\" -> fixed string<br><br>\n\nReturn object fields:  \nmsg: either \"notOverLicense\" if it's okay to add the rooms or \"overLicense\" if not  \nmaxRooms: the number of rooms that the user is allowed to have configured in total according to the license  \ncurrentRooms: The number of rooms that are currently in use + the number of rooms that the user wants to add (only non-admin-rooms are counted)  \nroomsToAdd: The number of rooms that the license would be exceeded if the given set of rooms would be added to the configuration  \nroomstats: array of objects about the current room configuration. Only present, if msg = \"overLicense\"<br><br>\n\nroomstats object fields:  \negl_value string: room category name  \ne_uniqueNo string: room number (isn't necessarily a number)<br><br>\n\nTo make it easier to display the roomstats list in the UI grouped by room category name \"out of the box\", egl_value only has content for the first occurence of a room category.  \nBecause output of the stats could look like this for example:  \nFamilyroom, room1  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; room2  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; room3  \nSingleroom, roomXYZ  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; roomB  \n..."
			},
			"response": []
		},
		{
			"name": "room.sendEmailAboutRoomLicense",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 18, 25, \"appUser\" ],\n  \"className\": \"EntityType\",\n  \"functionName\": \"sendEmailAboutRoomLicense\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request sends an email to qa@easybooking.at (Quality Assurance Department) about the request of a customer to increase the room licence.  \nPlease don't test this request, we want to avoid confusion at the Quality Assurance Department ;-)<br><br>\n\nparams:  \nint -> the number of rooms that are included in the licence of the user (= field maxRooms from request room.validateNumberOfRooms)  \nint -> the new number of rooms that the user would need in total for the licence (= field currentRooms from request room.validateNumberOfRooms)  \n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "room.insertEntity",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"entArr\": [{\n\t\t\t\"eUniqueNo\": \"newRoom13453\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}, {\n\t\t\t\"eUniqueNo\": \"newRoom1\",\n\t\t\t\"egId\": \"49\",\n\t\t\t\"e_adminOnly\": \"off\"\n\t\t}\n\t],\n\t\"et_id\": \"1\"\n}\n, \"appUser\" ],\n  \"className\": \"EntityType\",\n  \"functionName\": \"insertEntity\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request inserts new rooms to the configuration<br><br>\n\nparams (exactly the same as for request room.validateNumberOfRooms):  \nobject ->  \n{  \n&nbsp;&nbsp;entArr array of objects:  \n&nbsp;&nbsp;{  \n&nbsp;&nbsp;&nbsp;&nbsp;eUniqueNo string: Room No.  \n&nbsp;&nbsp;&nbsp;&nbsp;egId int: eg_id of the room category of the room to add  \n&nbsp;&nbsp;&nbsp;&nbsp;e_adminOnly string: either 'on' or 'off', indicates, if this \"not bookable by customer\" (a so called admin only room)  \n&nbsp;&nbsp;}  \n&nbsp;&nbsp;et_id int: id of the entityType of the room to add  \n}  \n\"appUser\" -> fixed string<br><br>\n\nReturn value is irrelevant."
			},
			"response": []
		},
		{
			"name": "room.checkBeforeEntityDeletion",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 275, \"3\", \"appUser\" ],\n  \"className\": \"EntityType\",\n  \"functionName\": \"checkBeforeEntityDeletion\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request checks if it's possible to delete a room from the configuration (It would be not possible if there are bookings saved to this room)<br><br>\n\nparams:  \nint -> the e_id of the room to check  \nstring -> the room number of the room<br><br>\n\nreturn object  fields:  \nmsg string: Either \"OK\" or \"BOOKINGS_IN_FUTURE\"  \ne_id int: e_id of the room to check (it's already contained also in the input parameters)  \ne_uniqueNo string: room number of the room (also already contained in the input parameters)"
			},
			"response": []
		},
		{
			"name": "room.deleteEntity",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 275, \"appUser\" ],\n  \"className\": \"EntityType\",\n  \"functionName\": \"deleteEntity\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request deletes a room from the configuration<br><br>\n\nparams:  \nint -> e_id of the room to delete  \n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "room.getListOfEntityType",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"StandardRoomAndAppartment\", \"appUser\" ],\n  \"className\": \"EntityType\",\n  \"functionName\": \"getListOfEntityType\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request returns the list of configured rooms.  \nBoth input parameters are fixed: \"StandardRoomAndAppartment\" and \"appUser\".  \nThe returned array is already pre-sorted as it should be displayed in the UI"
			},
			"response": []
		},
		{
			"name": "room.deleteEntitySeparator",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 2, \"appUser\" ],\n  \"className\": \"EntityType\",\n  \"functionName\": \"deleteEntitySeparator\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request deletes a room-separator from the db-configuration<br><br>\n\nparams:  \nint -> es_id of the separator to delete (in request room.getListOfEntityType this id is also put into the e_id field)  \n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "room.setEntitySeparator",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"es_sortOrder\":\"017\",\"es_id\":4}, \"appUser\" ],\n  \"className\": \"EntityType\",\n  \"functionName\": \"setEntitySeparator\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request udpates an existing room-separator or inserts a new one<br><br>\n\nparams:  \nobject: \n{   \n&nbsp;&nbsp;es_sortOrder: Sort-order of the separator  \n&nbsp;&nbsp;es_id: es_id of the separator to update or 0 if a new separator shall get added to the configuration  \n}<br><br>\n\nReturn value of this request is irrelevant"
			},
			"response": []
		},
		{
			"name": "room.updateEntity",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"ignoreSortOrder\": false,\n    \"e_entityGroup_id\": \"6\",\n\t\"e_id\": \"192\",\n\t\"e_sortOrder\": \"005\",\n\t\"e_adminOnly\": \"off\",\n\t\"e_uniqueNo\": \"3\",\n\t\"childEntityList\": [\"276\", \"277\", \"185\"],\n    \"babyBed\": 0,\n\t\"hairDryer\": \"on\",\n\t\"whirlpoolBad\": \"on\",\n\t\"backRohr\": \"on\",\n\t\"seperateKitchen\": \"on\",\n\t\"internet\": \"on\",\n\t\"telephone\": \"on\",\n\t\"bad\": \"on\",\n\t\"singleBed\": \"on\",\n\t\"kingSizeBed\": 0,\n\t\"wohnKuche\": \"on\",\n\t\"bakingOven\": \"off\",\n\t\"balcony\": \"off\",\n\t\"sitzEcke\": \"on\",\n\t\"kaffeeAutomat\": \"on\",\n\t\"bathrobe\": \"on\",\n\t\"std_bathRoom\": 1,\n\t\"kaffeeMaschine\": \"on\",\n\t\"antiAllergie\": \"on\",\n\t\"wohnzimmerMitSchlafcouch\": \"on\",\n\t\"behinderteGerecht\": \"on\",\n\t\"nichtRaucher\": \"on\",\n\t\"kinderZimmer\": \"off\",\n\t\"std_bathShower\": \"on\",\n\t\"klima\": \"off\",\n\t\"terasse\": \"on\",\n\t\"bidet\": \"off\",\n\t\"cooker2Plate\": \"on\",\n\t\"wohnSchlafZimmerGetrennt\": \"on\",\n\t\"breadrollService\": \"on\",\n\t\"cooker4Plate\": \"on\",\n\t\"microwelle\": \"on\",\n\t\"towls\": \"on\",\n\t\"std_bedding\": \"on\",\n\t\"cookingFacility\": \"on\",\n\t\"miniBar\": \"on\",\n\t\"pitchSquareMeters\": \"50\",\n\t\"cutlery\": \"on\",\n\t\"water\": \"on\",\n\t\"roomSizeM2\": \"50\",\n\t\"pitch\": \"on\",\n\t\"doubleSink\": \"on\",\n\t\"std_cable_sat\": \"on\",\n\t\"dusche\": \"on\",\n\t\"std_isolabella\": \"on\",\n\t\"radio\": \"on\",\n\t\"waschMaschine\": \"on\",\n\t\"eigenerEingang\": \"on\",\n\t\"electricity\": \"on\",\n\t\"wasserKocher\": \"on\",\n\t\"electricityAmpereValue\": \"220\",\n\t\"anzahlSchlafzimmer\": 1,\n\t\"wc\": \"on\",\n\t\"safe\": \"on\",\n\t\"frenchBed\": 0,\n\t\"sauna\": \"off\",\n\t\"schlafCouch2Pers\": 0,\n\t\"fridge\": \"on\",\n\t\"schlafCouch1Pers\": 0,\n\t\"seperateLivingRoom\": \"on\",\n\t\"schreibTisch\": \"on\",\n\t\"app_doubleBeds\": 1,\n\t\"etagenBett\": 0,\n\t\"app_singleBeds\": 0,\n\t\"garage\": \"on\",\n\t\"sewage\": \"on\",\n\t\"schwimmbad\": \"on\",\n\t\"geschirrspulMaschine\": \"off\",\n\t\"wcGetrennt\": \"on\"\n}\n, \"appUser\" ],\n  \"className\": \"EntityType\",\n  \"functionName\": \"updateEntity\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves details of a room to the database<br><br>\n\nparams:  \nobj ->  \n{  \n*Mandatory:*  \n&nbsp;&nbsp;int e_entityGroup_id: eg_id of the chosen room category (also called \"Display Group\" in the UI)  \n&nbsp;&nbsp;int e_id: e_id of the room to update  \n&nbsp;&nbsp;string e_sortOrder: sort order key of the room  \n&nbsp;&nbsp;string e_adminOnly: either 'on' or 'off', indicates if this is \"Not bookable by customer\" (the room is not bookable by customer if this field is 'on')  \n&nbsp;&nbsp;array of int childEntityList: list of e_id of rooms that are linked to this room as children  \n&nbsp;&nbsp;string e_uniqueNo: The Room No.  \n*Optional:*  \n&nbsp;&nbsp;A list of key:value pairs as it's returned by category.getEntityGroupFeatures  \n&nbsp;&nbsp;bool ignoreSortOrder: If this is true then the field e_sortOrder will be ignored and not saved  \n}<br><br>\n\nReturn value of this request is irrelevant"
			},
			"response": []
		},
		{
			"name": "room.getEntityDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 276, \"appUser\" ],\n  \"className\": \"EntityType\",\n  \"functionName\": \"getEntityDetail\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of features (similar as in category.getEntityGroupFeatures) and a few other details that are linked to a room.<br><br>\n\nparams:  \nint id: e_id of the room to get details for  \n\"appUser\": fixed string<br><br>\n\nReturn:  \nmaxPersons int: how man persons fit into this room max (not needed in screen \"Rooms & Apartments\" -> Detail tab)  \ne_id int: Same as from input parameter  \ne_entityGroup_id: eg_id of the room category of this room (Also called \"Display Group\" in the UI)  \nroomNo string: Room No.  \ne_sortOrder string: Sort Order  \ne_adminOnly string: Not bookable by customer if this is 'on', else 'off'  \nchildEntity array of objects is explained a bit below  \nThe rest are key:value pairs as it's returned by category.getEntityGroupFeatures<br><br>\n\nchildEntity array of objects:   \n{  \n&nbsp;&nbsp;int e_id: id of a room  \n&nbsp;&nbsp;string e_uniqueNo: Room No. of a room  \n&nbsp;&nbsp;string isChildOfMine: 'on' if this is a childroom to the given room else 'off'  \n}"
			},
			"response": []
		},
		{
			"name": "room.validateAdminOnlyChange",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"e_adminOnly\":\"off\",\"e_id\":\"301\"}, \"appUser\" ],\n  \"className\": \"EntityType\",\n  \"functionName\": \"validateAdminOnlyChange\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request checks room-licensing related to a room-update. Only \"non admin rooms\" count for room-licensing.\nSo if a user switches an admin room to be a non admin room this is increasing the number of rooms that count for licensing, and it's possible, that the user is over license then.<br><br>\n\nparams:  \nobject ->   \n{  \n&nbsp;&nbsp;string e_adminOnly: Either 'on' or 'off', indicates, if the room is switched to an admin room or a non-admin-room  \n&nbsp;&nbsp;int e_id: The e_id of the room that's getting updated  \n}<br><br>\n\nThis request is returning exactly the same structure as room.validateNumberOfRooms. Here's the description copy&pasted from there:<br><br>\n\nReturn object fields:  \nmsg: either \"notOverLicense\" if it's okay to add the rooms or \"overLicense\" if not  \nmaxRooms: the number of rooms that the user is allowed to have configured in total according to the license  \ncurrentRooms: The number of rooms that are currently in use + the number of rooms that the user wants to add (only non-admin-rooms are counted)  \nroomsToAdd: The number of rooms that the license would be exceeded if the given set of rooms would be added to the configuration  \nroomstats: array of objects about the current room configuration. Only present, if msg = \"overLicense\"<br><br>\n\nroomstats object fields:  \negl_value string: room category name  \ne_uniqueNo string: room number (isn't necessarily a number)<br><br>\n\nTo make it easier to display the roomstats list in the UI grouped by room category name \"out of the box\", egl_value only has content for the first occurence of a room category.  \nBecause output of the stats could look like this for example:  \nFamilyroom, room1  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; room2  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; room3  \nSingleroom, roomXYZ  \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; roomB  \n..."
			},
			"response": []
		},
		{
			"name": "room.getEntityLongDesc",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 260, \"appUser\" ],\n  \"className\": \"EntityType\",\n  \"functionName\": \"getEntityLongDesc\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the description of a room in different languages.  \nIt's possible, that there are no descriptions present or just for a few of the active languages of this company<br><br>\n\nparams:  \nint -> e_id of the room to get the description for  \n\"appUser\" -> fixed string<br><br>\n\nreturn (array of objects):  \nint el_entity_id: same as the e_id input parameter  \nint el_locale_id: language id of the description  \nstring el_shortDesc: not needed, irrelevant  \nstring el_longDesc: the actual language specific description of the room"
			},
			"response": []
		},
		{
			"name": "getAllLocale",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"srv0010002\" ],\n  \"className\": \"Locale\",\n  \"functionName\": \"getAllLocale\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of all possible \"locales\" (languages) of a company<br><br>\n\nparams:  \nstring -> dbName<br><br>\n\nreturn (array of objects):  \nl_id int: id of the locale  \nl_name string: short key of the locale  \nl_nameDisplay string: long name of the locale in english  \nl_desc string: i18n key of the locale  \nl_icon string: picture name of the locale  \nl_active string: either 'on' or 'off', indicates if the locale is active for this company"
			},
			"response": []
		},
		{
			"name": "room.setEntityLongDesc",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"ldls\": [{\n\t\t\t\"el_locale_id\": \"1\",\n\t\t\t\"el_longDesc\": \"room 2 english description\"\n\t\t}, {\n\t\t\t\"el_locale_id\": \"2\",\n\t\t\t\"el_longDesc\": \"room 2 german\"\n\t\t}, {\n\t\t\t\"el_locale_id\": \"3\",\n\t\t\t\"el_longDesc\": \"\"\n\t\t}, {\n\t\t\t\"el_locale_id\": \"4\",\n\t\t\t\"el_longDesc\": \"\"\n\t\t}, {\n\t\t\t\"el_locale_id\": \"5\",\n\t\t\t\"el_longDesc\": \"\"\n\t\t}\n\t],\n\t\"e_id\": \"260\"\n}\n, \"appUser\" ],\n  \"className\": \"EntityType\",\n  \"functionName\": \"setEntityLongDesc\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves descriptions of a room to the database<br><br>\n\nparams:  \nobject ->  \n{  \n&nbsp;&nbsp;ldls array of objects [ {  \n&nbsp;&nbsp;&nbsp;&nbsp;el_locale_id int: l_id of the locale that the description is for  \n&nbsp;&nbsp;&nbsp;&nbsp;el_longDesc string: description of the room in the specified language  \n&nbsp;&nbsp;} ]  \n&nbsp;&nbsp;e_id int: the e_id of the room that the given descriptions are for  \n}  \n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "room.getEntityPic",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 190, \"appUser\" ],\n  \"className\": \"EntityPic\",\n  \"functionName\": \"getEntityPic\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns an array of objects that hold information about pictures for a given room<br><br>\n\nparams:  \nint -> e_id of the room tho show pictures for  \n\"appUser\" -> fixed string<br><br>\n\nreturned objects:  \nep_id int: unqiue id of the picture  \nep_entity_id int: id of the room that this picture is for, already provided in the input parameters  \nep_picPath string: path to the picture, it's located at media.easy-booking.at  \nep_sortOrder string: sortorder of the picture"
			},
			"response": []
		},
		{
			"name": "room.updateEntityPic",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"ep_sortOrder\":1,\"ep_id\":\"447\"}, \"appUser\" ],\n  \"className\": \"EntityPic\",\n  \"functionName\": \"updateEntityPic\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request updates the sortorder for a given room picture<br><br>\n\nparams:  \nobject -> { ep_sortOrder int: sort order of the picture, ep_id int: unique id of the picture }  \n\"appUser\" -> fixed string<br><br>\n\nreturn value is irrelevant"
			},
			"response": []
		},
		{
			"name": "room.deleteEntityPic",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 543, \"appUser\" ],\n  \"className\": \"EntityPic\",\n  \"functionName\": \"deleteEntityPic\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes a room picture.<br><br>\n\nparams:  \nint -> ep_id of the roompicture to delete  \n\"appUser\" -> fixed string<br><br>\n\nreturn value is irrelevant"
			},
			"response": []
		},
		{
			"name": "room.imageUpload",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						},
						{
							"key": "dbName",
							"value": "srv0010002",
							"type": "text"
						},
						{
							"key": "Filename",
							"value": "pelna-glowa.jpg",
							"type": "text"
						},
						{
							"key": "imageType",
							"value": "entityImage",
							"type": "text"
						},
						{
							"key": "timeStamp",
							"value": "201991113643533",
							"type": "text"
						},
						{
							"key": "e_id",
							"value": "192",
							"type": "text"
						},
						{
							"key": "Filedata",
							"type": "file",
							"src": "/D:/Downloads/pełna-głowa.jpg"
						}
					]
				},
				"url": {
					"raw": "http://{{SERVERIP}}/wo/Services/com/eBook/imageUpload/ImageUpload.php",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"wo",
						"Services",
						"com",
						"eBook",
						"imageUpload",
						"ImageUpload.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "room.resetRoomPicsFromCat",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 192, \"appUser\" ],\n  \"className\": \"EntityPic\",\n  \"functionName\": \"resetRoomPicsFromCat\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request removes all pictures that are currently linked to a room and links the pictures to the room that are currently set at the room-category of this room<br><br>\n\nparams:  \nint -> e_id of the room to reset the pics for  \n\"appUser\" -> fixed string<br><br>\n\nReturnvalue is irrelevant"
			},
			"response": []
		},
		{
			"name": "room.getImageThumbsketch",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"e_id\":\"260\"}, \"appUser\" ],\n  \"className\": \"EntityType\",\n  \"functionName\": \"getImageThumbsketch\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request returns the path to the room-layout picture of a room.<br><br>\n\nparams:  \nobject -> { e_id int: e_id of the room to show the picture-path for }  \n\"appUser\" -> fixed string<br><br>\n\nReturn:  \nThe request returns an array with only 1 string element. This is the path to the picture, for example \"/wo/Services/images/srv0010002/20135291429495_zimmer.jpg\".  \nIt's needed to prefix it with the path to the media-server to get the picture, for example:  \n(http/https)://media.easy-booking.at/wo/Services/images/srv0010002/20135291429495_zimmer.jpg"
			},
			"response": []
		},
		{
			"name": "room.clearImageThumbsketch",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"e_id\":\"260\"}, \"appUser\" ],\n  \"className\": \"EntityType\",\n  \"functionName\": \"getImageThumbsketch\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request blanks the layout picture of a room and sets it to the default picture<br><br>\n\nparams:  \nobject -> { e_id int: e_id of the room to reset the layout picture for }  \n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "room.resetToEntityGroup",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"sp_id\":\"146\",\"e_id\":\"229\"}, \"appUser\" ],\n  \"className\": \"EntitySeasonPeriod\",\n  \"functionName\": \"resetToEntityGroup\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request sets the pricing configuration of a room for a given season period to the pricing configuration of the linked room category in this period.<br><br>\n\nparams:  \nobject ->  \n{  \n&nbsp;&nbsp;sp_id int: sp_id of the seasonperiod  \n&nbsp;&nbsp;e_id int: e_id of the room to reset the configuration for  \n}  \n\"appUser\" -> fixed string<br><br>\n\nReturn value is irrelevant"
			},
			"response": []
		},
		{
			"name": "room.getEntityList",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"EntitySeasonPeriod\",\n  \"functionName\": \"getEntityList\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request returns the list of active rooms. Only parameter is \"appUser\" fixed"
			},
			"response": []
		},
		{
			"name": "room.copyEntityTo",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"sourceSPID\": \"146\",\n\t\"sourceEID\": \"278\",\n\t\"eArr\": [\"274\", \"206\"],\n\t\"dataArr\": [\"prices\", \"seasonProperties\", \"cleanupCharge\"],\n\t\"spArr\": [\"145\", \"142\"]\n}, \"appUser\" ],\n  \"className\": \"EntitySeasonPeriod\",\n  \"functionName\": \"copyEntityTo\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request copies the chosen configuration for a specified room and season to other rooms and seasons.  \r\n  \r\nparams:  \r\nobject ->   \r\n{   \r\n&nbsp;&nbsp;int sourceSPID: sp_id of the season to copy from  \r\n&nbsp;&nbsp;int sourceEID: e_id of the room (entity) to copy from  \r\n&nbsp;&nbsp;array of int eArr: target list of e_ids (ids of rooms) to copy to  \r\n&nbsp;&nbsp;array of int spArr: target list of sp_ids (ids of season periods) to copy to  \r\n&nbsp;&nbsp;array of strings dataArr: list of configuration categories that shall be copied. Possible values are \"prices\", \"seasonProperties\", \"cleanupCharge\"  \r\n}  \r\n\"appUser\" -> fixed string<br><br>\r\n\r\nReturn value is irrelevant, it's always returning [ \"0\" ]"
			},
			"response": []
		},
		{
			"name": "room.getSeasonPeriodEntity",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 278, 146, \"appUser\" ],\n  \"className\": \"EntitySeasonPeriod\",\n  \"functionName\": \"getSeasonPeriodEntity\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request returns configuration details for a given room and seasonperiod<br><br>\n\nparams:  \nint -> e_id of the room to show configuration details for  \nsp_id -> sp_id of the wanted seasonperiod  \n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "extraCharges.getOther",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"Other\",\n  \"functionName\": \"getOther\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request returns the list of possible extra-charges and some configuration details about them.  \n\n\nparams:  \n\"appUser\" -> fixed string<br><br>\n\n**Return = array of objects with these fields:**<br>\nint oc_id: unique id of the charge-type  \nstring oc_chargeType: \"EC_\" + oc_chargeType = the i18n identifier of the name for this charge-type, for example \"EC_CleanUpCharge\"  \nstring oc_active: Either 'on' or 'off', indicates if this charge-type is currently active or not  \nfloat oc_price: Price of this charge-type  \nstring oc_strValue001: This is a multi-purpose-field, used for \"number of available beds\" at the charge-type \"Cot\" for example  \nstring oc_priceIncludedStandardRoom and oc_priceIncludedAppartment: Currently not used  \nstring oc_chargeDaily: either 'on' or 'off', indicates, if this charge is daily or one-off"
			},
			"response": []
		},
		{
			"name": "extraCharges.getOtherChargeDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 2, \"appUser\" ],\n  \"className\": \"Other\",\n  \"functionName\": \"getOtherChargeDetail\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This function was built to provide further details for a certain charge-type. Currently it's only needed for the charge-type \"CleanUpCharge\"<br><br>\n\nparams:  \nint -> oc_id of the charge-type (came from extraCharges.getOther)  \n\"appUser\" -> fixed string<br><br>\n\nReturn:  \nFields prefixed with oc_ are equal to the fields as they come from extraCharges.getOther  \notherChargesLocales: an array of objects that show translations for the given charge-type"
			},
			"response": []
		},
		{
			"name": "extraCharges.setOther",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"oc_price\": \"5.00\",\n\t\"oc_strValue001\": \"50\",\n\t\"oc_chargeDaily\": \"on\",\n\t\"oc_id\": \"2\",\n\t\"oc_active\": \"on\",\n\t\"oc_priceIncludedAppartment\": \"off\",\n\t\"oc_priceIncludedStandardRoom\": \"off\",\n\t\"otherChargesLocale\": [{\n\t\t\t\"ocl_otherCharges_id\": \"2\",\n\t\t\t\"ocl_id\": 1,\n\t\t\t\"ocl_text\": \"Final cleaning\",\n\t\t\t\"ocl_locale_id\": \"1\"\n\t\t}, {\n\t\t\t\"ocl_otherCharges_id\": \"2\",\n\t\t\t\"ocl_id\": 0,\n\t\t\t\"ocl_text\": \"New german entry\",\n\t\t\t\"ocl_locale_id\": \"2\"\n\t\t}, {\n\t\t\t\"ocl_otherCharges_id\": \"2\",\n\t\t\t\"ocl_id\": 3,\n\t\t\t\"ocl_text\": \"Eindschoonmaak \",\n\t\t\t\"ocl_locale_id\": \"3\"\n\t\t}, {\n\t\t\t\"ocl_otherCharges_id\": \"2\",\n\t\t\t\"ocl_id\": 4,\n\t\t\t\"ocl_text\": \"Pulizia finale\",\n\t\t\t\"ocl_locale_id\": \"4\"\n\t\t}, {\n\t\t\t\"ocl_otherCharges_id\": \"2\",\n\t\t\t\"ocl_id\": 5,\n\t\t\t\"ocl_text\": \"Nettoyage final\",\n\t\t\t\"ocl_locale_id\": \"5\"\n\t\t}\n\t]\n}, \"appUser\" ],\n  \"className\": \"Other\",\n  \"functionName\": \"setOther\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request saves details for a given extra charge<br><br>\n\nparams:  \nobject ->  \n{  \n&nbsp;&nbsp;float oc_price: price for the extra charge  \n&nbsp;&nbsp;int oc_strValue001: Value of an Additional field, either of the field \"Num Available\" (for Baby Bed and Parking Space) or cm+ for Large Pets  \n&nbsp;&nbsp;string oc_chargeDaily: either 'on' or 'off', only used at Cleanup Charge. Provide 'off' if this is not called for Cleanup Charge  \n&nbsp;&nbsp;int oc_id: unique id of the extra charge (called 'other charge' in the database)  \n&nbsp;&nbsp;string oc_active: either 'on' or 'off'. Indicates if this charge is active or not  \n&nbsp;&nbsp;string oc_priceIncludedAppartment and oc_priceIncludedStandardRoom: not needed anymore, please always provide 'off'  \n&nbsp;&nbsp;array otherChargesLocale: array of objects, provide an empty array if this is for another chargetype as Cleanup Charge  \n&nbsp;&nbsp;{  \n&nbsp;&nbsp;&nbsp;&nbsp;int ocl_otherCharges_id: needs to contain the same value as oc_id above  \n&nbsp;&nbsp;&nbsp;&nbsp;int ocl_id: the ocl_id as it came from extraCharges.getOtherChargeDetail. If the ocl_locale_id didn't appear in the return of extraCharges.getOtherChargeDetail provide the value 0 (zero) here. A new entry in the DB will be created then  \n&nbsp;&nbsp;&nbsp;&nbsp;string ocl_text: translation text  \n&nbsp;&nbsp;&nbsp;&nbsp;int ocl_locale_id: language id, links to l_id of companyDetails.languagesDataProvider  \n&nbsp;&nbsp;}  \n}  \n\"appUser\" -> fixed string<br><br>\n\nReturn value of this request is irrelevant"
			},
			"response": []
		},
		{
			"name": "ageGroups.getAgeGroup",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"AgeGroups\",\n  \"functionName\": \"getAgeGroup\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request returns information about all currently configured age-groups<br><br>\n\nparams:  \n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "ageGroups.adminAgeGroup",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"ag_name\": \"New Agegroup\",\n\t\"ag_fromAge\": 13,\n\t\"ag_toAge\": 17,\n\t\"ag_percDiscount\": \"20\",\n\t\"ag_id\": \"0\"\n}, \"appUser\" ],\n  \"className\": \"AgeGroups\",\n  \"functionName\": \"adminAgeGroup\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request saves details about an age-group to the database. It either updates an existing age-group or adds a new one<br><br>\n\nparams:  \nobject ->  \n{  \n&nbsp;&nbsp;string ag_name: Name of the age-group  \n&nbsp;&nbsp;int ag_fromAge: from age  \n&nbsp;&nbsp;int ag_toAge: to age  \n&nbsp;&nbsp;float ag_percDiscount: % Discount  \n&nbsp;&nbsp;int ag_id: Either the id of an existing age-group or 0 (zero) if this age-group needs to get added newly  \n}  \n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "ageGroups.resetAgeGroups",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"AgeGroups\",\n  \"functionName\": \"resetAgeGroups\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "!USE WITH CAUTION! This request actually doesn't only reset age-groups, it's completely resetting pricing-configuration for all seasons.<br><br>\n\nparams:  \n\"appUser\" -> fixed string<br><br>\n\nreturn value is irrelevant, it's always returning an empty array."
			},
			"response": []
		},
		{
			"name": "ageGroups.deleteAgeGroup",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 8, \"appUser\" ],\n  \"className\": \"AgeGroups\",\n  \"functionName\": \"deleteAgeGroup\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request deletes an age-group from the database<br><br>\n\nparams:  \nint -> ag_id of the age-group  \n\"appUser\" -> fixed string<br><br>\n\nReturnvalue is irrelevant"
			},
			"response": []
		},
		{
			"name": "lastMinutes.getLastMinutes",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"LastMinute\",\n  \"functionName\": \"getLastMinutes\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns an object with information about last minute discount configuration<br><br>\n\nparams:  \n\"appUser\" -> fixed string.<br><br>\n\n**return is an object with these fields:**<br>\narray lastMinutes: array of objects describing each configured last minute discount. object description:  \n{  \n&nbsp;&nbsp;int lm_id: unique id of the discount  \n&nbsp;&nbsp;string lm_fromDate: Start date of the discount. Time-Part is actually irrelevant, it's always 00:00:00  \n&nbsp;&nbsp;string lm_untilDate: End date of the discount.  \n&nbsp;&nbsp;int lm_nights: number of nights the guest has to book in advance of arrival to get the discount  \n&nbsp;&nbsp;float lm_percDiscount: percentage of the discount  \n&nbsp;&nbsp;string lm_periodType: Either \"bookingPeriod\" or \"bookingCreation\", describes the type of the discount  \n&nbsp;&nbsp;string lm_limitedDiscount: Either \"on\" or \"off\", indicates if it's a limited discount  \n&nbsp;&nbsp;string lml_value: The name of this discount in the specified language (that's given in the URL-route)  \n}  \nbool overlaps: indicates if there are overlapping discount periods  \nbool lastMinutesEnabled: indicates if last minute discounts are active in general"
			},
			"response": []
		},
		{
			"name": "lastMinutes.setLastMinutesEnabled",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"on\", \"appUser\" ],\n  \"className\": \"LastMinute\",\n  \"functionName\": \"setLastMinutesEnabled\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request switches a global setting in the database if last minutes are active or not<br><br>\n\nparams:  \nstring -> either 'on' or 'off', indicates, if last minutes are active or not  \n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "lastMinutes.getLocale",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"lm_id\":\"6\",\"lml_locale_id\":\"2\"}, \"appUser\" ],\n  \"className\": \"LastMinute\",\n  \"functionName\": \"getLocale\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the label of the last minute discount for a given last minute discount configuration in a given language<br><br>\n\nparams:  \nobject ->  \n{  \n&nbsp;&nbsp;int lm_id: lm_id of the wanted last minute discount  \n&nbsp;&nbsp;int lml_locale_id: l_id of the language  \n}  \n\"appuser\" -> fixed string<br><br>\n\nReturn is an array with only 1 string-element that is the label for the given last minute discount and language."
			},
			"response": []
		},
		{
			"name": "lastMinutes.adminLastMinute",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"lm_id\": \"5\",\n\t\"lm_periodType\": \"bookingPeriod\",\n\t\"lm_fromDate\": \"2017-08-01\",\n\t\"lm_untilDate\": \"2018-04-30\",\n\t\"lm_percDiscount\": \"10.00\",\n\t\"lml_locale_id\": \"1\",\n\t\"lml_value\": \"Last Minute Discount\",\n\t\"lm_nights\": \"30\",\n\t\"c_lastMinutesEnabled\": \"on\",\n\t\"lm_limitedDiscount\": \"off\"\n}\n, \"appUser\" ],\n  \"className\": \"LastMinute\",\n  \"functionName\": \"adminLastMinute\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request updates an existing last minute configuration or adds a new one.  \nTo be able to see at once which fields are not needed at inserting a new lm-discount I'm showing the lines in bold that are sufficient for inserting a new lm-discount.  \nFor an update ALL fields are needed, also the not-bold ones<br><br>\n\nparams:  \nobject ->  \n{  \n**&nbsp;&nbsp;int lm_id: unique lm_id of the last minute discount. Provide 0 (zero) here at inserting a new lm-discount**  \n&nbsp;&nbsp;string lm_periodType: either \"bookingPeriod\" or \"bookingCreation\" (not needed at inserting a new lm-discount)  \n**&nbsp;&nbsp;string lm_fromDate: from-date of the discount**  \n**&nbsp;&nbsp;string lm_untilDate: until-date of the discount**  \n**&nbsp;&nbsp;float lm_percDiscount: percentage value for the discount**  \n&nbsp;&nbsp;int lml_locale_id: l_id of the language that the string lml_value is translated into (not needed at inserting a new lm-discount)  \n&nbsp;&nbsp;string lml_value: translation text of the discount label (not needed at inserting a new lm-discount)  \n**&nbsp;&nbsp;int lm_nights: Number of nights a guest has to book in advance to get the discount**  \n&nbsp;&nbsp;string c_lastMinutesEnabled: optional, either 'on' or 'off'. Indicates, if last minute discounts shall be active or not in general  \n&nbsp;&nbsp;string lm_limitedDiscount: either 'on' or 'off', indicates if this is a limited last minute discount (not needed at inserting a new lm-discount)  \n}  \n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "lastMinutes.deleteLastMinute",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 7, \"appUser\" ],\n  \"className\": \"LastMinute\",\n  \"functionName\": \"deleteLastMinute\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes a last minute discount configuration from the database<br><br>\n\nparams:  \nint -> lm_id of the discount to delete  \n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "longStayDiscount.getLongStayDiscount",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"LongStayDiscount\",\n  \"functionName\": \"getLongStayDiscount\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of currently configured long-stay-discounts<br><br>\n\nparams:  \n\"appUser\" -> fixed string<br><br>\n\nreturn is an array of objects:  \n{  \n&nbsp;&nbsp;int lsd_id: unique id of the discount  \n&nbsp;&nbsp;string lsd_fromDate: period begin date of the discount  \n&nbsp;&nbsp;string lsd_untilDate: period end date of the discount  \n}"
			},
			"response": []
		},
		{
			"name": "longStayDiscount.getLongStayDiscountDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 34, \"appUser\" ],\n  \"className\": \"LongStayDiscount\",\n  \"functionName\": \"getLongStayDiscountDetail\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns details to a given longStayDiscount id<br><br>\n\nparams:  \nint -> lsd_id of the longStayDiscount  \n\"appUser\" -> fixed string<br><br>\n\nreturn value is an object:  \n{  \n&nbsp;&nbsp;int lsd_id: Same id as in the first input-parameter  \n&nbsp;&nbsp;string lsd_fromDate: period begin date of the discount  \n&nbsp;&nbsp;string lsd_untilDate: period end date of the discount  \n&nbsp;&nbsp;array of objects longStayDiscountRate:  \n&nbsp;&nbsp;{  \n&nbsp;&nbsp;&nbsp;&nbsp;int lsdr_id: unique id of the longStayDiscount-rate  \n&nbsp;&nbsp;&nbsp;&nbsp;int lsdr_longStayDiscount_id: Same id as in the first input-parameter  \n&nbsp;&nbsp;&nbsp;&nbsp;int lsdr_fromNights and lsdr_untilNights: Range of nights that this discount-rate is meant for  \n&nbsp;&nbsp;&nbsp;&nbsp;string lsdr_discountType: either \"PricePerPersonPerNight\" or \"PercOnTotal\"  \n&nbsp;&nbsp;&nbsp;&nbsp;float lsdr_value: Discount value  \n&nbsp;&nbsp;&nbsp;&nbsp;string lsdrl_value: label of this discount-rate in the given language (language_id is taken from the url-route)  \n&nbsp;&nbsp;&nbsp;&nbsp;string nights: this is just a result of concatenating lsdr_fromNights + \" - \" + lsdr_untilNights. Used to make the life of the client easier...  \n&nbsp;&nbsp;}  \n}"
			},
			"response": []
		},
		{
			"name": "longStayDiscount.getLocale",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"lsdrl_locale_id\":\"4\",\"lsdr_id\":\"62\"}, \"appUser\" ],\n  \"className\": \"LongStayDiscount\",\n  \"functionName\": \"getLocale\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the configured translation of a longStayDiscount-rate<br><br>\n\nparams:  \nobject ->  \n{  \n&nbsp;&nbsp;int lsdrl_locale_id: l_id of the language that the translations is wanted in  \n&nbsp;&nbsp;int lsdr_id: lsdr_id of the longStayDiscountRate  \n}  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array with only 1 string element that shows the translation text"
			},
			"response": []
		},
		{
			"name": "longStayDiscount.adminLongStayDiscount",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"lsd_id\": \"40\",\n\t\"lsd_fromDate\": \"2018-07-23\",\n\t\"lsd_untilDate\": \"2018-07-25\"\n}, \"appUser\" ],\n  \"className\": \"LongStayDiscount\",\n  \"functionName\": \"adminLongStayDiscount\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request either inserts a new long-discount period or updates an existing one<br><br>\n\nparams:  \nobject ->  \n{  \n&nbsp;&nbsp;int lsd_id: unique id of a longStayDiscount period. Provide 0 (zero) here, if a new discountPeriod shall get inserted  \n&nbsp;&nbsp;string lsd_fromDate and lsd_untilDate: period of the discount in format YYYY-MM-DD  \n}  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array containing only 1 element that is the lsd_id of the discount (so if a new one was inserted it will contain the lsd_id of the new discount, else the lsd_id that was already provided as first parameter)"
			},
			"response": []
		},
		{
			"name": "longStayDiscount.deletelongStayDiscount",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 41, \"appUser\" ],\n  \"className\": \"LongStayDiscount\",\n  \"functionName\": \"deletelongStayDiscount\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes a longstay discount configuration from the database<br><br>\n\nparams:  \nint -> lsd_id of the longStayDiscount  \n\"appUser\" -> fixed string<br><br>\n\nreturn value is irrelevant"
			},
			"response": []
		},
		{
			"name": "longStayDiscount.adminLongStayDiscountRate",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"lsdr_longStayDiscount_id\": \"37\",\n\t\"lsdr_fromNights\": 35,\n\t\"lsdr_untilNights\": 37,\n\t\"lsdr_discountType\": \"PricePerPersonPerNight\",\n\t\"lsdr_value\": \"14.00\",\n\t\"lsdr_id\": \"66\",\n\t\"lsdrl_value\": \"My own Long Stay Discount rate\",\n\t\"lsdrl_locale_id\": \"1\"\n}\n, \"appUser\" ],\n  \"className\": \"LongStayDiscount\",\n  \"functionName\": \"adminLongStayDiscountRate\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request inserts new longStayDiscountRate into the database or updates an existing one  \nI made parameters bold that are only needed at updating an existing rate<br><br>\n\nparams:  \nobject ->  \n{  \n&nbsp;&nbsp;int lsdr_longStayDiscount_id: the lsd_id of the longStayDiscount period parent record  \n&nbsp;&nbsp;int lsdr_fromNights and lsdr_untilNights: range of nights that the discount rate is meant for  \n&nbsp;&nbsp;string lsdr_discountType: either \"PricePerPersonPerNight\" or \"PercOnTotal\"  \n&nbsp;&nbsp;float lsdr_value: value of the discount rate  \n&nbsp;&nbsp;int lsdr_id: 0 (zero) if a new discount rate shall be inserted or an existing lsdr_id for updating an existing rate  \n&nbsp;&nbsp;**string lsdrl_value: translated Designation of a discount rate in the language provided in lsdrl_locale_id. This parameter is only needed, if this is for an update of an existing rate**  \n&nbsp;&nbsp;**int lsdrl_locale_id: language id of the language that lsdrl_value is provided in. Only needed when updating an existing rate**  \n}  \n\"appUser\" -> fixed string<br><br>\n\nReturn value is an array containing only 1 element, the lsdr_id of the longStayDiscount Rate"
			},
			"response": []
		},
		{
			"name": "longStayDiscount.deletelongStayDiscountRate",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 66, \"appUser\" ],\n  \"className\": \"LongStayDiscount\",\n  \"functionName\": \"deletelongStayDiscountRate\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes a longStayDiscountRate from the database<br><br>\n\nparams:  \nint -> unique lsdr_id of the longStayDiscountRate  \n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "earlyBirdDiscount.getEarlyBirdDiscount",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"EarlyBirdDiscount\",\n  \"functionName\": \"getEarlyBirdDiscount\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "earlyBirdDiscount.getEarlyBirdDiscountDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"ebd_id\":\"20\",\"ebdl_locale_id\":\"1\"}, \"appUser\" ],\n  \"className\": \"EarlyBirdDiscount\",\n  \"functionName\": \"getEarlyBirdDiscountDetail\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns details for a given earlyBirdDiscount configuration<br><br>\n\nparams:  \nobject ->  \n{  \n&nbsp;&nbsp;int ebd_id: unique id of the earlyBirdDiscount  \n&nbsp;&nbsp;int ebdl_locale_id: optional parameter: the request returns a field ebdl_value that contains the translation name for the given earlyBirdDiscount config. It will return this translation in the language specified by ebdl_locale_id. If ebdl_locale_id is not specified, then the language that's always provided in the URL-route will be used  \n}  \n\"appUser\" -> fixed string<br><br>\n\nreturn object:  \nint ebd_id: unique id of the earlyBirdDiscount configuration (actually same value as input parameter 1)  \nstring ebd_fromDate and ebd_untilDate: Range that this earlyBirdDiscount is meant for, date format is YYYY-MM-DD. Time-part is irrelevant, it's always 00:00:00  \nstring ebd_discountType: Type of the discount, either \"PercOnTotal\", \"PricePerPersonPerNight\" or \"perDayBeforeArrival\"  \nint ebd_daysBeforeArrival: How many days in advance does the guest have to book to get the discount. Only relevant if ebd_type == 'xdays'    \nfloat ebd_value: Value of the discount  \nint ebd_nightsFrom and ebd_nightsUntil: Range of nights that this discount is meant for.  \nstring ebd_fixedDate: date in format YYYY-MM-DD that specifies, until which date the discount is valid. Only relevant if ebd_type == 'fixeddate'  \nstring ebd_type: either \"fixeddate\" or \"xdays\". Determines if discount is given at ebd_fixedDate or ebd_daysBeforeArrival criterion  \nstring ebdl_value: translated label of the discount. Either in the language specified by ebdl_locale_id input parameter or if that is not given by the language id specified in the URL route"
			},
			"response": []
		},
		{
			"name": "portal.getPortals",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [  ],\n  \"className\": \"PortalAdmin\",\n  \"functionName\": \"getPortals\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of all configured portals.  \nNo input parameters needed.  \n<br>\nReturn is an array of objects. It is explained in trello"
			},
			"response": []
		},
		{
			"name": "portal.getPortalDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1 ],\n  \"className\": \"PortalAdmin\",\n  \"functionName\": \"getPortalDetail\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request provides details about a certain portal<br><br>\n\nparams:  \nint -> `p_id` of the portal<br><br>\n\nReturn is explained in Trello"
			},
			"response": []
		},
		{
			"name": "portal.checkSerialNo",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1 ],\n  \"className\": \"PortalAdmin\",\n  \"functionName\": \"checkSerialNo\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a unique portal-serial-number that is not already in use by another portal  \nNo input parameters needed<br><br>\n\nReturn is an array that contains only 1 string element which is the serial number"
			},
			"response": []
		},
		{
			"name": "portal.adminPortal",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"p_id\": 6,\n\t\"p_name\": \"Zillertal\",\n\t\"p_accountNo\": \"000006\",\n\t\"p_serialNo\": \"1674-7537-5592\",\n\t\"p_active\": \"on\",\n\t\"p_ip\": \"82.198.87.1\",\n\t\"p_cssFile\": \"asdfasdfasdf\",\n\t\"p_ciName\": null,\n\t\"p_multiple\": \"off\",\n\t\"p_showInWizard\": \"off\"\n}\n ],\n  \"className\": \"PortalAdmin\",\n  \"functionName\": \"adminPortal\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves details about a portal<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;int p_id: Unique id of the portal  \n&nbsp;&nbsp;string p_name: Portal Name  \n&nbsp;&nbsp;string p_accountNo: Account No  \n&nbsp;&nbsp;string p_serialNo: Serial No  \n&nbsp;&nbsp;string p_active: Active checkbox, either \"on\" or \"off\"  \n&nbsp;&nbsp;string p_ip: IP  \n&nbsp;&nbsp;string p_cssFile: CSS File  \n&nbsp;&nbsp;string p_ciName: CI Name  \n&nbsp;&nbsp;string p_multiple: Multiple checkbox, either \"on\" or \"off\"  \n&nbsp;&nbsp;string p_showInWizard: Show Portal in Wizard checkbox, either \"on\" or \"off\"  \n}<br><br>\n\nReturn is irrelevant"
			},
			"response": []
		},
		{
			"name": "portal.getCustomersForPortal",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 6 ],\n  \"className\": \"PortalAdmin\",\n  \"functionName\": \"getCustomersForPortal\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of easybooking-customers that are currently linked to a given portal<br><br>\n\nparams:  \nint -> `p_id` of the portal<br>\n\nReturn is an array of objects (or an empty array) that's explained in trello"
			},
			"response": []
		},
		{
			"name": "portal.searchCustomers",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"demo\", 6 ],\n  \"className\": \"PortalAdmin\",\n  \"functionName\": \"searchCustomers\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request searches for customers that could can be linked to the given portal<br><br>\n\nparams:  \nstring -> searchtext that filters the list of customers that will get returned  \nint -> `p_id` of the portal<br><br>\n\nReturn is an array of objects that are explained in trello"
			},
			"response": []
		},
		{
			"name": "portal.addPortalCustomer",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 3, 6 ],\n  \"className\": \"PortalAdmin\",\n  \"functionName\": \"addPortalCustomer\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request links a given customer to a certain portal<br><br>\n\nparams:  \nint -> `c_id` of the customer to link to the portal  \nint -> `p_id` of the portal that shall get linked<br><br>\n\nReturn is irrelevant."
			},
			"response": []
		},
		{
			"name": "portal.deletePortalCustomer",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 510 ],\n  \"className\": \"PortalAdmin\",\n  \"functionName\": \"deletePortalCustomer\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request unlinks a certain customer from a portal<br><br>\n\nparams:  \nint -> `pc_id`, unique id of the portal-customer-relationship<br><br>\n\nReturn is irrelevant"
			},
			"response": []
		},
		{
			"name": "portal.getSpecialOfferCategories",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ ],\n  \"className\": \"PortalAdmin\",\n  \"functionName\": \"getSpecialOfferCategories\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of Portal Categories. No input parameters are needed  \nReturn is an array of objects that is explained in trello<br><br>"
			},
			"response": []
		},
		{
			"name": "portal.adminPortalSpecialOfferCategory",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \r\n  \"params\": [ [{\r\n\t\t\"psoc_portal_id\": 6,\r\n\t\t\"psoc_specialOfferCategory_id\": 12,\r\n\t\t\"psoc_active\": \"on\"\r\n\t}, {\r\n\t\t\"psoc_portal_id\": 6,\r\n\t\t\"psoc_specialOfferCategory_id\": 7,\r\n\t\t\"psoc_active\": \"off\"\r\n\t}, {\r\n\t\t\"psoc_portal_id\": 6,\r\n\t\t\"psoc_specialOfferCategory_id\": 6,\r\n\t\t\"psoc_active\": \"on\"\r\n\t}, {\r\n\t\t\"psoc_portal_id\": 6,\r\n\t\t\"psoc_specialOfferCategory_id\": 2,\r\n\t\t\"psoc_active\": \"on\"\r\n\t}, {\r\n\t\t\"psoc_portal_id\": 6,\r\n\t\t\"psoc_specialOfferCategory_id\": 3,\r\n\t\t\"psoc_active\": \"off\"\r\n\t}, {\r\n\t\t\"psoc_portal_id\": 6,\r\n\t\t\"psoc_specialOfferCategory_id\": 10,\r\n\t\t\"psoc_active\": \"off\"\r\n\t}, {\r\n\t\t\"psoc_portal_id\": 6,\r\n\t\t\"psoc_specialOfferCategory_id\": 8,\r\n\t\t\"psoc_active\": \"off\"\r\n\t}, {\r\n\t\t\"psoc_portal_id\": 6,\r\n\t\t\"psoc_specialOfferCategory_id\": 1,\r\n\t\t\"psoc_active\": \"off\"\r\n\t}, {\r\n\t\t\"psoc_portal_id\": 6,\r\n\t\t\"psoc_specialOfferCategory_id\": 5,\r\n\t\t\"psoc_active\": \"off\"\r\n\t}, {\r\n\t\t\"psoc_portal_id\": 6,\r\n\t\t\"psoc_specialOfferCategory_id\": 11,\r\n\t\t\"psoc_active\": \"off\"\r\n\t}\r\n]\r\n\r\n],\r\n  \"className\": \"PortalAdmin\",\r\n  \"functionName\": \"adminPortalSpecialOfferCategory\"\r\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves info about which PackageCategories are available for a certain portal<br><br>\n\nparams:  \narray of objects:  \n{<br>\n&nbsp;&nbsp;int psoc_portal_id: `p_id` of the portal  \n&nbsp;&nbsp;int psoc_specialOfferCategory_id: `soc_id` of the category (as returned by `portal.getSpecialOfferCategories`)  <br>\n&nbsp;&nbsp;string psoc_active: Either \"on\" or \"off\", indicates if this category is checked or not  \n}<br><br>\n\nReturn is irrelevant"
			},
			"response": []
		},
		{
			"name": "portal.getSpecialOfferCategoriesObjects",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ ],\n  \"className\": \"PortalAdmin\",\n  \"functionName\": \"getSpecialOfferCategoriesObjects\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the list of possible special-offer-categories with translated names.  \nNo input parameters needed.  \nReturn is explained in trello"
			},
			"response": []
		},
		{
			"name": "portal.getPortalSpecialOfferCategories",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 6 ],\n  \"className\": \"PortalAdmin\",\n  \"functionName\": \"getPortalSpecialOfferCategories\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "portal.UploadCategoryImage",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "dbName",
							"value": "srv0010002",
							"type": "text"
						},
						{
							"key": "imageType",
							"value": "psoc_image",
							"type": "text"
						},
						{
							"key": "timeStamp",
							"value": "201991113643533",
							"type": "text"
						},
						{
							"key": "Filedata",
							"type": "file",
							"src": "/D:/Bilder/mushroomTea.jpg"
						},
						{
							"key": "psoc_portal_id",
							"value": "6",
							"type": "text"
						},
						{
							"key": "psoc_specialOfferCategory_id",
							"value": "2",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://{{SERVERIP}}/wo/Services/com/eBook/imageUpload/ImageUpload.php",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"wo",
						"Services",
						"com",
						"eBook",
						"imageUpload",
						"ImageUpload.php"
					]
				},
				"description": "This request uploads a portal package-category image<br><br>\n\nparams:  \ndbName -> `companyDetails.dbName`  \nimageType -> \"psoc_image\"  \ntimeStamp -> Put in the current time in format YYYYMMDD[hour][minute][seconds][milliseconds]  \nFiledata -> the file to upload\npsoc_portal_id -> `p_id` of the portal  \npsoc_specialOfferCategory_id -> `soc_id` of the package-category"
			},
			"response": []
		},
		{
			"name": "portal.deletePortalSpecialOfferCategoryImage",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 6, 2 ],\n  \"className\": \"PortalAdmin\",\n  \"functionName\": \"deletePortalSpecialOfferCategoryImage\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request unlinks an image that's linked to a package-category<br><br>\n\nparams:  \nint -> `p_id` of the image  \nint -> `soc_id` of the special-offer-category<br><br>\n\nReturn of this request is irrelevant"
			},
			"response": []
		},
		{
			"name": "portal.newPortal",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"p_name\": \"Some new portal 2\",\n\t\"p_accountNo\": \"123456\",\n\t\"p_serialNo\": \"6937-2027-4882\",\n\t\"p_active\": \"off\",\n\t\"p_ip\": \"1.2.3.4\",\n\t\"p_cssFile\": null,\n\t\"p_ciName\": null,\n\t\"p_multiple\": \"off\",\n\t\"p_showInWizard\": \"off\"\n}\n ],\n  \"className\": \"PortalAdmin\",\n  \"functionName\": \"newPortal\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request inserts a new portal into the configuration<br><br>\r\n\r\nparams:  \r\n{<br>\r\n&nbsp;&nbsp;string p_name: Portal Name  \r\n&nbsp;&nbsp;string p_accountNo: Account No  \r\n&nbsp;&nbsp;string p_serialNo: Serial No  \r\n&nbsp;&nbsp;string p_active: Active state, either \"on\" or \"off\"  \r\n&nbsp;&nbsp;string p_ip: IP  \r\n&nbsp;&nbsp;string p_cssFile: CSS File  \r\n&nbsp;&nbsp;string p_ciName: CI Name  \r\n&nbsp;&nbsp;string p_multiple: Multiple state, either \"on\" or \"off\" (use \"off\" - there's no checkbox in the UIs NewPortal-Modal for this)  \r\n&nbsp;&nbsp;string p_showInWizard: Show Portal in Wizard state, either \"on\" or \"off\"  \r\n}<br><br>\r\n\r\nReturn is an array with only 1 int element. This is the `p_id` of the newly created portal"
			},
			"response": []
		},
		{
			"name": "portal.deletePortal",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 29 ],\n  \"className\": \"PortalAdmin\",\n  \"functionName\": \"deletePortal\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes a portal from the configuration<br><br>\n\nparams:  \nint -> `p_id` of the portal<br><br>\n\nReturn is irrelevant"
			},
			"response": []
		},
		{
			"name": "portal.getSOCTranslation",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 6 ],\n  \"className\": \"PortalAdmin\",\n  \"functionName\": \"getSOCTranslation\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns all existing translations for a given category<br><br>\n\nparams:  \nint -> `soc_id` of the category<br><br>\n\nReturn is an array of objects that's explained in trello"
			},
			"response": []
		},
		{
			"name": "portal.deletePortalCategory",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 8 ],\n  \"className\": \"PortalAdmin\",\n  \"functionName\": \"deletePortalCategory\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes a portal category<br><br>\n\nparams:  \nint -> `soc_id` of the category<br><br>\n\nReturn is irrelevant"
			},
			"response": []
		},
		{
			"name": "portal.adminSOCLocale",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"soc_id\": \"3\",\n\t\"adminMode\": \"U\",\n\t\"soc_ident\": \"crossCountrySki\",\n\t\"socls\": [{\n\t\t\t\"socl_locale_id\": \"1\",\n\t\t\t\"socl_name\": \"cross country ski\"\n\t\t}, {\n\t\t\t\"socl_locale_id\": \"2\",\n\t\t\t\"socl_name\": \"Langlauf\"\n\t\t}, {\n\t\t\t\"socl_locale_id\": \"3\",\n\t\t\t\"socl_name\": \"cross country ski\"\n\t\t}, {\n\t\t\t\"socl_locale_id\": \"4\",\n\t\t\t\"socl_name\": \"cross country ski\"\n\t\t}, {\n\t\t\t\"socl_locale_id\": \"5\",\n\t\t\t\"socl_name\": \"cross country ski\"\n\t\t}\n\t]\n}\n ],\n  \"className\": \"PortalAdmin\",\n  \"functionName\": \"adminSOCLocale\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request updates data of an existing portal category or inserts a new one<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;int soc_id: `soc_id` of the category. Use 0 if this is a new category  \n&nbsp;&nbsp;string adminMode: Use \"I\" when inserting a new category and \"U\" for updating an existing one  \n&nbsp;&nbsp;string soc_ident: The identifier of this category  \n&nbsp;&nbsp;array of objects socls:  \n&nbsp;&nbsp;{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;int socl_locale_id: `l_id` of the language  \n&nbsp;&nbsp;&nbsp;&nbsp;string socl_name: Translation value  \n&nbsp;&nbsp;}<br>\n}<br><br>\n\nReturn is irrelevant"
			},
			"response": []
		},
		{
			"name": "admin.validateAll",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"DBValidation\",\n  \"functionName\": \"validateAll\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request goes through some basic configuration data of the given hotel-customer and validates it<br><br>\n\nparams:  \n\"appUser\" -> fixed string<br><br>\n\nReturn is explained in trello"
			},
			"response": []
		},
		{
			"name": "admin.getRoomPriceErrors",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"DBValidation\",\n  \"functionName\": \"getRoomPriceErrors\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request provides roomnumber and season-name of rooms where prices are missing in the db-configuration<br><br>\n\nparams:  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array that's explained in trello"
			},
			"response": []
		},
		{
			"name": "createMultiUser",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"username\": \"myuser\",\n\t\"password\": \"abc123\",\n\t\"dbs\": \"srv0010002,srv0010003\"\n}\n ],\n  \"className\": \"CustomerAdmin\",\n  \"functionName\": \"createMultiUser\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request creates a multiuser by using the provided input data<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;string username: Username  \n&nbsp;&nbsp;string password: Passwort  \n&nbsp;&nbsp;string dbs: DBs  \n}<br><br>\n\nReturn is an object:  \n{<br>\n&nbsp;&nbsp;string status: Either \"OK\" or \"ERROR\"  \n&nbsp;&nbsp;string message: The message to display in the UI after that request returns  \n}"
			},
			"response": []
		},
		{
			"name": "Portal.savePortalCustomerDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"pc_id\": 22,\n\t\"pc_remoteId\": \"234\",\n\t\"pc_active\": \"on\",\n\t\"pc_comment\": \"Some comment\"\n}\n ],\n  \"className\": \"PortalAdmin\",\n  \"functionName\": \"savePortalCustomerDetail\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves details about a customer-portal relationship.<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;int pc_id: `pc_id` of the relationship (as returned by `portal.getCustomersForPortal`)  <br>\n&nbsp;&nbsp;string pc_remoteId: Remote ID  \n&nbsp;&nbsp;string pc_active: Active state, either \"on\" or \"off\"  \n&nbsp;&nbsp;string pc_comment: Content of the comment textarea  \n}<br><br>\n\nReturn is irrelevant"
			},
			"response": []
		},
		{
			"name": "getCityFromPostcode",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1108, 81, \"srv0010002\" ],\n  \"className\": \"ILogCalendar\",\n  \"functionName\": \"getCityFromPostcode\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the citiy name to a given postcode.<br><br>\n\nparams:  \nint -> postcode  \nint -> country_id. Possible values are 81 (Germany), 15 (Austria), 155 (Netherlands), 213 (Switzerland)  \nstring -> dbName = `companyDetails.dbName`<br><br>\n\nReturn is an array of objects. It's possible, that multiple cities are returned for 1 postcode (for example postcode = 1108 and country_id = 81):  \n{<br>\n&nbsp;&nbsp;int pc_id: unique id of the postcode  \n&nbsp;&nbsp;int postcode: the postcode (actually already contained in the input parameter)  \n&nbsp;&nbsp;string pc_city: The city name  \n}"
			},
			"response": []
		},
		{
			"name": "sendAliveSignal",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1139948, \"srv0010002\" ],\n  \"className\": \"AppClass\",\n  \"functionName\": \"sendAliveSignal\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request should be sent in regular intervals from the client to keep track about how long users have the client open.<br><br>\n\nparams:  \nint -> the id of the current session as it's returned by request `logBackendEvent`  \nstring -> `companyDetails.dbName`<br><br>\n\nReturn of this request is irrelevant"
			},
			"response": []
		},
		{
			"name": "chargingScheme.setLinkedCategories",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 33, \n  [   \n    {\n\t\t\"checked\": \"off\",\n\t\t\"eg_id\": \"63\"\n\t}, {\n\t\t\"checked\": \"on\",\n\t\t\"eg_id\": \"49\"\n\t}, {\n\t\t\"checked\": \"on\",\n\t\t\"eg_id\": \"45\"\n\t}, {\n\t\t\"checked\": \"on\",\n\t\t\"eg_id\": \"44\"\n\t}, {\n\t\t\"checked\": \"on\",\n\t\t\"eg_id\": \"7\"\n\t}, {\n\t\t\"checked\": \"on\",\n\t\t\"eg_id\": \"5\"\n\t}, {\n\t\t\"checked\": \"on\",\n\t\t\"eg_id\": \"6\"\n\t}, {\n\t\t\"checked\": \"on\",\n\t\t\"eg_id\": \"1\"\n\t}, {\n\t\t\"checked\": \"on\",\n\t\t\"eg_id\": \"56\"\n\t}, {\n\t\t\"checked\": \"on\",\n\t\t\"eg_id\": \"53\"\n\t}, {\n\t\t\"checked\": \"on\",\n\t\t\"eg_id\": \"52\"\n\t}\n],\n\"appUser\" ],\n  \"className\": \"ChargingScheme\",\n  \"functionName\": \"setLinkedCategories\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves to the DB which room categories a given chargingScheme charge shall be linked to<br><br>\n\nparams:  \nint -> acs_id of the chargingScheme charge  \narray of objects ->  \n{<br>\n&nbsp;&nbsp;string checked: Either 'on' or 'off'. Indicates, if the given chargingScheme charge needs to be linked to the room-category identified by eg_id  \n&nbsp;&nbsp;int eg_id: Unique id of the room-category  \n}<br><br>\n\nReturn of this function is irrelevant, it's always an empty array"
			},
			"response": []
		},
		{
			"name": "chargingScheme.adminActiveChargingScheme_type1",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"action\": \"update\",\n\t\"acs_name\": \"Wochenendpreis\",\n\t\"acs_param001\": \"2017-11-01\",\n\t\"acs_param002\": \"2018-07-04\",\n\t\"acs_param003\": \"PricePerPersonPerNight\",\n\t\"acs_param004\": \"mo:18:150:1.00°tu:18:150:2.00°we:18:150:3.00°th:18:150:4.00°fr:18:150:10.00;3:6:5.00;7:10:7.00°sa:18:150:5.00°su:18:150:5.00\",\n\t\"acs_param005\": \"off\",\n\t\"acs_id\": \"33\",\n\t\"toolTips\": [{\n\t\t\t\"acsl_locale_id\": \"1\",\n\t\t\t\"acsl_toolTip\": \"Weekend Price\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"2\",\n\t\t\t\"acsl_toolTip\": \"Wochenendpreis\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"3\",\n\t\t\t\"acsl_toolTip\": \"Wochenendpreis\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"4\",\n\t\t\t\"acsl_toolTip\": \"Wochenendpreis\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"5\",\n\t\t\t\"acsl_toolTip\": \"Wochenendpreis\"\n\t\t}\n\t]\n},\n\"appUser\" ],\n  \"className\": \"ChargingScheme\",\n  \"functionName\": \"adminActiveChargingScheme\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves details for a chargingScheme charge of type 1 = \"ExtraChargeOverDayOfWeekPeriod\"<br><br>\n\nparams:  \nobject with details of the configuration:  \n{<br>\n&nbsp;&nbsp;string action: Either 'update' for modifying a chargingScheme charge config or 'delete' for deleting one. In case of 'delete', only the acs_id input parameter is needed  \n&nbsp;&nbsp;string acs_name: Administrative name of this chargingScheme charge  \n&nbsp;&nbsp;string acs_param001: Starting date in format YYYY-MM-DD  \n&nbsp;&nbsp;string acs_param002: End Date in format YYYY-MM-DD  \n&nbsp;&nbsp;string acs_param003: The Charge Type, either \"PricePerPersonPerNight\" or \"PercOnTotal\"  \n&nbsp;&nbsp;string acs_param004: Encoded pricing configuration per weekday, each weekday-config delimited by ° character  \n&nbsp;&nbsp;string acs_param005: Either 'on' or 'off'. Indicates if the chargingScheme charge is \"For Period\" or not  \n&nbsp;&nbsp;int acs_id: unique id of the chargingScheme charge  \n&nbsp;&nbsp;array toolTips: array of objects:  \n&nbsp;&nbsp;{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;int acsl_locale_id: id of the language  \n&nbsp;&nbsp;&nbsp;&nbsp;string acsl_toolTip: name of the chargingScheme charge in the given language  \n&nbsp;&nbsp;}<br>\n}  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array with only 1 int element that is the unique id (acs_id) of the chargingScheme charge.  \nIn case of an update this will be the same as provided in the acs_id input parameter.  \nIn case of delete 0 will get returned"
			},
			"response": []
		},
		{
			"name": "chargingScheme.newActiveChargingScheme_type1",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"acs_name\": \"New charge over day of week period2\",\n\t\"acs_chargingScheme_id\": \"2\",\n\t\"acs_param001\": \"2019-11-27\",\n\t\"acs_param002\": \"2019-12-31\",\n\t\"acs_param003\": \"PricePerPersonPerNight\",\n\t\"acs_param004\": \"fr:18:150:10.00°sa:18:150:5.00;1:5:3.00\",\n\t\"acs_param005\": \"off\",\n\t\"toolTips\": [{\n\t\t\t\"acsl_locale_id\": \"1\",\n\t\t\t\"acsl_toolTip\": \"english name\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"2\",\n\t\t\t\"acsl_toolTip\": \"german name\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"3\",\n\t\t\t\"acsl_toolTip\": \"\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"4\",\n\t\t\t\"acsl_toolTip\": \"\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"5\",\n\t\t\t\"acsl_toolTip\": \"\"\n\t\t}\n\t]\n},\n\"appUser\" ],\n  \"className\": \"ChargingScheme\",\n  \"functionName\": \"insertCS\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request inserts a new chargingScheme charge of type 1 = \"ExtraChargeOverDayOfWeekPeriod\"  \n(Remark: The id in the database for this type is cs_id=2. But in the UI dropdowns it comes first, that's why it is called \"Type1\")  \nThe input object is almost the same as for chargingScheme.adminActiveChargingScheme_type1 but there are little differences:  \nacs_chargingScheme_id has to be provided additionaly  \nacs_id and action don't need to be provided here<br><br>\n\nparams:  \nobject with details of the configuration:  \n{<br>\n&nbsp;&nbsp;string acs_name: Administrative name of this chargingScheme charge  \n&nbsp;&nbsp;int acs_chargingScheme_id: cs_id, unique id of the type of the chargingScheme. Is \"2\" for this type (ExtraChargeOverDayOfWeekPeriod)  \n&nbsp;&nbsp;string acs_param001: Starting date in format YYYY-MM-DD  \n&nbsp;&nbsp;string acs_param002: End Date in format YYYY-MM-DD  \n&nbsp;&nbsp;string acs_param003: The Charge Type, either \"PricePerPersonPerNight\" or \"PercOnTotal\"  \n&nbsp;&nbsp;string acs_param004: Encoded pricing configuration per weekday, each weekday-config delimited by ° character  \n&nbsp;&nbsp;string acs_param005: Either 'on' or 'off'. Indicates if the chargingScheme charge is \"For Period\" or not  \n&nbsp;&nbsp;array toolTips: array of objects:  \n&nbsp;&nbsp;{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;int acsl_locale_id: id of the language  \n&nbsp;&nbsp;&nbsp;&nbsp;string acsl_toolTip: name of the chargingScheme charge in the given language  \n&nbsp;&nbsp;}<br>\n}  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array with only 1 int element that is the unique id (acs_id) of the newly inserted chargingScheme charge."
			},
			"response": []
		},
		{
			"name": "chargingScheme.deleteChargingSchemeCharge",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"action\": \"delete\",\n\t\"acs_id\": \"48\"\n},\n\"appUser\" ],\n  \"className\": \"ChargingScheme\",\n  \"functionName\": \"adminActiveChargingScheme\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes a chargingScheme charge of any type from the database<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;string action: Put in \"delete\"  \n&nbsp;&nbsp;int acs_id: Unique id of the charging Scheme charge to delete  \n}<br>\n\"appUser\" -> fixed string<br><br>\n\nReturn of this request is irrelevant. It's always returning an array with one string element that is \"0\""
			},
			"response": []
		},
		{
			"name": "chargingScheme.copyActiveChargingScheme",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 33, \"appUser\" ],\n  \"className\": \"ChargingScheme\",\n  \"functionName\": \"copyActiveChargingScheme\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request creates a copy of an existing chargingScheme charge<br><br>\n\nparams:  \nint -> acs_id of the chargingScheme charge to create a copy from  \n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "chargingScheme.adminActiveChargingScheme_type2",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"action\": \"update\",\n\t\"acs_name\": \"1. Mai Wochenende\",\n\t\"acs_param001\": \"2018-04-18\",\n\t\"acs_param002\": \"2018-05-20\",\n\t\"acs_param003\": \"PricePerPersonPerNight\",\n\t\"acs_param004\": \"18:150:30.00;1:5:10.00\",\n\t\"acs_param005\": \"off\",\n\t\"acs_id\": \"35\",\n\t\"toolTips\": [{\n\t\t\t\"acsl_locale_id\": \"1\",\n\t\t\t\"acsl_toolTip\": \"1. Mai Wochenende\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"2\",\n\t\t\t\"acsl_toolTip\": \"1. Mai Wochenende\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"3\",\n\t\t\t\"acsl_toolTip\": \"1. Mai Wochenende\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"4\",\n\t\t\t\"acsl_toolTip\": \"1. Mai Wochenende\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"5\",\n\t\t\t\"acsl_toolTip\": \"1. Mai Wochenende\"\n\t\t}\n\t]\n}\n,\n\"appUser\" ],\n  \"className\": \"ChargingScheme\",\n  \"functionName\": \"adminActiveChargingScheme\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves details for a chargingScheme charge of type 2 = \"ExtraChargeOverPeriod\"  \nAll parameters work the same as for chargingScheme.adminActiveChargingScheme_type1 with these exceptions:  \n1) acs_param004 is encoded a bit differently  \n2) acs_param005 is set to 'off' fixed<br><br>\n\nparams:  \nobject with details of the configuration:  \n{<br>\n&nbsp;&nbsp;string action: Either 'update' for modifying a chargingScheme charge config or 'delete' for deleting one. In case of 'delete', only the acs_id input parameter is needed  \n&nbsp;&nbsp;string acs_name: Administrative name of this chargingScheme charge  \n&nbsp;&nbsp;string acs_param001: Starting date in format YYYY-MM-DD  \n&nbsp;&nbsp;string acs_param002: End Date in format YYYY-MM-DD  \n&nbsp;&nbsp;string acs_param003: The Charge Type, either \"PricePerPersonPerNight\" or \"PercOnTotal\"  \n&nbsp;&nbsp;string acs_param004: Encoded pricing configuration per age-group. Each age-group delimitted by ; character  \n&nbsp;&nbsp;string acs_param005: Use 'off' fixed  \n&nbsp;&nbsp;int acs_id: unique id of the chargingScheme charge  \n&nbsp;&nbsp;array toolTips: array of objects:  \n&nbsp;&nbsp;{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;int acsl_locale_id: id of the language  \n&nbsp;&nbsp;&nbsp;&nbsp;string acsl_toolTip: name of the chargingScheme charge in the given language  \n&nbsp;&nbsp;}<br>\n}  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array with only 1 int element that is the unique id (acs_id) of the chargingScheme charge.  \nIn case of an update this will be the same as provided in the acs_id input parameter.  \nIn case of delete 0 will get returned"
			},
			"response": []
		},
		{
			"name": "chargingScheme.newActiveChargingScheme_type2",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"acs_name\": \"New extra charge over period\",\n\t\"acs_chargingScheme_id\": \"1\",\n\t\"acs_param001\": \"2019-11-01\",\n\t\"acs_param002\": \"2019-12-31\",\n\t\"acs_param003\": \"PercOnTotal\",\n\t\"acs_param004\": \"18:150:12.00;1:5:4.00\",\n\t\"acs_param005\": \"off\",\n\t\"toolTips\": [{\n\t\t\t\"acsl_locale_id\": \"1\",\n\t\t\t\"acsl_toolTip\": \"New extra charge over period english\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"2\",\n\t\t\t\"acsl_toolTip\": \"New extra charge over period german\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"3\",\n\t\t\t\"acsl_toolTip\": \"\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"4\",\n\t\t\t\"acsl_toolTip\": \"\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"5\",\n\t\t\t\"acsl_toolTip\": \"\"\n\t\t}\n\t]\n},\n\"appUser\" ],\n  \"className\": \"ChargingScheme\",\n  \"functionName\": \"insertCS\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request inserts a new chargingScheme charge of type 2 = \"ExtraChargeOverPeriod\"  \nIt's working analog to chargingScheme.newActiveChargingScheme_type1:  \nThe input object is almost the same as for chargingScheme.adminActiveChargingScheme_type2 but there are little differences:  \nacs_chargingScheme_id has to be provided additionaly  \nacs_id and action don't need to be provided here<br><br>\n\nparams:  \nobject with details of the configuration:  \n{<br>\n&nbsp;&nbsp;string acs_name: Administrative name of this chargingScheme charge  \n&nbsp;&nbsp;int acs_chargingScheme_id: cs_id, unique id of the type of the chargingScheme. Is \"1\" for this type (ExtraChargeOverPeriod)  \n&nbsp;&nbsp;string acs_param001: Starting date in format YYYY-MM-DD  \n&nbsp;&nbsp;string acs_param002: End Date in format YYYY-MM-DD  \n&nbsp;&nbsp;string acs_param003: The Charge Type, either \"PricePerPersonPerNight\" or \"PercOnTotal\"  \n&nbsp;&nbsp;string acs_param004: Encoded pricing configuration per age-group. Each age-group delimitted by ; character  \n&nbsp;&nbsp;string acs_param005: Use 'off' fixed  \n&nbsp;&nbsp;array toolTips: array of objects:  \n&nbsp;&nbsp;{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;int acsl_locale_id: id of the language  \n&nbsp;&nbsp;&nbsp;&nbsp;string acsl_toolTip: name of the chargingScheme charge in the given language  \n&nbsp;&nbsp;}<br>\n}  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array with only 1 int element that is the unique id (acs_id) of the newly inserted chargingScheme charge."
			},
			"response": []
		},
		{
			"name": "chargingScheme.adminActiveChargingScheme_type3",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"action\": \"update\",\n\t\"acs_name\": \"Abschlag\",\n\t\"acs_param001\": \"2019-03-28\",\n\t\"acs_param002\": \"2019-04-25\",\n\t\"acs_param003\": \"PricePerPerson\",\n\t\"acs_param004\": \"63:18:150:12.00\\u00b049:18:150:-10.00;1:5:-5.00\\u00b07:18:150:-20.00;1:7:40.00\",\n\t\"acs_param005\": 3,\n\t\"acs_id\": \"42\",\n\t\"toolTips\": [{\n\t\t\t\"acsl_locale_id\": \"1\",\n\t\t\t\"acsl_toolTip\": \"Abschlag\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"2\",\n\t\t\t\"acsl_toolTip\": \"Abschlag\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"3\",\n\t\t\t\"acsl_toolTip\": \"Abschlag\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"4\",\n\t\t\t\"acsl_toolTip\": \"Abschlag\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"5\",\n\t\t\t\"acsl_toolTip\": \"Abschlag\"\n\t\t}\n\t]\n},\n\"appUser\" ],\n  \"className\": \"ChargingScheme\",\n  \"functionName\": \"adminActiveChargingScheme\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves details for a chargingScheme charge of type 3 = \"FixedAmountOnNightsStay\"  \nAll parameters work the same as for chargingScheme.adminActiveChargingScheme_type1 with these exceptions:  \n1) acs_param003 is set to 'PricePerPerson' fixed  \n2) acs_param004 is encoded a bit differently  \n3) acs_param005 contains the nights-value <br><br>\n\nparams:  \nobject with details of the configuration:  \n{<br>\n&nbsp;&nbsp;string action: Either 'update' for modifying a chargingScheme charge config or 'delete' for deleting one. In case of 'delete', only the acs_id input parameter is needed  \n&nbsp;&nbsp;string acs_name: Administrative name of this chargingScheme charge  \n&nbsp;&nbsp;string acs_param001: Starting date in format YYYY-MM-DD  \n&nbsp;&nbsp;string acs_param002: End Date in format YYYY-MM-DD  \n&nbsp;&nbsp;string acs_param003: Put in \"PricePerPerson\" fixed  \n&nbsp;&nbsp;string acs_param004: Encoded pricing configuration per room-category and age-group. Each room-category delimitted by ° character  \n&nbsp;&nbsp;string acs_param005: Number of nights this charge is meant for  \n&nbsp;&nbsp;int acs_id: unique id of the chargingScheme charge  \n&nbsp;&nbsp;array toolTips: array of objects:  \n&nbsp;&nbsp;{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;int acsl_locale_id: id of the language  \n&nbsp;&nbsp;&nbsp;&nbsp;string acsl_toolTip: name of the chargingScheme charge in the given language  \n&nbsp;&nbsp;}<br>\n}  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array with only 1 int element that is the unique id (acs_id) of the chargingScheme charge.  \nIn case of an update this will be the same as provided in the acs_id input parameter.  \nIn case of delete 0 will get returned"
			},
			"response": []
		},
		{
			"name": "chargingScheme.newActiveChargingScheme_type3",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"acs_name\": \"New fixed amount on nights stay\",\n\t\"acs_param001\": \"2019-11-01\",\n\t\"acs_param002\": \"2020-01-16\",\n\t\"acs_param003\": \"PricePerPerson\",\n\t\"acs_param004\": \"63:18:150:12.00;4:7:12.00\\u00b045:18:150:15.00\",\n\t\"acs_param005\": 4,\n\t\"acs_chargingScheme_id\": \"3\",\n\t\"toolTips\": [{\n\t\t\t\"acsl_locale_id\": \"1\",\n\t\t\t\"acsl_toolTip\": \"new fixed amount on nights stay english\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"2\",\n\t\t\t\"acsl_toolTip\": \"new fixed amount on nights stay german\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"3\",\n\t\t\t\"acsl_toolTip\": \"\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"4\",\n\t\t\t\"acsl_toolTip\": \"\"\n\t\t}, {\n\t\t\t\"acsl_locale_id\": \"5\",\n\t\t\t\"acsl_toolTip\": \"\"\n\t\t}\n\t]\n},\n\"appUser\" ],\n  \"className\": \"ChargingScheme\",\n  \"functionName\": \"insertCS\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request inserts a new chargingScheme charge of type 3 = \"FixedAmountOnNightsStay\"  \nIt's working analog to chargingScheme.newActiveChargingScheme_type1:  \nThe input object is almost the same as for chargingScheme.adminActiveChargingScheme_type3 but there are little differences:  \nacs_chargingScheme_id has to be provided additionaly  \nacs_id and action don't need to be provided here<br><br>\n\nparams:  \nobject with details of the configuration:  \n{<br>\n&nbsp;&nbsp;string acs_name: Administrative name of this chargingScheme charge  \n&nbsp;&nbsp;int acs_chargingScheme_id: cs_id, unique id of the type of the chargingScheme. Is \"3\" for this type (FixedAmountOnNightsStay)  \n&nbsp;&nbsp;string acs_param001: Starting date in format YYYY-MM-DD  \n&nbsp;&nbsp;string acs_param002: End Date in format YYYY-MM-DD  \n&nbsp;&nbsp;string acs_param003: Put in \"PricePerPerson\" fixed  \n&nbsp;&nbsp;string acs_param004: Encoded pricing configuration per room-category and age-group. Each room-category delimitted by ° character  \n&nbsp;&nbsp;string acs_param005: Number of nights this charge is meant for  \n&nbsp;&nbsp;array toolTips: array of objects:  \n&nbsp;&nbsp;{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;int acsl_locale_id: id of the language  \n&nbsp;&nbsp;&nbsp;&nbsp;string acsl_toolTip: name of the chargingScheme charge in the given language  \n&nbsp;&nbsp;}<br>\n}  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array with only 1 int element that is the unique id (acs_id) of the newly inserted chargingScheme charge."
			},
			"response": []
		},
		{
			"name": "getCleanupChargeName",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"AppClass\",\n  \"functionName\": \"getOtherChargesLocale\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the label for \"Cleanupcharge\" in the default language of the user.  \nThe user can customize this type of translation, that's why this isn't contained in normal i18n translation files.<br><br>\n\nparams:  \n\"appUser\" -> fixed<br><br>\n\nReturn is an array with only 1 string-element that contains the translation. It can be empty if the user didn't customize the cleanup-charge label."
			},
			"response": []
		},
		{
			"name": "templateAdmin.getEMailReason",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"customer\", \"appUser\" ],\n  \"className\": \"EMailTemplateAdmin\",\n  \"functionName\": \"getEMailReason\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of possible email templates. There are 2 types of templates: Customer and Admin-Templates.<br><br>\n\nparams:  \nstring -> \"customer\", \"admin\" or \"all\". Indicates which type of template to list (\"all\" for both types).  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array of objects and 1 object looks like this:  \nint er_id: id of the emailtemplate  \nstring erl_name: translated name of the template  \nstring er_name: a unique key-name of the template"
			},
			"response": []
		},
		{
			"name": "templateAdmin.getEMailTemplateDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 61, 1, 2, \"appUser\" ],\n  \"className\": \"EMailTemplateAdmin\",\n  \"functionName\": \"getEMailTemplateDetail\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns details of an email-template for a given seasonPeriod and language.<br><br>\n\nparams:  \nint -> er_id, id of the email-template (called \"emailReason\" in the database)  \nint -> l_id, id of the language that's wanted  \nint -> sp_id, id of the seasonPeriod that's wanted. Use 0 to get the general, non-season-specific template  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an object containing the details. It will be explained in trello."
			},
			"response": []
		},
		{
			"name": "templateAdmin.adminEMailTemplateLocale",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"etl_emailReason_id\": 61,\n\t\"etl_locale_id\": 1,\n\t\"etl_seasonPeriod_id\": 0,\n\t\"etl_emailSubject\": \"We are looking forward to meeting you!!\",\n\t\"etl_emailText\": \"<html>\\n<head>\\n  <meta charset=\\\"UTF-8\\\">\\n<\\/head>\\n<body>\\n<table width=\\\"100%\\\" style=\\\"width:100%; max-width:650px;\\\" cellspacing=\\\"0\\\">\\n  <tr>\\n    <td width=\\\"650\\\" style=\\\"max-width:650px;\\\">\\n      <table width=\\\"100%\\\" style=\\\"width: 100%;\\\" cellspacing=\\\"5\\\">\\n        <tr>\\n          <td>\\n            <table width=\\\"100%\\\" style=\\\"width: 100%;\\\" cellspacing=\\\"5\\\">\\n              <tr>\\n                <td>\\n                  <img src=\\\"{headerImage}\\\" width=\\\"100%\\\" style=\\\"width: 100%;\\\" \\/>\\n                <\\/td>\\n              <\\/tr>\\n            <\\/table>\\n          <\\/td>\\n        <\\/tr>\\n        <tr>\\n          <td height=\\\"20\\\" style=\\\"height: 20px; font-size: 1px;\\\">&nbsp;<\\/td>\\n        <\\/tr>\\n        <tr>\\n          <td>\\n            <table width=\\\"100%\\\" style=\\\"width: 100%;\\\" cellspacing=\\\"5\\\">\\n              <tr>\\n                <td colspan=\\\"3\\\">\\n                  <h1 style=\\\"font-family: Arial, sans-serif; font-size: 24px; font-weight: bold; color:#58585a; margin:0;\\\">Your Booking Confirmation<\\/h1>\\n                <\\/td>\\n              <\\/tr>\\n              <tr>\\n                <td colspan=\\\"3\\\" style=\\\"width:50%; border:1px solid #ccc; padding:10px; vertical-align: top;\\\" valign=\\\"top\\\">\\n                  <table width=\\\"100%\\\" style=\\\"width: 100%;\\\" cellspacing=\\\"0\\\">\\n                    <tr>\\n                      <td width=\\\"96\\\" style=\\\"width: 96px; text-align: center;\\\"><img src=\\\"http:\\/\\/media.easy-booking.at\\/wo\\/Services\\/images\\/DEFAULT\\/email_template\\/check-big.jpg\\\" width=\\\"64\\\" height=\\\"64\\\" \\/><\\/td>\\n                      <td width=\\\"10\\\" style=\\\"width: 10px; font-size: 1px;\\\">&nbsp;<\\/td>\\n                      <td width=\\\"*\\\" style=\\\"font-family: Arial, sans-serif; font-size: 14px;\\\">\\n                        <!--EDITABLE_TEXT_START-->\\n{greetingText},<br><br>Thank you very much for your booking! \\n\\n                        Here is the information for your stay with us. We look forward to welcoming you soon as a guest.\\n                      <!--EDITABLE_TEXT_END--><\\/td>\\n                    <\\/tr>\\n                  <\\/table>\\n                <\\/td>\\n              <\\/tr>\\n              <tr>\\n                <td width=\\\"33.33%\\\" style=\\\"padding:10px; border:1px solid #ccc; width:33.33%; background:#e7e7e7; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">\\n                  Your individual App: \\n                 <br><br><a href=\\\"{sara-deeplink}\\\" style=\\\"text-decoration:none;\\\"><strong style=\\\"text-transform:uppercase; font-size:20px; color:#f7c851; font-weight: bold;\\\">SARA<\\/strong><\\/a>\\n                                    <br><br>\\n                  Your App for mobile administration of your booking.\\n                <\\/td>\\n                <td width=\\\"33.33%\\\" style=\\\"padding:10px; border:1px solid #ccc; width:33.33%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">\\n                  Total Price:\\n                  <br><br>\\n                  <span style=\\\"text-transform:uppercase;font-size:20px;\\\">{totalGross}<\\/span>\\n                  <br><br>\\n                  including taxes\\n                <\\/td>\\n                <td width=\\\"33.33%\\\" style=\\\"padding:10px; border:1px solid #ccc; width:33.33%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">\\n                  {onlineCheckinSara}\\n                <\\/td>\\n              <\\/tr>\\n            <\\/table>\\n          <\\/td>\\n        <\\/tr>\\n        <tr>\\n          <td height=\\\"20\\\" style=\\\"height: 20px; font-size: 1px;\\\">&nbsp;<\\/td>\\n        <\\/tr>\\n        <tr>\\n          <td height=\\\"20\\\" style=\\\"height: 20px; font-size: 1px;\\\">&nbsp;<\\/td>\\n        <\\/tr>\\n        <tr>\\n          <td>\\n            <table width=\\\"100%\\\" style=\\\"width: 100%;\\\" cellspacing=\\\"5\\\">\\n              <tr>\\n                <td>\\n                  <h1 style=\\\"font-family: Arial, sans-serif; font-size: 24px; font-weight: bold; color:#58585a; margin:0;\\\">Make your journey easier<\\/h1>\\n                <\\/td>\\n              <\\/tr>\\n              <tr>\\n                <td style=\\\"width:100%; border:1px solid #ccc; padding:10px; vertical-align: top;\\\" valign=\\\"top\\\">\\n                  <table width=\\\"100%\\\" style=\\\"width: 100%;\\\" cellspacing=\\\"0\\\">\\n                    <tr>\\n                      <td colspan=\\\"3\\\" style=\\\"font-family: Arial, sans-serif; font-size: 14px;\\\">Communicate with your accommodation using SARA, your travel companion<\\/td>\\n                    <\\/tr>\\n                    <tr>\\n                      <td colspan=\\\"3\\\" height=\\\"14\\\" style=\\\"height: 14px; font-size: 1px;\\\">&nbsp;<\\/td>\\n                    <\\/tr>\\n                    <tr>\\n                      <td>\\n                        <table width=\\\"100%\\\" style=\\\"width: 100%;\\\" cellspacing=\\\"0\\\">\\n                          <tr>\\n                            <td width=\\\"32\\\" style=\\\"width:32px; text-align: left;\\\"><img src=\\\"http:\\/\\/media.easy-booking.at\\/wo\\/Services\\/images\\/DEFAULT\\/email_template\\/check.jpg\\\" width=\\\"16\\\" height=\\\"16\\\" \\/><\\/td>\\n                            <td style=\\\"font-family: Arial, sans-serif; font-size: 14px;\\\">Mobile booking management<\\/td>\\n                          <\\/tr>\\n                          <tr>\\n                            <td width=\\\"32\\\" style=\\\"width:32px; text-align: left;\\\"><img src=\\\"http:\\/\\/media.easy-booking.at\\/wo\\/Services\\/images\\/DEFAULT\\/email_template\\/check.jpg\\\" width=\\\"16\\\" height=\\\"16\\\" \\/><\\/td>\\n                            <td style=\\\"font-family: Arial, sans-serif; font-size: 14px;\\\">Keep your documents handy<\\/td>\\n                          <\\/tr>\\n                          <tr>\\n                            <td width=\\\"32\\\" style=\\\"width:32px; text-align: left;\\\"><img src=\\\"http:\\/\\/media.easy-booking.at\\/wo\\/Services\\/images\\/DEFAULT\\/email_template\\/check.jpg\\\" width=\\\"16\\\" height=\\\"16\\\" \\/><\\/td>\\n                            <td style=\\\"font-family: Arial, sans-serif; font-size: 14px;\\\">1-click to send your arrival time<\\/td>\\n                          <\\/tr>\\n                          <tr>\\n                            <td width=\\\"32\\\" style=\\\"width:32px; text-align: left;\\\"><img src=\\\"http:\\/\\/media.easy-booking.at\\/wo\\/Services\\/images\\/DEFAULT\\/email_template\\/check.jpg\\\" width=\\\"16\\\" height=\\\"16\\\" \\/><\\/td>\\n                            <td style=\\\"font-family: Arial, sans-serif; font-size: 14px;\\\">Location and contact details for your accommodation<\\/td>\\n                          <\\/tr>\\n                          <tr>\\n                            <td width=\\\"32\\\" style=\\\"width:32px; text-align: left;\\\"><img src=\\\"http:\\/\\/media.easy-booking.at\\/wo\\/Services\\/images\\/DEFAULT\\/email_template\\/check.jpg\\\" width=\\\"16\\\" height=\\\"16\\\" \\/><\\/td>\\n                            <td style=\\\"font-family: Arial, sans-serif; font-size: 14px;\\\">Online check-in before arrival<\\/td>\\n                          <\\/tr>\\n                          <tr>\\n                            <td width=\\\"32\\\" style=\\\"width:32px; text-align: left;\\\"><img src=\\\"http:\\/\\/media.easy-booking.at\\/wo\\/Services\\/images\\/DEFAULT\\/email_template\\/check.jpg\\\" width=\\\"16\\\" height=\\\"16\\\" \\/><\\/td>\\n                            <td style=\\\"font-family: Arial, sans-serif; font-size: 14px;\\\">Review your accommodation<\\/td>\\n                          <\\/tr>\\n                          <tr>\\n                            <td width=\\\"32\\\" style=\\\"width:32px; text-align: left;\\\"><img src=\\\"http:\\/\\/media.easy-booking.at\\/wo\\/Services\\/images\\/DEFAULT\\/email_template\\/check.jpg\\\" width=\\\"16\\\" height=\\\"16\\\" \\/><\\/td>\\n                            <td style=\\\"font-family: Arial, sans-serif; font-size: 14px;\\\">Check local weather conditions<\\/td>\\n                          <\\/tr>\\n                        <\\/table>\\n                      <\\/td>\\n                      <td width=\\\"155\\\" style=\\\"width:155px;\\\">\\n                        <a href=\\\"{sara-deeplink}\\\"><img src=\\\"http:\\/\\/media.easy-booking.at\\/wo\\/Services\\/images\\/DEFAULT\\/email_template\\/apple_app_store.jpg\\\"><\\/a>\\n                        <a href=\\\"{sara-deeplink}\\\"><img src=\\\"http:\\/\\/media.easy-booking.at\\/wo\\/Services\\/images\\/DEFAULT\\/email_template\\/google-play-store.jpg\\\"><\\/a>\\n                      <\\/td>\\n                      <td width=\\\"100\\\" style=\\\"width:100px;\\\">\\n                        <a href=\\\"{sara-deeplink}\\\"><img src=\\\"{sara-qr}\\\" width=\\\"100\\\" style=\\\"width:100px;\\\"><\\/a>\\n                      <\\/td>\\n                    <\\/tr>\\n                    <tr>\\n                      <td colspan=\\\"3\\\" height=\\\"14\\\" style=\\\"height: 14px; font-size: 1px;\\\">&nbsp;<\\/td>\\n                    <\\/tr>\\n                    <tr>\\n                      <td colspan=\\\"3\\\" style=\\\"font-family: Arial, sans-serif; font-size: 14px;\\\">SARA redefines guest communication - free for accommodation providers & travellers<\\/td>\\n                    <\\/tr>\\n                  <\\/table>\\n                <\\/td>\\n              <\\/tr>\\n            <\\/table>\\n          <\\/td>\\n        <\\/tr>\\n         <tr>\\n          <td height=\\\"20\\\" style=\\\"height: 20px; font-size: 1px;\\\">&nbsp;<\\/td>\\n        <\\/tr>\\n        <tr>\\n          <td>\\n            <table width=\\\"100%\\\" style=\\\"width: 100%;\\\" cellspacing=\\\"5\\\">\\n              <tr>\\n                <td colspan=\\\"2\\\">\\n                  <h1 style=\\\"font-family: Arial, sans-serif; font-size: 24px; font-weight: bold; color:#58585a; margin:0;\\\">Your Booking Details <strong style=\\\"text-transform:uppercase; font-size:20px; color:#f7c851; font-weight: bold;\\\">{bookingNo}<\\/strong><\\/h1>\\n                <\\/td>\\n              <\\/tr>\\n              <tr>\\n                <td style=\\\"width:50%; border:1px solid #ccc; padding:10px; width:50%; vertical-align: top;\\\" valign=\\\"top\\\">\\n                  <table width=\\\"100%\\\" style=\\\"width: 100%;\\\" cellspacing=\\\"0\\\">\\n                    <tr>\\n                      <td width=\\\"50%\\\" style=\\\"width: 50%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">Accommodation:<\\/td>\\n                      <td width=\\\"50%\\\" style=\\\"width: 50%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">{roomCategory}<\\/td>\\n                    <\\/tr>\\n                    <tr>\\n                      <td width=\\\"50%\\\" style=\\\"width: 50%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">Board\\/Catering:<\\/td>\\n                      <td width=\\\"50%\\\" style=\\\"width: 50%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">{chosenCatering}<\\/td>\\n                    <\\/tr>\\n                    <tr>\\n                      <td width=\\\"50%\\\" style=\\\"width: 50%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">Arrival Date:<\\/td>\\n                      <td width=\\\"50%\\\" style=\\\"width: 50%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">{ArrivalDate}<\\/td>\\n                    <\\/tr>\\n                    <tr>\\n                      <td width=\\\"50%\\\" style=\\\"width: 50%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">Departure Date:<\\/td>\\n                      <td width=\\\"50%\\\" style=\\\"width: 50%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">{DepartureDate}<\\/td>\\n                    <\\/tr>\\n                    <tr>\\n                      <td width=\\\"50%\\\" style=\\\"width: 50%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">Adults:<\\/td>\\n                      <td width=\\\"50%\\\" style=\\\"width: 50%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">{NoOfAdults}<\\/td>\\n                    <\\/tr>\\n                    <tr>\\n                      <td width=\\\"50%\\\" style=\\\"width: 50%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">Children:<\\/td>\\n                      <td width=\\\"50%\\\" style=\\\"width: 50%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">{NoOfChildren}<\\/td>\\n                    <\\/tr>\\n                  <\\/table>\\n                <\\/td>\\n                <td style=\\\"width:50%; border:1px solid #ccc; padding:10px; width:50%; vertical-align: top;\\\" valign=\\\"top\\\">\\n                  <table width=\\\"100%\\\" style=\\\"width: 100%;\\\" cellspacing=\\\"0\\\">\\n                    <tr>\\n                      <td width=\\\"33%\\\" style=\\\"width: 33%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">Salutation:<\\/td>\\n                      <td width=\\\"67%\\\" style=\\\"width: 67%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">{salutation}<\\/td>\\n                    <\\/tr>\\n                    <tr>\\n                      <td width=\\\"33%\\\" style=\\\"width: 33%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">Guest Name:<\\/td>\\n                      <td width=\\\"67%\\\" style=\\\"width: 67%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">{guestFirstname} {guestSurname}<\\/td>\\n                    <\\/tr>\\n                    <tr>\\n                      <td width=\\\"33%\\\" style=\\\"width: 33%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">Address:<\\/td>\\n                      <td width=\\\"67%\\\" style=\\\"width: 67%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">{guestAddress}<\\/td>\\n                    <\\/tr>\\n                    <tr>\\n                      <td width=\\\"33%\\\" style=\\\"width: 33%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">Postcode\\/Town:<\\/td>\\n                      <td width=\\\"67%\\\" style=\\\"width: 67%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">{guestCity}<\\/td>\\n                    <\\/tr>\\n                    <tr>\\n                      <td width=\\\"33%\\\" style=\\\"width: 33%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">Country:<\\/td>\\n                      <td width=\\\"67%\\\" style=\\\"width: 67%; font-family: Arial, sans-serif; font-size: 14px; vertical-align: top;\\\" valign=\\\"top\\\">{guestCountry}<\\/td>\\n                    <\\/tr>\\n                  <\\/table>\\n                <\\/td>\\n              <\\/tr>\\n            <\\/table>\\n          <\\/td>\\n        <\\/tr>\\n        <tr>\\n          <td height=\\\"20\\\" style=\\\"height: 20px; font-size: 1px;\\\">&nbsp;<\\/td>\\n        <\\/tr>\\n        <tr>\\n          <td>\\n            <table width=\\\"100%\\\" style=\\\"width: 100%;\\\" cellspacing=\\\"5\\\">\\n              <tr>\\n                <td style=\\\"width:100%; background-color:#58585A; padding:10px; vertical-align: top;\\\" valign=\\\"top\\\">\\n                  <table width=\\\"100%\\\" style=\\\"width: 100%;\\\" cellspacing=\\\"0\\\">\\n                    <tr>\\n                      <td style=\\\"font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; color:#ffffff;\\\">{hotelName}<\\/td>\\n                    <\\/tr>\\n                    <tr>\\n                      <td style=\\\"font-family: Arial, sans-serif; font-size: 12px; color:#ffffff;\\\">{hotelAddress}<\\/td>\\n                    <\\/tr>\\n                    <tr>\\n                      <td style=\\\"font-family: Arial, sans-serif; font-size: 12px; color:#ffffff;\\\">{hotelPostCodeCity}<\\/td>\\n                    <\\/tr>\\n                    <tr>\\n                      <td style=\\\"font-family: Arial, sans-serif; font-size: 12px; color:#ffffff;\\\">Tel.: {hotelPhoneNo}<\\/td>\\n                    <\\/tr>\\n                    <tr>\\n                      <td style=\\\"font-family: Arial, sans-serif; font-size: 12px; color:#ffffff;\\\">E-Mail: <a style=\\\"color:#ffffff;\\\" href=\\\"mailto:{hotelEMailAddress}\\\" title=\\\"E-Mail\\\">{hotelEMailAddress}<\\/a><\\/td>\\n                    <\\/tr>\\n                    <tr>\\n                      <td style=\\\"font-family: Arial, sans-serif; font-size: 12px; color:#ffffff;\\\"><a style=\\\"color:#ffffff;\\\" href=\\\"{hotelWebSite}\\\" title=\\\"Webseite\\\" target=\\\"_blank\\\">{hotelWebSite}<\\/a><\\/td>\\n                    <\\/tr>\\n                  <\\/table>\\n                <\\/td>\\n            <\\/table>\\n          <\\/td>\\n        <\\/tr>\\n      <\\/table>\\n    <\\/td>\\n    <td><\\/td>\\n  <\\/tr>\\n<\\/table>\\n<\\/body>\\n\\n<\\/html>\\n\",\n\t\"etl_headerText\": \"Thank you for your booking. We are pleased that you have decided to spend your holiday in our hotel. <br><br>We have made the following binding booking for you:\",\n\t\"etl_footerText\": \"We are delighted to have you as a guest at our hotel.<br><br>We are available for questions concerning our hotel and your vacation at all times.<br><br>With kind regards,<br>\",\n\t\"etl_withoutCommitmentLabel\": \"*Non-binding prices\"\n}, \n\"appUser\", false ],\n  \"className\": \"EMailTemplateAdmin\",\n  \"functionName\": \"adminEMailTemplateLocale\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves details of an email-template<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;int etl_emailReason_id: er_id of the template  \n&nbsp;&nbsp;int etl_locale_id: l_id of the language that the template is saved in  \n&nbsp;&nbsp;int etl_seasonPeriod_id: sp_id of the seasonPeriod  \n&nbsp;&nbsp;string etl_emailSubject: email-subject of this template  \n&nbsp;&nbsp;string etl_emailText: content text of the template  \n&nbsp;&nbsp;string etl_headerText: header text  \n&nbsp;&nbsp;string etl_footerText: footer text  \n&nbsp;&nbsp;string etl_withoutCommitmentLabel: a special label that's just used in certain email templates  \n}  <br>\n\"appUser\" -> fixed string  \nbool -> Indicator where this request was called from. Set this to true if the request is called from the \"PDF\" tab of the email template admin screen, else false<br><br>\n\nReturn of this request is irrelevant"
			},
			"response": []
		},
		{
			"name": "templateAdmin.deleteSPTemplate",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"etl_seasonPeriod_id\":\"141\",\"etl_emailReason_id\":\"3\",\"etl_locale_id\":\"1\"}, \"appUser\" ],\n  \"className\": \"EMailTemplateAdmin\",\n  \"functionName\": \"deleteSPTemplate\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes a season-specific email-template, so the default-template is used again.<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;int etl_seasonPeriod_id: sp_id of the seasonPeriod that the template to delete is specific for  \n&nbsp;&nbsp;int etl_emailReason_id: er_id of the email-template  \n&nbsp;&nbsp;int etl_locale_id: l_id of the language of the template  \n}<br>\n\"appUser\" -> fixed string<br><br>\n\nReturnvalue is irrelevant. It's always an empty array."
			},
			"response": []
		},
		{
			"name": "templateAdmin.getImageTemplateLocale",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 5, 1, 0, \"appUser\" ],\n  \"className\": \"EMailTemplateAdmin\",\n  \"functionName\": \"getImageTemplateLocale\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns info about images that are linked to a certain email-template.<br><br>\n\nparams:  \nint -> er_id, id of the email-template (called \"emailReason\" in the database)  \nint -> l_id, id of the language that's wanted  \nint -> sp_id, id of the seasonPeriod that's wanted. Use 0 to get the general, non-season-specific template<br><br>\n\nReturn is either an object that contains the wanted data or an empty array if there are no images set at all"
			},
			"response": []
		},
		{
			"name": "templateAdmin.deleteImageTemplateLocale",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"itl_locale_id\":\"1\",\"itl_seasonPeriod_id\":\"142\",\"itl_emailReason_id\":\"3\"}, \"appUser\" ],\n  \"className\": \"EMailTemplateAdmin\",\n  \"functionName\": \"deleteImageTemplateLocale\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes an image-configuration of a given email-template<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;int itl_locale_id: l_id of the email template  \n&nbsp;&nbsp;int itl_seasonPeriod_id: sp_id of the seasonPeriod that the configuration shall be deleted from  \n&nbsp;&nbsp;int itl_emailReason_id: er_id of the emailtemplate  \n}<br>\n\"appUser\" -> fixed string<br><br>\n\nReturn is irrelevant, it's always an empty array"
			},
			"response": []
		},
		{
			"name": "templateAdmin.imageUpload",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "dbName",
							"value": "srv0010002",
							"type": "text"
						},
						{
							"key": "Filename",
							"value": "check.jpg",
							"type": "text"
						},
						{
							"key": "imageType",
							"value": "etl_itl_footerImage",
							"type": "text"
						},
						{
							"key": "timeStamp",
							"value": "201991113643533",
							"type": "text"
						},
						{
							"key": "itl_emailReason_id",
							"value": "3",
							"type": "text"
						},
						{
							"key": "itl_locale_id",
							"value": "1",
							"type": "text"
						},
						{
							"key": "itl_seasonPeriod_id",
							"value": "141",
							"type": "text"
						},
						{
							"key": "Filedata",
							"type": "file",
							"src": "/D:/Downloads/check.jpg"
						}
					]
				},
				"url": {
					"raw": "http://{{SERVERIP}}/wo/Services/com/eBook/imageUpload/ImageUpload.php",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"wo",
						"Services",
						"com",
						"eBook",
						"imageUpload",
						"ImageUpload.php"
					]
				},
				"description": "This request uploads an image and links it to a given emailtemplate<br><br>\n\nparams (form-data):  \ndbName -> dbName of the user, comes from companyDetails.dbName  \nFilename -> under which name shall the file be stored at the media-server  \nimageType -> either etl_itl_headerImage, etl_itl_Image575 or etl_itl_footerImage  \ntimeStamp -> Put in the current time in format YYYYMMDD[hour][minute][seconds][milliseconds]  \nitl_emailReason_id -> er_id of the emailtemplate  \nitl_locale_id -> l_id of the emailtemplate  \nitl_seasonPeriod_id -> sp_id of the seasonPeriod  \nFiledata -> the file to upload"
			},
			"response": []
		},
		{
			"name": "templateAdmin.clearImage",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"itl_footerImage\", {\"itl_locale_id\":\"1\",\"itl_seasonPeriod_id\":\"141\",\"itl_emailReason_id\":\"3\"}, \"appUser\" ],\n  \"className\": \"EMailTemplateAdmin\",\n  \"functionName\": \"clearImage\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request unsets a certain image-type from an email-template. This is needed for example if a user doesn't want to have a footer image anymore on enquiry emails<br><br>\n\nparams:  \nstring -> type of image to unset. Either \"itl_headerImage\", \"itl_Image575\" or \"itl_footerImage\"  \nobject ->  \n{<br>\n&nbsp;&nbsp;int itl_locale_id: l_id of the email-template  \n&nbsp;&nbsp;int itl_seasonPeriod_id: sp_id of the seasonPeriod of the email-template (0 for the \"...\" season)\n&nbsp;&nbsp;int itl_emailReason_id: er_id of the email-template  \n}<br><br>\n\nReturnvalue of this function is irrelevant"
			},
			"response": []
		},
		{
			"name": "templateAdmin.copyImageTemplateLocale",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"seasonPeriodArray\":[\"127\",\"141\",\"138\"],\"localeArray\":[\"1\",\"2\",\"3\"],\"emailReasonArray\":[\"3\",\"4\",\"14\"]}, \n              {\"sp_id\":\"138\",\"l_id\":\"1\",\"er_id\":\"3\"}, \n              \"itl_Image575\", \n              \"appUser\" ],\n  \"className\": \"EMailTemplateAdmin\",\n  \"functionName\": \"copyImageTemplateLocale\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request copies image configuration of a certain email-template to other email-templates<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;array seasonPeriodArray: sp_ids of the target seasons to copy to  \n&nbsp;&nbsp;array localeArray: l_ids of the target languages to copy to  \n&nbsp;&nbsp;array emailReasonArray: er_ids of the target email-templates to copy to  \n}<br>\nobject ->  \n{<br>\n&nbsp;&nbsp;int sp_id: sp_id of the source season to copy from  \n&nbsp;&nbsp;int l_id: l_id of the source language to copy from  \n&nbsp;&nbsp;int er_id: er_id of the source email-template to copy from  \n}<br>\nstring -> Type of image to copy. Can be either \"itl_headerImage\", \"itl_Image575\" or \"itl_footerImage\"<br><br>\n\nReturnvalue of this request is irrelevant"
			},
			"response": []
		},
		{
			"name": "fileAdmin.getFilesInFolder",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 5, \"appUser\" ],\n  \"className\": \"FileAdmin\",\n  \"functionName\": \"getFilesInFolder\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns files that are in a given folder<br><br>\n\nparams:  \nint -> fo_id of the folder to check  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array of objects - the needed fields are explained in trello.  \nIf a folder doesn't contain files this request will return an array with only 1 string element having the string-value \"ZERO\""
			},
			"response": []
		},
		{
			"name": "fileAdmin.getFolders",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"FileAdmin\",\n  \"functionName\": \"getFolders\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of folders. The list represents a tree-structure. The root-node always has fo_folder_id = null and fo_id = 0.  \nThe field fo_id is the unique id of a folder and fo_folder_id points to the fo_id of the parent-folder.<br><br>\n\nparams:  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array of objects:  \n{<br>\n&nbsp;&nbsp;int fo_id: unique id of a folder  \n&nbsp;&nbsp;int fo_folder_id: id of the parent folder  \n&nbsp;&nbsp;string fo_name: Name of the folder  \n}"
			},
			"response": []
		},
		{
			"name": "fileAdmin.getEMailTemplateLocaleAttachment",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 55, \"appUser\" ],\n  \"className\": \"EMailTemplateAdmin\",\n  \"functionName\": \"getEMailTemplateLocaleAttachment\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns info about to which email-templates a file is linked to as attachment.<br><br>\n\nparams:  \nint -> fi_id of the file  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an object with 3 fields that can be null:  \n{<br>\n&nbsp;&nbsp;array erArr: list of er_ids to email-templates that the file is linked to  \n&nbsp;&nbsp;array lArr: list of l_ids (languages)  \n&nbsp;&nbsp;array spArr: list of sp_ids (seasonPeriods)  \n}"
			},
			"response": []
		},
		{
			"name": "fileAdmin.setEmailTemplateLocaleAttachment",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"fi_id\": \"55\",\n\t\"seasonPeriodArray\": [\"150\"],\n\t\"localeArray\": [\"1\", \"2\"],\n\t\"emailReasonArray\": [\"42\", \"4\"]\n}\n, \"appUser\" ],\n  \"className\": \"EMailTemplateAdmin\",\n  \"functionName\": \"setEmailTemplateLocaleAttachment\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request stores attachment-assignments between a given file and email-templates<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;int fi_id: fi_id of the file  \n&nbsp;&nbsp;array seasonPeriodArray: list of sp_ids  \n&nbsp;&nbsp;array localeArray: list of l_ids  \n&nbsp;&nbsp;array emailReasonArray: list of er_ids  \n}<br><br>\n\nReturn of this request is irrelevant, it's always returning an empty array."
			},
			"response": []
		},
		{
			"name": "fileAdmin.deleteOneFile",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 7, \"appUser\" ],\n  \"className\": \"FileAdmin\",\n  \"functionName\": \"deleteOneFile\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes a file from the FileAdmin configuration<br><br>\n\nparams:  \nint -> fi_id of the file  \n\"appUser\" -> fixed string<br><br>\n\nThe request is returning an array with only 1 int element that contains the number of deleted records."
			},
			"response": []
		},
		{
			"name": "fileAdmin.insertChildFolder",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"a subfolder\", 6, \"appUser\" ],\n  \"className\": \"FileAdmin\",\n  \"functionName\": \"insertChildFolder\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request creates a subfolder below a given folder.<br><br>\n\nparams:  \nstring -> name of the new subfolder  \nint -> fo_id of the parent folder  \n\"appUser\" -> fixed string<br><br>\n\n\nReturn is an object that contains data about the newly created folder:  \n{<br>\n&nbsp;&nbsp;int fo_id: the fo_id of the newly created folder  \n&nbsp;&nbsp;string fo_name: Name of the new folder (same as input parameter 1)  \n&nbsp;&nbsp;int fo_folder_id: Parent id of the new folder (same as input parameter 2)  \n}"
			},
			"response": []
		},
		{
			"name": "registrationForm.setArrival",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 110, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"setArrival\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request sends an arrival of a registrationform to the registrationform service provider that's linked to this regform  \n*Remark: Input parameters and return-object work completely the same as for registrationForm.setDeparture*<br><br>\n\nparams:  \nint -> rg_id of the registrationform  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an object:  \n{<br>\n&nbsp;&nbsp;string status: Can be either \"success\" or \"error\"  \n&nbsp;&nbsp;array of objects errors (will be only present if status == \"error\"):  \n&nbsp;&nbsp;{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;string code: Error-code, usually a number, but in rare cases can be a string  \n&nbsp;&nbsp;&nbsp;&nbsp;string text: Error message  \n&nbsp;&nbsp;}<br>\n}"
			},
			"response": []
		},
		{
			"name": "registrationForm.setDeparture",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 110, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"setDeparture\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request sends a departure of a registrationform to the registrationform service provider that's linked to this regform  \n*Remark: Input parameters and return-object work completely the same as for registrationForm.setArrival*<br><br>\n\nparams:  \nint -> rg_id of the registrationform  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an object:  \n{<br>\n&nbsp;&nbsp;string status: Can be either \"success\" or \"error\"  \n&nbsp;&nbsp;array of objects errors (will be only present if status == \"error\"):  \n&nbsp;&nbsp;{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;string code: Error-code, usually a number, but in rare cases can be a string  \n&nbsp;&nbsp;&nbsp;&nbsp;string text: Error message  \n&nbsp;&nbsp;}<br>\n}"
			},
			"response": []
		},
		{
			"name": "registrationForm.cancelRegform",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 110, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"cancelRegform\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request sends a cancellation of a registrationform to the regform-service-provider that's linked to this registrationform  \n*Remark: Input parameters and return-object work completely the same as for registrationForm.setArrival and .setDeparture*<br><br>\n\nparams:  \nint -> rg_id of the registrationform  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an object:  \n{<br>\n&nbsp;&nbsp;string status: Can be either \"success\" or \"error\"  \n&nbsp;&nbsp;array of objects errors (will be only present if status == \"error\"):  \n&nbsp;&nbsp;{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;string code: Error-code, usually a number, but in rare cases can be a string  \n&nbsp;&nbsp;&nbsp;&nbsp;string text: Error message  \n&nbsp;&nbsp;}<br>\n}"
			},
			"response": []
		},
		{
			"name": "registrationForm.deleteRegform",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 110, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"deleteRegform\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes a registrationform locally<br><br>\n\nparams:  \nint -> rg_id of the registrationform  \n\"appUser\" -> fixed string<br><br>\n\nReturn of this request is irrelevant, it's always returning an empty array"
			},
			"response": []
		},
		{
			"name": "stats.getValidUntilReservations",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"id\":\"all\"}, \"appUser\" ],\n  \"className\": \"Statistics\",\n  \"functionName\": \"getValidUntilReservations\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request provides data about reservations that have set a valid-until date<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;string id: either \"all\", \"expired\" or \"notExpired\". Filters the wanted type of reservations  \n}<br>\n\"appUser\" -> fixed string<br><br>\n\nReturn is an array of objects of the reservations that match the filter. It will be explained in trello"
			},
			"response": []
		},
		{
			"name": "stats.genBookingPDF",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 765, \"off\", \"srv0010002\" ],\n  \"className\": \"EMailTemplate\",\n  \"functionName\": \"genBookingPDF\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request generates the PDF to a given booking and returns a path to the webserver to this PDF<br><br>\n\nparams:  \nint -> b_id of the booking  \nstring -> Either \"on\" or \"off\". Indicates, if the PDF for the guest (\"off\") or the PDF for the hotel (\"on\") is wanted  \nstring -> dbName of the hotel<br><br>\n\nReturn is an array with only 1 string-element. It shows the path to the PDF relative to the webserver-root"
			},
			"response": []
		},
		{
			"name": "specialOffers.getSpecialOffers",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"on\", \"appUser\" ],\n  \"className\": \"SpecialOffer\",\n  \"functionName\": \"getSpecialOffers\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the list of currently configured special offers<br><br>\n\nparams:  \nstring -> either \"on\" or \"off\". Indicates if inactive specialoffers should be also shown (\"on\") or not (\"off\")  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array of objects. The needed fields are explained in Trello"
			},
			"response": []
		},
		{
			"name": "specialOffers.getSpecialOfferDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 71, 1, \"appUser\" ],\n  \"className\": \"SpecialOffer\",\n  \"functionName\": \"getSpecialOfferDetail\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request provides details about a certain special offer<br><br>\n\nparams:  \nint -> so_id of the special offer  \nint -> l_id of the language that the details shall be shown in  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an object. Fields are explained in trello."
			},
			"response": []
		},
		{
			"name": "specialOffers.getSpecialOfferCategories",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ null, \"appUser\" ],\n  \"className\": \"AppClass\",\n  \"functionName\": \"getSpecialOfferCategories\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of possible categories for special offers<br><br>\n\nparams:  \nnull -> just provide null. This parameter got obsolete but we need to keep it in place because otherwise the flash app wouldn't work anymore  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array of objects"
			},
			"response": []
		},
		{
			"name": "specialOffers.uploadImage",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "dbName",
							"value": "srv0010002",
							"type": "text"
						},
						{
							"key": "imageType",
							"value": "so_img001",
							"type": "text"
						},
						{
							"key": "timeStamp",
							"value": "201991113643533",
							"type": "text"
						},
						{
							"key": "so_id",
							"value": "62",
							"type": "text"
						},
						{
							"key": "Filedata",
							"type": "file",
							"src": "/D:/Bilder/mushroomTea.jpg"
						}
					]
				},
				"url": {
					"raw": "http://{{SERVERIP}}/wo/Services/com/eBook/imageUpload/ImageUpload.php",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"wo",
						"Services",
						"com",
						"eBook",
						"imageUpload",
						"ImageUpload.php"
					]
				},
				"description": "This request uploads an image and connects it to a special offer in the database<br><br>\n\nparams:  \ndbName -> `companyDetails.dbName`  \nimageType -> \"so_img001\" (fixed string)  \ntimeStamp -> Put in the current time in format YYYYMMDD[hour][minute][seconds][milliseconds]  \nso_id -> `so_id` of the special offer  \nFiledata -> the file to upload"
			},
			"response": []
		},
		{
			"name": "specialOffers.clearImage",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 71, \"so_img001\", \"appUser\" ],\n  \"className\": \"SpecialOffer\",\n  \"functionName\": \"clearImage\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request unsets the image that's currently set at a specialoffer <br><br>\n\nparams:  \nint -> `so_id` of the special offer  \n\"so_img001\" -> fixed string  \n\"appUser\" -> fixed string<br><br>\n\nReturn of this request is irrelevant, it's always returning an empty array"
			},
			"response": []
		},
		{
			"name": "specialOffers.editSpecialOfferDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"so_id\": \"71\",\n\t\"sol_title\": \"The title\",\n\t\"sol_longDesc\": \"<TEXTFORMAT LEADING=\\\"2\\\"><P ALIGN=\\\"LEFT\\\"><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"0\\\">Detail <B>Text<\\/B> example<\\/FONT><\\/P><\\/TEXTFORMAT>\",\n\t\"sol_longDescText\": \"Detail Text example\",\n\t\"sol_shortDesc\": \"<TEXTFORMAT LEADING=\\\"2\\\"><P ALIGN=\\\"LEFT\\\"><FONT FACE=\\\"Verdana\\\" SIZE=\\\"10\\\" COLOR=\\\"#000000\\\" LETTERSPACING=\\\"0\\\" KERNING=\\\"0\\\">short text <U>example<\\/U><\\/FONT><\\/P><\\/TEXTFORMAT>\",\n\t\"sol_shortDescText\": \"short text example\",\n\t\"so_highlighted\": \"off\",\n\t\"so_serviceType_id\": \"2\",\n\t\"so_sortOrder\": \"\",\n\t\"l_id\": \"1\",\n\t\"so_specialOfferCategory_id\": \"0\",\n\t\"so_active\": \"on\"\n}\n, \"appUser\" ],\n  \"className\": \"SpecialOffer\",\n  \"functionName\": \"editSpecialOfferDetail\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves details about an existing special offer<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;int so_id -> `so_id` of the special offer  \n&nbsp;&nbsp;string sol_title -> Title of the special offer  \n&nbsp;&nbsp;string sol_longDesc -> HTML version of the Detail text  \n&nbsp;&nbsp;string sol_longDescText -> plain text version of the Detail text  \n&nbsp;&nbsp;string sol_shortDesc -> HTML version of the Short text  \n&nbsp;&nbsp;string sol_shortDescText -> plain text version of the Short text  \n&nbsp;&nbsp;string so_highlighted -> Either \"on\" or \"off\", comes from Highlight Package checkbox  \n&nbsp;&nbsp;int so_serviceType_id -> `st_id` of the Service Type (Service type dropdown)  \n&nbsp;&nbsp;string so_sortOrder -> Sort order  \n&nbsp;&nbsp;int l_id -> `l_id` of the language that title and description are provided in (comes from `l_id` of selected element of language dropdown)  \n&nbsp;&nbsp;int so_specialOfferCategory_id -> `soc_id` of the Category (Category dropdown)  \n&nbsp;&nbsp;string so_active -> Either \"on\" or \"off\". Indicates if this specialoffer is online bookable (\"on\") or not (\"off\")  \n},<br>\n\"appUser\" -> fixed string<br><br>\n\nReturn of this request is irrelevant"
			},
			"response": []
		},
		{
			"name": "specialOffers.insertSpecialOffer",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"sol_title\": \"Another special offer 4\",\n\t\"sol_locale_id\": \"1\"\n}, \"appUser\" ],\n  \"className\": \"SpecialOffer\",\n  \"functionName\": \"insertSpecialOffer\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request inserts a new special offer into the database.<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;string sol_title: The special offer title  \n&nbsp;&nbsp;int sol_locale_id: `l_id` (language_id) of the language that sol_title is provided in  \n}<br><br>\n\nReturn is an array with only 1 int element. This is the `so_id` of the newly inserted special offer."
			},
			"response": []
		},
		{
			"name": "specialOffers.copySO",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 77, \"appUser\" ],\n  \"className\": \"SpecialOffer\",\n  \"functionName\": \"copySO\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request creates a copy of an existing special offer.  \nThe name (`sol_title`) of the new special offer will be the same as the old one, but postfixed with \" (C)\"<br><br>\n\nparams:  \nint -> `so_id` of the special offer to copy from  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array with only 1 element. This is the `so_id` of the newly created"
			},
			"response": []
		},
		{
			"name": "specialOffers.deleteSO",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 79, \"appUser\" ],\n  \"className\": \"SpecialOffer\",\n  \"functionName\": \"deleteSO\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes a special offer<br><br>\n\nparams:  \nint -> `so_id` of the special offer to delete  \n\"appUser\" -> fixed string<br><br>\n\nReturn of this request is irrelevant"
			},
			"response": []
		},
		{
			"name": "specialOffers.getSpecialOfferPricingDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 60, \"appUser\" ],\n  \"className\": \"SpecialOffer\",\n  \"functionName\": \"getSpecialOfferPricingDetail\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request provides pricing and period details about a specialoffer<br><br>\n\nparams:  \nint -> `so_id` of the special offer  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an object that's explained in detail in trello"
			},
			"response": []
		},
		{
			"name": "specialOffers.adminSpecialOfferPricingDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"so_id\": \"60\",\n\t\"so_fromDate\": \"2017-06-03\",\n\t\"so_untilDate\": \"2017-10-31\",\n\t\"so_bookableFromDate\": \"2017-03-27\",\n\t\"so_bookableUntilDate\": \"2017-06-30\",\n\t\"so_nightsStay\": 5,\n\t\"so_minPersons\": 2,\n\t\"so_maxPersons\": 2,\n\t\"so_individualCatering\": \"on\",\n\t\"so_anMon\": \"on\",\n\t\"so_anTue\": \"on\",\n\t\"so_anWed\": \"on\",\n\t\"so_anThu\": \"on\",\n\t\"so_anFri\": \"on\",\n\t\"so_anSat\": \"off\",\n\t\"so_anSun\": \"on\",\n\t\"saveForAll\": \"off\",\n\t\"entityGroup\": [{\n\t\t\t\"sopeg_price\": \"164.00\",\n\t\t\t\"fromAge\": \"18\",\n\t\t\t\"sopeg_cateringQuota\": \"10.00\",\n\t\t\t\"sopeg_roomCharge\": \"0.00\",\n\t\t\t\"toAge\": \"150\",\n\t\t\t\"sopeg_entityGroup_id\": \"6\"\n\t\t}, {\n\t\t\t\"sopeg_price\": \"99.00\",\n\t\t\t\"fromAge\": \"0\",\n\t\t\t\"sopeg_cateringQuota\": \"10.00\",\n\t\t\t\"sopeg_roomCharge\": \"0.00\",\n\t\t\t\"toAge\": \"14\",\n\t\t\t\"sopeg_entityGroup_id\": \"6\"\n\t\t}, {\n\t\t\t\"sopeg_price\": \"162.00\",\n\t\t\t\"fromAge\": \"15\",\n\t\t\t\"sopeg_cateringQuota\": \"10.00\",\n\t\t\t\"sopeg_roomCharge\": \"0.00\",\n\t\t\t\"toAge\": \"17\",\n\t\t\t\"sopeg_entityGroup_id\": \"6\"\n\t\t}, {\n\t\t\t\"sopeg_price\": \"250.00\",\n\t\t\t\"fromAge\": \"18\",\n\t\t\t\"sopeg_cateringQuota\": \"20.00\",\n\t\t\t\"sopeg_roomCharge\": \"0.00\",\n\t\t\t\"toAge\": \"150\",\n\t\t\t\"sopeg_entityGroup_id\": \"1\"\n\t\t}, {\n\t\t\t\"sopeg_price\": \"99.00\",\n\t\t\t\"fromAge\": \"0\",\n\t\t\t\"sopeg_cateringQuota\": \"20.00\",\n\t\t\t\"sopeg_roomCharge\": \"0.00\",\n\t\t\t\"toAge\": \"14\",\n\t\t\t\"sopeg_entityGroup_id\": \"1\"\n\t\t}, {\n\t\t\t\"sopeg_price\": \"162.00\",\n\t\t\t\"fromAge\": \"15\",\n\t\t\t\"sopeg_cateringQuota\": \"20.00\",\n\t\t\t\"sopeg_roomCharge\": \"0.00\",\n\t\t\t\"toAge\": \"17\",\n\t\t\t\"sopeg_entityGroup_id\": \"1\"\n\t\t}\n\t],\n\t\"specialOfferPeriod\": [{\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-06-09\",\n\t\t\t\"sop_fromDate\": \"2017-06-04\",\n\t\t\t\"sop_id\": \"11527\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-06-10\",\n\t\t\t\"sop_fromDate\": \"2017-06-05\",\n\t\t\t\"sop_id\": \"11528\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-06-11\",\n\t\t\t\"sop_fromDate\": \"2017-06-06\",\n\t\t\t\"sop_id\": \"11529\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-06-12\",\n\t\t\t\"sop_fromDate\": \"2017-06-07\",\n\t\t\t\"sop_id\": \"11530\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-06-13\",\n\t\t\t\"sop_fromDate\": \"2017-06-08\",\n\t\t\t\"sop_id\": \"11531\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-06-14\",\n\t\t\t\"sop_fromDate\": \"2017-06-09\",\n\t\t\t\"sop_id\": \"11532\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-06-16\",\n\t\t\t\"sop_fromDate\": \"2017-06-11\",\n\t\t\t\"sop_id\": \"11534\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-06-17\",\n\t\t\t\"sop_fromDate\": \"2017-06-12\",\n\t\t\t\"sop_id\": \"11535\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-06-18\",\n\t\t\t\"sop_fromDate\": \"2017-06-13\",\n\t\t\t\"sop_id\": \"11536\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-06-19\",\n\t\t\t\"sop_fromDate\": \"2017-06-14\",\n\t\t\t\"sop_id\": \"11537\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-06-20\",\n\t\t\t\"sop_fromDate\": \"2017-06-15\",\n\t\t\t\"sop_id\": \"11538\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-06-21\",\n\t\t\t\"sop_fromDate\": \"2017-06-16\",\n\t\t\t\"sop_id\": \"11539\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-06-23\",\n\t\t\t\"sop_fromDate\": \"2017-06-18\",\n\t\t\t\"sop_id\": \"11541\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-06-24\",\n\t\t\t\"sop_fromDate\": \"2017-06-19\",\n\t\t\t\"sop_id\": \"11542\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-06-25\",\n\t\t\t\"sop_fromDate\": \"2017-06-20\",\n\t\t\t\"sop_id\": \"11543\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-06-26\",\n\t\t\t\"sop_fromDate\": \"2017-06-21\",\n\t\t\t\"sop_id\": \"11544\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-06-27\",\n\t\t\t\"sop_fromDate\": \"2017-06-22\",\n\t\t\t\"sop_id\": \"11545\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-06-28\",\n\t\t\t\"sop_fromDate\": \"2017-06-23\",\n\t\t\t\"sop_id\": \"11546\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-06-30\",\n\t\t\t\"sop_fromDate\": \"2017-06-25\",\n\t\t\t\"sop_id\": \"11548\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-01\",\n\t\t\t\"sop_fromDate\": \"2017-06-26\",\n\t\t\t\"sop_id\": \"11914\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-02\",\n\t\t\t\"sop_fromDate\": \"2017-06-27\",\n\t\t\t\"sop_id\": \"11915\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-03\",\n\t\t\t\"sop_fromDate\": \"2017-06-28\",\n\t\t\t\"sop_id\": \"11916\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-04\",\n\t\t\t\"sop_fromDate\": \"2017-06-29\",\n\t\t\t\"sop_id\": \"11917\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-05\",\n\t\t\t\"sop_fromDate\": \"2017-06-30\",\n\t\t\t\"sop_id\": \"11918\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-07\",\n\t\t\t\"sop_fromDate\": \"2017-07-02\",\n\t\t\t\"sop_id\": \"11919\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-08\",\n\t\t\t\"sop_fromDate\": \"2017-07-03\",\n\t\t\t\"sop_id\": \"11920\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-09\",\n\t\t\t\"sop_fromDate\": \"2017-07-04\",\n\t\t\t\"sop_id\": \"11921\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-10\",\n\t\t\t\"sop_fromDate\": \"2017-07-05\",\n\t\t\t\"sop_id\": \"11922\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-11\",\n\t\t\t\"sop_fromDate\": \"2017-07-06\",\n\t\t\t\"sop_id\": \"11923\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-12\",\n\t\t\t\"sop_fromDate\": \"2017-07-07\",\n\t\t\t\"sop_id\": \"11924\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-14\",\n\t\t\t\"sop_fromDate\": \"2017-07-09\",\n\t\t\t\"sop_id\": \"11925\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-15\",\n\t\t\t\"sop_fromDate\": \"2017-07-10\",\n\t\t\t\"sop_id\": \"11926\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-16\",\n\t\t\t\"sop_fromDate\": \"2017-07-11\",\n\t\t\t\"sop_id\": \"11927\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-17\",\n\t\t\t\"sop_fromDate\": \"2017-07-12\",\n\t\t\t\"sop_id\": \"11928\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-18\",\n\t\t\t\"sop_fromDate\": \"2017-07-13\",\n\t\t\t\"sop_id\": \"11929\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-19\",\n\t\t\t\"sop_fromDate\": \"2017-07-14\",\n\t\t\t\"sop_id\": \"11930\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-21\",\n\t\t\t\"sop_fromDate\": \"2017-07-16\",\n\t\t\t\"sop_id\": \"11931\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-22\",\n\t\t\t\"sop_fromDate\": \"2017-07-17\",\n\t\t\t\"sop_id\": \"11932\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-23\",\n\t\t\t\"sop_fromDate\": \"2017-07-18\",\n\t\t\t\"sop_id\": \"11933\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-24\",\n\t\t\t\"sop_fromDate\": \"2017-07-19\",\n\t\t\t\"sop_id\": \"11934\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-25\",\n\t\t\t\"sop_fromDate\": \"2017-07-20\",\n\t\t\t\"sop_id\": \"11935\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-26\",\n\t\t\t\"sop_fromDate\": \"2017-07-21\",\n\t\t\t\"sop_id\": \"11936\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-28\",\n\t\t\t\"sop_fromDate\": \"2017-07-23\",\n\t\t\t\"sop_id\": \"11937\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-29\",\n\t\t\t\"sop_fromDate\": \"2017-07-24\",\n\t\t\t\"sop_id\": \"11938\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-30\",\n\t\t\t\"sop_fromDate\": \"2017-07-25\",\n\t\t\t\"sop_id\": \"11939\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-07-31\",\n\t\t\t\"sop_fromDate\": \"2017-07-26\",\n\t\t\t\"sop_id\": \"11940\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-01\",\n\t\t\t\"sop_fromDate\": \"2017-07-27\",\n\t\t\t\"sop_id\": \"11941\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-02\",\n\t\t\t\"sop_fromDate\": \"2017-07-28\",\n\t\t\t\"sop_id\": \"11942\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-04\",\n\t\t\t\"sop_fromDate\": \"2017-07-30\",\n\t\t\t\"sop_id\": \"11943\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-05\",\n\t\t\t\"sop_fromDate\": \"2017-07-31\",\n\t\t\t\"sop_id\": \"11944\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-06\",\n\t\t\t\"sop_fromDate\": \"2017-08-01\",\n\t\t\t\"sop_id\": \"11945\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-07\",\n\t\t\t\"sop_fromDate\": \"2017-08-02\",\n\t\t\t\"sop_id\": \"11946\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-08\",\n\t\t\t\"sop_fromDate\": \"2017-08-03\",\n\t\t\t\"sop_id\": \"11947\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-09\",\n\t\t\t\"sop_fromDate\": \"2017-08-04\",\n\t\t\t\"sop_id\": \"11948\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-11\",\n\t\t\t\"sop_fromDate\": \"2017-08-06\",\n\t\t\t\"sop_id\": \"11949\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-12\",\n\t\t\t\"sop_fromDate\": \"2017-08-07\",\n\t\t\t\"sop_id\": \"11950\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-13\",\n\t\t\t\"sop_fromDate\": \"2017-08-08\",\n\t\t\t\"sop_id\": \"11951\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-14\",\n\t\t\t\"sop_fromDate\": \"2017-08-09\",\n\t\t\t\"sop_id\": \"11952\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-15\",\n\t\t\t\"sop_fromDate\": \"2017-08-10\",\n\t\t\t\"sop_id\": \"11953\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-16\",\n\t\t\t\"sop_fromDate\": \"2017-08-11\",\n\t\t\t\"sop_id\": \"11954\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-18\",\n\t\t\t\"sop_fromDate\": \"2017-08-13\",\n\t\t\t\"sop_id\": \"11955\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-19\",\n\t\t\t\"sop_fromDate\": \"2017-08-14\",\n\t\t\t\"sop_id\": \"11956\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-20\",\n\t\t\t\"sop_fromDate\": \"2017-08-15\",\n\t\t\t\"sop_id\": \"11957\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-21\",\n\t\t\t\"sop_fromDate\": \"2017-08-16\",\n\t\t\t\"sop_id\": \"11958\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-22\",\n\t\t\t\"sop_fromDate\": \"2017-08-17\",\n\t\t\t\"sop_id\": \"11959\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-23\",\n\t\t\t\"sop_fromDate\": \"2017-08-18\",\n\t\t\t\"sop_id\": \"11960\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-25\",\n\t\t\t\"sop_fromDate\": \"2017-08-20\",\n\t\t\t\"sop_id\": \"11961\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-26\",\n\t\t\t\"sop_fromDate\": \"2017-08-21\",\n\t\t\t\"sop_id\": \"11962\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-27\",\n\t\t\t\"sop_fromDate\": \"2017-08-22\",\n\t\t\t\"sop_id\": \"11963\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-28\",\n\t\t\t\"sop_fromDate\": \"2017-08-23\",\n\t\t\t\"sop_id\": \"11964\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-29\",\n\t\t\t\"sop_fromDate\": \"2017-08-24\",\n\t\t\t\"sop_id\": \"11965\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-08-30\",\n\t\t\t\"sop_fromDate\": \"2017-08-25\",\n\t\t\t\"sop_id\": \"11966\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-01\",\n\t\t\t\"sop_fromDate\": \"2017-08-27\",\n\t\t\t\"sop_id\": \"11967\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-02\",\n\t\t\t\"sop_fromDate\": \"2017-08-28\",\n\t\t\t\"sop_id\": \"11968\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-03\",\n\t\t\t\"sop_fromDate\": \"2017-08-29\",\n\t\t\t\"sop_id\": \"11969\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-04\",\n\t\t\t\"sop_fromDate\": \"2017-08-30\",\n\t\t\t\"sop_id\": \"11970\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-05\",\n\t\t\t\"sop_fromDate\": \"2017-08-31\",\n\t\t\t\"sop_id\": \"11971\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-06\",\n\t\t\t\"sop_fromDate\": \"2017-09-01\",\n\t\t\t\"sop_id\": \"11972\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-08\",\n\t\t\t\"sop_fromDate\": \"2017-09-03\",\n\t\t\t\"sop_id\": \"11973\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-09\",\n\t\t\t\"sop_fromDate\": \"2017-09-04\",\n\t\t\t\"sop_id\": \"11974\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-10\",\n\t\t\t\"sop_fromDate\": \"2017-09-05\",\n\t\t\t\"sop_id\": \"11975\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-11\",\n\t\t\t\"sop_fromDate\": \"2017-09-06\",\n\t\t\t\"sop_id\": \"11976\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-12\",\n\t\t\t\"sop_fromDate\": \"2017-09-07\",\n\t\t\t\"sop_id\": \"11977\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-13\",\n\t\t\t\"sop_fromDate\": \"2017-09-08\",\n\t\t\t\"sop_id\": \"11978\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-15\",\n\t\t\t\"sop_fromDate\": \"2017-09-10\",\n\t\t\t\"sop_id\": \"11979\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-16\",\n\t\t\t\"sop_fromDate\": \"2017-09-11\",\n\t\t\t\"sop_id\": \"11980\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-17\",\n\t\t\t\"sop_fromDate\": \"2017-09-12\",\n\t\t\t\"sop_id\": \"11981\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-18\",\n\t\t\t\"sop_fromDate\": \"2017-09-13\",\n\t\t\t\"sop_id\": \"11982\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-19\",\n\t\t\t\"sop_fromDate\": \"2017-09-14\",\n\t\t\t\"sop_id\": \"11983\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-20\",\n\t\t\t\"sop_fromDate\": \"2017-09-15\",\n\t\t\t\"sop_id\": \"11984\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-22\",\n\t\t\t\"sop_fromDate\": \"2017-09-17\",\n\t\t\t\"sop_id\": \"11985\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-23\",\n\t\t\t\"sop_fromDate\": \"2017-09-18\",\n\t\t\t\"sop_id\": \"11986\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-24\",\n\t\t\t\"sop_fromDate\": \"2017-09-19\",\n\t\t\t\"sop_id\": \"11987\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-25\",\n\t\t\t\"sop_fromDate\": \"2017-09-20\",\n\t\t\t\"sop_id\": \"11988\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-26\",\n\t\t\t\"sop_fromDate\": \"2017-09-21\",\n\t\t\t\"sop_id\": \"11989\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-27\",\n\t\t\t\"sop_fromDate\": \"2017-09-22\",\n\t\t\t\"sop_id\": \"11990\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-29\",\n\t\t\t\"sop_fromDate\": \"2017-09-24\",\n\t\t\t\"sop_id\": \"11991\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-09-30\",\n\t\t\t\"sop_fromDate\": \"2017-09-25\",\n\t\t\t\"sop_id\": \"11992\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-01\",\n\t\t\t\"sop_fromDate\": \"2017-09-26\",\n\t\t\t\"sop_id\": \"11993\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-02\",\n\t\t\t\"sop_fromDate\": \"2017-09-27\",\n\t\t\t\"sop_id\": \"11994\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-03\",\n\t\t\t\"sop_fromDate\": \"2017-09-28\",\n\t\t\t\"sop_id\": \"11995\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-04\",\n\t\t\t\"sop_fromDate\": \"2017-09-29\",\n\t\t\t\"sop_id\": \"11996\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-06\",\n\t\t\t\"sop_fromDate\": \"2017-10-01\",\n\t\t\t\"sop_id\": \"11997\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-07\",\n\t\t\t\"sop_fromDate\": \"2017-10-02\",\n\t\t\t\"sop_id\": \"11998\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-08\",\n\t\t\t\"sop_fromDate\": \"2017-10-03\",\n\t\t\t\"sop_id\": \"11999\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-09\",\n\t\t\t\"sop_fromDate\": \"2017-10-04\",\n\t\t\t\"sop_id\": \"12000\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-10\",\n\t\t\t\"sop_fromDate\": \"2017-10-05\",\n\t\t\t\"sop_id\": \"12001\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-11\",\n\t\t\t\"sop_fromDate\": \"2017-10-06\",\n\t\t\t\"sop_id\": \"12002\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-13\",\n\t\t\t\"sop_fromDate\": \"2017-10-08\",\n\t\t\t\"sop_id\": \"12003\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-14\",\n\t\t\t\"sop_fromDate\": \"2017-10-09\",\n\t\t\t\"sop_id\": \"12004\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-15\",\n\t\t\t\"sop_fromDate\": \"2017-10-10\",\n\t\t\t\"sop_id\": \"12005\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-16\",\n\t\t\t\"sop_fromDate\": \"2017-10-11\",\n\t\t\t\"sop_id\": \"12006\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-17\",\n\t\t\t\"sop_fromDate\": \"2017-10-12\",\n\t\t\t\"sop_id\": \"12007\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-18\",\n\t\t\t\"sop_fromDate\": \"2017-10-13\",\n\t\t\t\"sop_id\": \"12008\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-20\",\n\t\t\t\"sop_fromDate\": \"2017-10-15\",\n\t\t\t\"sop_id\": \"12009\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-21\",\n\t\t\t\"sop_fromDate\": \"2017-10-16\",\n\t\t\t\"sop_id\": \"12010\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-22\",\n\t\t\t\"sop_fromDate\": \"2017-10-17\",\n\t\t\t\"sop_id\": \"12011\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-23\",\n\t\t\t\"sop_fromDate\": \"2017-10-18\",\n\t\t\t\"sop_id\": \"12012\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-24\",\n\t\t\t\"sop_fromDate\": \"2017-10-19\",\n\t\t\t\"sop_id\": \"12013\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-25\",\n\t\t\t\"sop_fromDate\": \"2017-10-20\",\n\t\t\t\"sop_id\": \"12014\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-27\",\n\t\t\t\"sop_fromDate\": \"2017-10-22\",\n\t\t\t\"sop_id\": \"12015\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-28\",\n\t\t\t\"sop_fromDate\": \"2017-10-23\",\n\t\t\t\"sop_id\": \"12016\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-29\",\n\t\t\t\"sop_fromDate\": \"2017-10-24\",\n\t\t\t\"sop_id\": \"12017\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-30\",\n\t\t\t\"sop_fromDate\": \"2017-10-25\",\n\t\t\t\"sop_id\": \"12018\"\n\t\t}, {\n\t\t\t\"sop_isChild\": \"on\",\n\t\t\t\"sop_untilDate\": \"2017-10-31\",\n\t\t\t\"sop_fromDate\": \"2017-10-26\",\n\t\t\t\"sop_id\": \"12019\"\n\t\t}\n\t]\n}, \"appUser\" ],\n  \"className\": \"SpecialOffer\",\n  \"functionName\": \"adminSpecialOfferPricingDetail\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves pricing details about a special offer to the database<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;int so_id: `so_id` of the special offer to update  \n&nbsp;&nbsp;string so_fromDate and so_untilDate: Offer Valid From- and Until-Date in format YYYY-MM-DD  \n&nbsp;&nbsp;string so_bookableFromDate and so_bookableUntilDate: Offer Bookable From- and Until-Date in format YYYY-MM-DD  \n&nbsp;&nbsp;int so_nightsStay: Nights value of this special offer  \n&nbsp;&nbsp;int so_minPersons and so_maxPersons: Min Persons and Max Persons value    \n&nbsp;&nbsp;string so_individualCatering: Either \"on\" or \"off\". Value of the \"Auto Costs/Tax Breakdown\" checkbox in the UI  \n&nbsp;&nbsp;string so_anMon - so_anSun: Either \"on\" or \"off\". Corresponds to the Arrival checkboxes in the UI  \n&nbsp;&nbsp;string saveForAll: Either \"on\" or \"off\". Indicates, if the \"Save for all\" button was clicked (in this case it's \"on\")  \n&nbsp;&nbsp;array of objects entityGroup (corresponds to the \"Price:\" table in the UI):  \n&nbsp;&nbsp;{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;float sopeg_price: Price for this agegroup (upper row in the UI if there are 2 rows for this category)  \n&nbsp;&nbsp;&nbsp;&nbsp;int fromAge and toAge: Define the agegroup for this pricing info  \n&nbsp;&nbsp;&nbsp;&nbsp;float sopeg_cateringQuota: The percentage value under the column \"Costs/Tax Breakdown\"  \n&nbsp;&nbsp;&nbsp;&nbsp;float sopeg_roomCharge: Price that's entered in the lower row in the UI  \n&nbsp;&nbsp;&nbsp;&nbsp;int sopeg_entityGroup_id: Id of the room category  \n&nbsp;&nbsp;}<br>\n&nbsp;&nbsp;array of objects specialOfferPeriod (corresponds to the Period list-box in the UI):  \n&nbsp;&nbsp;{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;string sop_isChild: Either \"on\" or \"off\". Indicates if there's a custom price for this period (coming from Period Pricing Tab in the UI) that overrules the main-price (coming from Pricing Tab in the UI). If there's a custom price then this field is \"off\"  \n&nbsp;&nbsp;&nbsp;&nbsp;string sop_fromDate and sop_untilDate: From- and Until-Date of this period in format YYYY-MM-DD  \n&nbsp;&nbsp;&nbsp;&nbsp;int sop_id: Unique id of this period. If this is set to 0 it's an indication to the UI that this period was newly generated by the client  \n&nbsp;&nbsp;}<br>\n}<br><br>\n\nReturn of this request is irrelevant"
			},
			"response": []
		},
		{
			"name": "specialOffers.setIndividualCatering",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"so_individualCatering\":\"on\",\"so_id\":\"60\"}, \"appUser\" ],\n  \"className\": \"SpecialOffer\",\n  \"functionName\": \"setIndividualCatering\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request sets/unsets \"Auto Cost/Tax Breakdown\" for a given special offer<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;int so_id: `so_id` of the special offer  \n&nbsp;&nbsp;string so_individualCatering: Either \"on\" or \"off\". If \"on\" then \"Auto Cost/Tax Breakdown\" will be set, else unset  \n}<br><br>\n\nReturn of this request is irrelevant"
			},
			"response": []
		},
		{
			"name": "specialOffers.getSpecialOfferPeriod",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 60, \"appUser\" ],\n  \"className\": \"SpecialOffer\",\n  \"functionName\": \"getSpecialOfferPeriod\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns details about special-offer-periods<br><br>\n\nparams:  \nint -> `so_id` of the special offer to get details for  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array of objects that is explained in trello"
			},
			"response": []
		},
		{
			"name": "specialOffers.getSpecialOfferPeriodPricingDetailForSOP",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 11527, \"appUser\" ],\n  \"className\": \"SpecialOffer\",\n  \"functionName\": \"getSpecialOfferPeriodPricingDetailForSOP\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request provides pricing details about a specialoffer for a certain period<br><br>\n\nparams:  \nint -> `sop_id` of the special-offer-period  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an object that's explained in detail in trello"
			},
			"response": []
		},
		{
			"name": "specialOffers.adminSpecialOfferPeriodPricingDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"sop_id\": \"11528\",\n\t\"entityGroup\": [{\n\t\t\t\"toAge\": \"150\",\n\t\t\t\"sopeg_entityGroup_id\": \"6\",\n\t\t\t\"sopeg_price\": \"164.00\",\n\t\t\t\"sopeg_cateringQuota\": \"10.00\",\n\t\t\t\"sopeg_roomCharge\": \"0.00\",\n\t\t\t\"fromAge\": \"18\"\n\t\t}, {\n\t\t\t\"toAge\": \"14\",\n\t\t\t\"sopeg_entityGroup_id\": \"6\",\n\t\t\t\"sopeg_cateringQuota\": \"10.00\",\n\t\t\t\"sopeg_price\": \"99.00\",\n\t\t\t\"sopeg_roomCharge\": \"0.00\",\n\t\t\t\"fromAge\": \"0\"\n\t\t}, {\n\t\t\t\"toAge\": \"17\",\n\t\t\t\"sopeg_entityGroup_id\": \"6\",\n\t\t\t\"sopeg_cateringQuota\": \"10.00\",\n\t\t\t\"sopeg_price\": \"162.00\",\n\t\t\t\"sopeg_roomCharge\": \"0.00\",\n\t\t\t\"fromAge\": \"15\"\n\t\t}, {\n\t\t\t\"toAge\": \"150\",\n\t\t\t\"sopeg_entityGroup_id\": \"1\",\n\t\t\t\"sopeg_price\": \"250.00\",\n\t\t\t\"sopeg_cateringQuota\": \"20.00\",\n\t\t\t\"sopeg_roomCharge\": \"0.00\",\n\t\t\t\"so_individualCatering\": \"on\",\n\t\t\t\"fromAge\": \"18\"\n\t\t}, {\n\t\t\t\"toAge\": \"14\",\n\t\t\t\"sopeg_entityGroup_id\": \"1\",\n\t\t\t\"sopeg_cateringQuota\": \"20.00\",\n\t\t\t\"sopeg_price\": \"99.00\",\n\t\t\t\"sopeg_roomCharge\": \"0.00\",\n\t\t\t\"fromAge\": \"0\"\n\t\t}, {\n\t\t\t\"toAge\": \"17\",\n\t\t\t\"sopeg_entityGroup_id\": \"1\",\n\t\t\t\"sopeg_cateringQuota\": \"20.00\",\n\t\t\t\"sopeg_price\": \"162.00\",\n\t\t\t\"sopeg_roomCharge\": \"0.00\",\n\t\t\t\"fromAge\": \"15\"\n\t\t}\n\t]\n}\n, \"appUser\" ],\n  \"className\": \"SpecialOffer\",\n  \"functionName\": \"adminSpecialOfferPeriodPricingDetail\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves pricing details about a special-offer-period to the database<br><br>\r\n\r\nparams:  \r\nobject ->  \r\n{<br>\r\n&nbsp;&nbsp;int sop_id: unique id of the special-offer-period  \r\n&nbsp;&nbsp;array of objects entityGroup:  \r\n&nbsp;&nbsp;[{<br>\r\n&nbsp;&nbsp;&nbsp;&nbsp;int fromAge and toAge: Defines the agegroup for the price. 18 - 150 is the adult agegroup  \r\n&nbsp;&nbsp;&nbsp;&nbsp;int sopeg_entityGroup_id: The room-category  \r\n&nbsp;&nbsp;&nbsp;&nbsp;float sopeg_cateringQuota: The percentage value under the column \"Costs/Tax Breakdown\" (Appars redundantly for each room-category)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;float sopeg_roomCharge: Price that's entered in the lower row in the UI  \r\n&nbsp;&nbsp;}]<br>\r\n},<br>\r\n\"appUser\" -> fixed string<br><br>\r\n\r\nReturn of this request is irrelevant."
			},
			"response": []
		},
		{
			"name": "specialOffers.adminSpecialOfferPeriodPricingDetailReset",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"sop_id\": \"11528\", \"appUser\" ],\n  \"className\": \"SpecialOffer\",\n  \"functionName\": \"adminSpecialOfferPeriodPricingDetailReset\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request resets all special-offer-periods of a special offer. So if certain periods got manually modified these manual changes will be overwritten again.<br><br>\n\nparams:  \nint -> `sop_id` of a special-offer-period. The API will find out itself which special-offer this period belongs to and reset all other special-offer-periods of this special-offer  \n\"appUser\" -> fixed string<br><br>\n\nReturn of this request is irrelevant"
			},
			"response": []
		},
		{
			"name": "specialOffers.getPortalFeatures",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1, \"appUser\" ],\n  \"className\": \"Portal\",\n  \"functionName\": \"getPortalFeatures\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the list of all possible portal features<br><br>\n\nparams:  \nint -> `l_id` of the language to show the features in  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array of objects, it will be explained in trello"
			},
			"response": []
		},
		{
			"name": "specialOffers.getPortalCategories",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1, \"appUser\" ],\n  \"className\": \"Portal\",\n  \"functionName\": \"getPortalCategories\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the list of all possible portal categories<br><br>\n\nparams:  \nint -> `l_id` of the language to show the features in  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array of objects, it will be explained in trello"
			},
			"response": []
		},
		{
			"name": "specialOffers.getCompanyPortal",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1, \"appUser\" ],\n  \"className\": \"Portal\",\n  \"functionName\": \"getCompanyPortal\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns general portal configuration data<br><br>\n\nparams:  \nint -> `l_id` of the language to show the features in  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an object:  \n{<br>\n&nbsp;&nbsp;int p_id: Irrelevant  \n&nbsp;&nbsp;int p_classStars: Stars of the hotel. Can be 0 or 2 - 5  \n&nbsp;&nbsp;int p_classEdelweiss: Number of Edelweiss'. 0 or 2 - 4  \n&nbsp;&nbsp;int p_classFlowers: Number of Flowers. 0 or 2 - 4  \n&nbsp;&nbsp;string p_pic1 and p_pic2: Path to an image. Needs to get prefixed with //media.easy-booking.at  \n&nbsp;&nbsp;string p_classStarsSuperior: Either \"on\" or \"off\". Indicator if this hotel is in the \"Superior\" classification  \n&nbsp;&nbsp;int pl_portal_id: Irrelevant  \n&nbsp;&nbsp;int pl_locale_id: Same as `l_id` inputparameter. Language of the returned values  \n&nbsp;&nbsp;string pl_shortDesc: Short description  \n&nbsp;&nbsp;string pl_welcomeText: Welcome Text  \n&nbsp;&nbsp;string pl_longDescWinter: Long description Winter  \n&nbsp;&nbsp;string pl_longDescSummer: Long description Summer  \n}"
			},
			"response": []
		},
		{
			"name": "portal.uploadImage",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "dbName",
							"value": "srv0010002",
							"type": "text"
						},
						{
							"key": "imageType",
							"value": "p_pic1",
							"type": "text"
						},
						{
							"key": "timeStamp",
							"value": "201991113643533",
							"type": "text"
						},
						{
							"key": "Filedata",
							"type": "file",
							"src": "/D:/Bilder/mushroomTea.jpg"
						}
					]
				},
				"url": {
					"raw": "http://{{SERVERIP}}/wo/Services/com/eBook/imageUpload/ImageUpload.php",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"wo",
						"Services",
						"com",
						"eBook",
						"imageUpload",
						"ImageUpload.php"
					]
				},
				"description": "This request uploads a portal image<br><br>\n\nparams:  \ndbName -> `companyDetails.dbName`  \nimageType -> Either \"p_pic1\" or \"p_pic2\", depending which of the 2 images gets uploaded  \ntimeStamp -> Put in the current time in format YYYYMMDD[hour][minute][seconds][milliseconds]  \nFiledata -> the file to upload"
			},
			"response": []
		},
		{
			"name": "portal.setCompanyPortal",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n  \"l_id\": \"1\",\n  \"features\": [\"10\", \"11\", \"12\", \"13\", \"15\", \"16\", \"17\", \"18\", \"20\", \"21\", \"22\", \"23\"],\n  \"categories\": [\"3\", \"7\"],\n  \"p_classStars\": 0,\n  \"p_classStarsSuperior\": \"off\",\n  \"p_classEdelweiss\": 2,\n  \"p_classFlowers\": 2,\n  \"pl_shortDesc\": \"Short description\",\n  \"pl_welcomeText\": \"Welcome Text\",\n  \"pl_longDescWinter\": \"Long Desc. Winter\",\n  \"pl_longDescSummer\": \"Short Desc. Summer\"\n}\n, \"appUser\" ],\n  \"className\": \"Portal\",\n  \"functionName\": \"setCompanyPortal\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves portal-configuration-details<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;int l_id: Language in which the data is provided to this request  \n&nbsp;&nbsp;array of int features: A list of `fl_feature_id` of features that are checked in the UI  \n&nbsp;&nbsp;array of int categories: A list of `ccl_companyCategory_id` of categories that are checked in the UI  \n&nbsp;&nbsp;int p_classStars: Number of stars from \"Stars\" dropdown  \n&nbsp;&nbsp;string p_classStarsSuperior: Value of the \"Superior\" checkbox, either \"on\" or \"off\"  \n&nbsp;&nbsp;int p_classEdelweiss: Number of Edelweiss  \n&nbsp;&nbsp;int p_classFlowers: Number of Flowers  \n&nbsp;&nbsp;string pl_shortDesc: Short description  \n&nbsp;&nbsp;string pl_welcomeText: Welcome Text  \n&nbsp;&nbsp;string pl_longDescWinter: Long Desc. Winter  \n&nbsp;&nbsp;string pl_longDescSummer: Long Desc. Summer  \n},  \n\"appUser\" -> fixed string<br><br>\n\nReturn of this request is irrelevant"
			},
			"response": []
		},
		{
			"name": "portal.clearImage",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"p_pic2\", \"appUser\" ],\n  \"className\": \"Portal\",\n  \"functionName\": \"clearImage\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request unsets a portal picture<br><br>\n\nparams:  \nstring -> Either \"p_pic1\" or \"p_pic2\". Determines which image shall be cleared  \n\"appUser\" -> fixed string<br><br>\n\nReturn of this request is irrelevant"
			},
			"response": []
		},
		{
			"name": "cms.getCmsActive",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"cms\",\n  \"functionName\": \"getCmsActive\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request shows if this customer has a cms active and if yes which one<br><br>\n\nparams:  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array with only 1 string element that shows the current state of cms of this customer"
			},
			"response": []
		},
		{
			"name": "cms.getCmsText",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1, \"appUser\" ],\n  \"className\": \"cms\",\n  \"functionName\": \"getCmsText\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns heading and html content of cms-pages<br><br>\n\nparams:  \nint -> `l_id` of the language to retrieve data for  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an object. It will be explained in trello"
			},
			"response": []
		},
		{
			"name": "cms.setCmsText",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"what\": \"welcomePage\",\n\t\"heading\": \"Welcome to our homepage!\",\n\t\"locale_id\": \"1\",\n\t\"text\": \"Some <b>HTML</b> text\"\n}\n, \"appUser\" ],\n  \"className\": \"cms\",\n  \"functionName\": \"setCmsText\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves details of CMS \"Pages\" to the databse<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;string what: Either \"welcomePage\" or \"imprintPage\". Determines which type of page gets saved  \n&nbsp;&nbsp;string heading: Heading text  \n&nbsp;&nbsp;int locale_id: `l_id` of the language that data is provided in  \n&nbsp;&nbsp;string text: The HTML text for this page  \n},  \n\"appUser\" -> fixed string<br><br>\n\nReturn is irreleveant"
			},
			"response": []
		},
		{
			"name": "cms.getCmsPic",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"logo\", \"appUser\" ],\n  \"className\": \"cms\",\n  \"functionName\": \"getCmsPic\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the cms-picture of a given type<br><br>\n\nparams:  \nstring -> type of the image. Either \"summer\", \"winter\" or \"logo\"  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array of objects. It will be explained in trello.  \nIt's also possible that the array is empty if there is no image set"
			},
			"response": []
		},
		{
			"name": "cms.deleteCmsPic",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 9, \"appUser\" ],\n  \"className\": \"cms\",\n  \"functionName\": \"deleteCmsPic\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request unsets a cms-picture<br><br>\n\nparams:  \nint -> `ci_id` of the image (as it's returned by `cms.getCmsPic`)  <br>\n\"appUser\" -> fixed string<br><br>\n\nReturn of this request is irrelevant"
			},
			"response": []
		},
		{
			"name": "cms.updateCmsPic",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"ci_id\": \"10\",\n\t\"ci_tag\": \"Some Tag\",\n\t\"ci_sortOrder\": 3\n}\n, \"appUser\" ],\n  \"className\": \"cms\",\n  \"functionName\": \"updateCmsPic\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request updates the tag and sortorder of a given cms-picture<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;int ci_id: unique id of the image  \n&nbsp;&nbsp;string ci_tag: Tag  \n&nbsp;&nbsp;string ci_sortOrder: sort order  \n},  \n\"appUser\" -> fixed string<br><br>\n\nReturn is irrelevant"
			},
			"response": []
		},
		{
			"name": "cms.uploadImage",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "dbName",
							"value": "srv0010002",
							"type": "text"
						},
						{
							"key": "imageType",
							"value": "cmsImage",
							"type": "text"
						},
						{
							"key": "timeStamp",
							"value": "201991113643533",
							"type": "text"
						},
						{
							"key": "Filedata",
							"type": "file",
							"src": "/D:/Bilder/grixigraxilogoimage.png"
						},
						{
							"key": "tagName",
							"value": "___logo___",
							"type": "text"
						},
						{
							"key": "whichOne",
							"value": "logo",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://{{SERVERIP}}/wo/Services/com/eBook/imageUpload/ImageUpload.php",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"wo",
						"Services",
						"com",
						"eBook",
						"imageUpload",
						"ImageUpload.php"
					]
				},
				"description": "This request uploads a cms-image<br><br>\n\nparams:  \nstring dbName: `companyDetails.dbName`  \nstring imageType: \"cmsImage\" (fixed)  \ntimeStamp: Put in the current time in format YYYYMMDD[hour][minute][seconds][milliseconds]  \nFiledata: the file to upload  \ntagName: If the logo is uploaded use \"\\_\\_\\_logo\\_\\_\\_\" else leave empty  \nwhichOne: Type of the image that's uploaded. Either \"summer\", \"winter\" or \"logo\""
			},
			"response": []
		},
		{
			"name": "admin.getCustomers",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"\", 0 ],\n  \"className\": \"CustomerAdmin\",\n  \"functionName\": \"getCustomers\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request provides a list of easybooking-customers. If a search keyword is given only the matching customers will be returned  \n\nparams:  \nstring -> search keyword (can be empty string)  \nint -> reseller id. Provide 0 if no reseller-filter shall be applied<br><br>\n\nReturn is an array of objects that is explained in trello."
			},
			"response": []
		},
		{
			"name": "admin.getCustomerDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 3 ],\n  \"className\": \"CustomerDetail\",\n  \"functionName\": \"getCustomerDetail\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns detail for a certain easybooking customer  \n*Remark: The variable-name c_id is used in another context already in other requests. In the other requests it's referring to customers of easybooking-customers (=guests)  \nHere c_id refers to an easybooking-customer (= some hotel)*<br><br>\n\nparams:  \nint -> `c_id` of the customer<br><br>\n\nReturn is an object. Needed fields are explained in trello"
			},
			"response": []
		},
		{
			"name": "admin.getHotelSoftwareList",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ ],\n  \"className\": \"CustomerAdmin\",\n  \"functionName\": \"getHotelSoftwareList\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the list of possible hotel software names an easybooking customer could use<br><br>\n\nparams: none<br><br>\n\nReturn is a list of objects:  \n{<br>\n&nbsp;&nbsp;int hs_id: unique id of the hotelsoftware entry  \n&nbsp;&nbsp;string hs_name: name of the hotelsoftware  \n}"
			},
			"response": []
		},
		{
			"name": "admin.getResellerList",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ ],\n  \"className\": \"CustomerAdmin\",\n  \"functionName\": \"getResellerList\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the list of possible resellers<br><br>\n\nparams: none<br><br>\n\nReturn is a list of objects:  \n{<br>\n&nbsp;&nbsp;int r_id: unique id of the reseller  \n&nbsp;&nbsp;string r_companyName: name of the reseller  \n}"
			},
			"response": []
		},
		{
			"name": "admin.getCustomerStatus",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ ],\n  \"className\": \"CustomerAdmin\",\n  \"functionName\": \"getCustomerStatus\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the list of possible customer status<br><br>\n\nparams: none<br><br>\n\nReturn is a list of objects:  \n{<br>\n&nbsp;&nbsp;int cs_id: unique id of the status  \n&nbsp;&nbsp;string cs_name: name of the status  \n&nbsp;&nbsp;string cs_sortOrder: sort order key  \n&nbsp;&nbsp;int cs_percDone: Indicator how much percentage of the customer-fullfillment-process is done if the customer is at this status  \n}"
			},
			"response": []
		},
		{
			"name": "admin.clearCache",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"srv0010002\" ],\n  \"className\": \"CustomerDetail\",\n  \"functionName\": \"clearCache\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request clears the booking-calendar-cache for the given database<br><br>\n\nparams:  \nstring -> dbName (`companyDetails.dbName`)<br><br>\n\nReturn is irrelevant"
			},
			"response": []
		},
		{
			"name": "admin.getCustomerUsers",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"srv0010002\" ],\n  \"className\": \"CustomerUsers\",\n  \"functionName\": \"getCustomerUsers\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This reqest returns a list of users that are set up for a given database<br><br>\n\nparams:  \nstring -> `companyDetails.dbName`<br><br>\n\nReturn is an array of objects. It is explained in trello"
			},
			"response": []
		},
		{
			"name": "admin.getCustomerUserDetail",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 455 ],\n  \"className\": \"CustomerUsers\",\n  \"functionName\": \"getCustomerUserDetail\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns details about an easybooking Julia user<br><br>\n\nparams:  \nint -> `aug_id` of the user to show infos for<br><br>\n\nreturn is an object or if the given `aug_id` cannot be found it will be an empty array"
			},
			"response": []
		},
		{
			"name": "admin.deleteCustomerUser",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"aug_dbName\":\"srv0010002\",\"aug_id\":\"424\"}, \"appUser\" ],\n  \"className\": \"CustomerUsers\",\n  \"functionName\": \"deleteCustomerUser\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes a JuliaBackend-User<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;string aug_dbName -> `companyDetails.dbName`  \n&nbsp;&nbsp;int aug_id -> unique id of the user to delete  \n}<br><br>\n\nReturn of this request is irrelevant"
			},
			"response": []
		},
		{
			"name": "admin.updateCustomerUser",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"params\": [{\r\n\t\t\t\"aug_id\": 4,\r\n\t\t\t\"aug_userName\": \"demox\",\r\n\t\t\t\"aug_active\": \"on\",\r\n\t\t\t\"aug_dbName\": \"srv0010002\"\r\n\t\t}, \"srv0010002\" ],\r\n\t\"className\": \"CustomerUsers\",\r\n\t\"functionName\": \"updateCustomerUser\"\r\n}\r\n"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request updates username and active-state of a user<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;int aug_id -> unique id of the user  \n&nbsp;&nbsp;string aug_userName -> username of the user  \n&nbsp;&nbsp;string aug_active -> either \"on\" or \"off\"  \n&nbsp;&nbsp;string aug_dbName -> `companyDetails.dbName`  \n},  \nstring -> `companyDetails.dbName`  <br><br>\n\nIf the specified `aug_userName` is already in use by another user the request will return an array with only 1 string element that's = \"USEREXISTS\"  \nElse the request will return an empty array"
			},
			"response": []
		},
		{
			"name": "admin.resetPassword",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"andilein\", \"srv0010002\" ],\n  \"className\": \"CustomerUsers\",\n  \"functionName\": \"resetPassword\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request resets the password of a given user<br><br>\n\nparams:  \nstring -> username  \nstring -> `companyDetails.dbName`<br><br>\n\nThe request will return an array with only 1 string element that's == \"OK\" if it worked, and \"NOTOK\" if it didn't."
			},
			"response": []
		},
		{
			"name": "admin.insertCustomerUser",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"aug_userName\":\"User123456\",\"aug_dbName\":\"srv0010002\"} ],\n  \"className\": \"CustomerUsers\",\n  \"functionName\": \"insertCustomerUser\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request creates a new user with the given username<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;string aug_userName -> username of the new user  \n&nbsp;&nbsp;string aug_dbName -> `companyDetails.dbName`  \n}<br><br>\n\nThe request will return an array with only 1 element. It's either an integer showing the `aug_id` of the newly created user. Or the string \"USEREXISTS\" if there's already a user with the specified name"
			},
			"response": []
		},
		{
			"name": "admin.getLoginMessage",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 3 ],\n  \"className\": \"LoginMessage\",\n  \"functionName\": \"getLoginMessage\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns details about the currently configured login message<br><br>\n\nparams:  \nint -> The `c_id` of the hotel. That comes from the c_id GET parameter of the JuliaAngular main app<br><br>\n\nReturn will be explained in trello"
			},
			"response": []
		},
		{
			"name": "admin.setLoginMessage",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"c_loginMessageActive\": \"off\",\n\t\"c_id\": \"3\",\n\t\"c_loginMessage\": \"A piece of <b>HTML</b>\",\n\t\"c_loginMessageTitle\": \"Willkommen in unserem Demohotel!\"\n}\n ],\n  \"className\": \"LoginMessage\",\n  \"functionName\": \"setLoginMessage\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves details about the login message<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;string c_loginMessageActive -> Either \"on\" or \"off\", indicates if the login message is currently active  \n&nbsp;&nbsp;int c_id -> customer id of the hotel. Comes from the c_id GET parameter of the JuliaAngular main app  \n&nbsp;&nbsp;string c_loginMessage -> the actual login message (html)  \n&nbsp;&nbsp;string c_loginMessageTitle -> Title of the login message  \n}"
			},
			"response": []
		},
		{
			"name": "admin.getBillableCustomers",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [  ],\n  \"className\": \"CustomerReporting\",\n  \"functionName\": \"getBillableCustomers\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of billable customers including the next billdate  \nIt doesn't need any parameters. Return is explained in trello<br><br>"
			},
			"response": []
		},
		{
			"name": "fileAdmin.renamefolder",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 7, \"another foldername\", \"appUser\" ],\n  \"className\": \"FileAdmin\",\n  \"functionName\": \"renamefolder\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request renames a folder<br><br>\n\nparams:  \nint -> fo_id of the folder to rename  \nstring -> new name of the folder  \n\"appUser\" -> fixed string<br><br>\n\nReturn of this request is irrelevant"
			},
			"response": []
		},
		{
			"name": "fileAdmin.deletefolder",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 5, \"appUser\" ],\n  \"className\": \"FileAdmin\",\n  \"functionName\": \"deletefolder\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes a folder from the fileAdmin folder tree structure.  \nIf there are files in the given folder or it has a subfolder that contains files the request will just do nothing.<br><br>\n\nparams:  \nint -> fo_id of the folder  \n\"appUser\" -> fixed string<br><br>\n\nReturn of this request is irrelevant, it's always returning an empty array."
			},
			"response": []
		},
		{
			"name": "fileAdmin.fileUpload",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "timeStamp",
							"value": "201991113643533",
							"type": "text"
						},
						{
							"key": "dbName",
							"value": "srv0010002",
							"type": "text"
						},
						{
							"key": "fo_id",
							"value": "5",
							"type": "text"
						},
						{
							"key": "fi_name",
							"value": "mushroomTea.jpg",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "/D:/Bilder/mushroomTea.jpg"
						}
					]
				},
				"url": {
					"raw": "http://{{SERVERIP}}/wo/Services/com/util/fileUpload.php",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"wo",
						"Services",
						"com",
						"util",
						"fileUpload.php"
					]
				},
				"description": "This request uploads a given file to the media-server<br><br>\n\nPOST params (form-data):  \ntimeStamp -> Put in the current time in format YYYYMMDD[hour][minute][seconds][milliseconds]  \ndbName -> dbName of the user, comes from companyDetails.dbName  \nfo_id -> fo_id of the folder in the file-admin folder-structure to put the uploaded file into  \nfi_name -> name of the file  \nfile -> the file to upload<br><br>\n\nReturn of this request is irrelevant."
			},
			"response": []
		},
		{
			"name": "templateAdmin.copyDefaultImages",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"itl_emailReason_id\":\"3\",\"itl_locale_id\":\"1\",\"itl_seasonPeriod_id\":\"149\"},\n              \"appUser\"],\n  \"className\": \"EMailTemplateAdmin\",\n  \"functionName\": \"copyDefaultImages\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request (re-)sets the image-configuration of a given season to the default-image-configuration<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;itl_emailReason_id -> er_id of the email-template that the image-config belongs to  \n&nbsp;&nbsp;itl_locale_id -> l_id of the language of the email-template  \n&nbsp;&nbsp;itl_seasonPeriod_id -> sp_id of the seasonPeriod  \n}<br>\n\"appUser\" -> fixed string  \nbool -> OPTIONAL. this is false by default. If set to true, then the default images will only be copied if there are currently no images set at the given season<br><br>\n\nReturnvalue is irrelevant"
			},
			"response": []
		},
		{
			"name": "registrationForm.getGeneralSettings",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"getGeneralSettings\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns all registrationform-serviceproviders that are currently configured for the given hotel<br><br>\n\nparams:  \n\"appUser\" -> fixed string  \nint -> optional parameter. If the rfgs_id of an existing configuration is provided here then only data about this configuration will get returned, not the whole list<br><br>\n\nReturn is an array of objects that contain information about each configuration.  \nIf there's nothing configured then there will be 1 object in the array that has set the field rfgs_id = 0."
			},
			"response": []
		},
		{
			"name": "registrationForm.getRegistrationTypes",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"getRegistrationTypes\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of all possible registrationTypes<br><br>\n\nparams:  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array of objects containing the types"
			},
			"response": []
		},
		{
			"name": "registrationForm.getBookingList",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"fromDate\":\"2018-01-01\",\"untilDate\":\"2020-01-21\",\"statusFilter\":\"all\",\"rfgs_id\":\"2\",\"nameFilter\":\"\"},\n              \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"getBookingList\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of bookings and possibly linked registrationForms for given filter criteria<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;fromDate: string, Begin of period to filter in format YYYY-MM-DD  \n&nbsp;&nbsp;untilDate: string, End of period to filter in format YYYY-MM-DD  \n&nbsp;&nbsp;statusFilter: string, which registrationforms shall be filered. Either \"all\", \"arrived\", \"departed\" or \"notArrived\"  \n&nbsp;&nbsp;rfgs_id: int, id of the registrationForm-service-provider that shall be filtered  \n&nbsp;&nbsp;nameFilter: string, search keyword to filter on, can be empty string  \n}<br>\n\"appUser\" -> fixed string<br><br>\n\nReturn is an array of objects. It will be explained in trello"
			},
			"response": []
		},
		{
			"name": "registrationForm.checkIfChannelManagerBooking",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 848, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"checkIfChannelManagerBooking\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request checks where a booking originated from<br><br>\n\nparams:  \nint -> b_id of the booking to check  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array with only 1 string element that shows the source of a booking.  \nIf this source == \"channelmanager\" then this booking is a channelmanager booking"
			},
			"response": []
		},
		{
			"name": "registrationForm.getGuestTypes",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"getGuestTypes\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request lists all possible guest-types and their translation names<br><br>\n\nparams:  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array of objects:  \n{<br>\n&nbsp;&nbsp;int gt_id: unique id of the guest-type  \n&nbsp;&nbsp;string gt_name: unique keyword of the guest-type (it's in german)  \n&nbsp;&nbsp;string gtl_value: translation name of the guest-type in the language that's given in the request-URL-route  \n}"
			},
			"response": []
		},
		{
			"name": "registrationForm.getBookingInfo",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 383, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"getBookingInfo\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request tells the arrival- and departure-date of a given booking<br><br>\n\nparams:  \nint -> b_id of the booking  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an object with 2 fields:  \n{<br>\n&nbsp;&nbsp;string fromDate: arrivalDate in format YYYY-MM-DD  \n&nbsp;&nbsp;string untilDate: departureDate in format YYYY-MM-DD  \n}"
			},
			"response": []
		},
		{
			"name": "registrationForm.getCountOfLinkedGuests",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 787, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"getCountOfLinkedGuests\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns how many guests are linked in total to a given booking<br><br>\n\nparams:  \nint -> b_id of the booking  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array containing only 1 int element, that's the number of guests"
			},
			"response": []
		},
		{
			"name": "registrationForm.getRegistrationTaxTypes",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\", \"justUsedOnes\", 2 ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"getRegistrationTaxTypes\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of registration tax types for a given registration service configuration<br><br>\n\nparams:  \n\"appUser\" -> fixed string  \nstring -> either \"justUsedOnes\" or \"off\", determines, if ALL possible taxtypes shall be delivered or just used ones  \nint -> rfgs_id of the registration service configuration  \nbool -> indicates, if the request was called by a travel-group-registrationform. If yes then this parameter must be true. This is an optional parameter, default is false<br><br>\n\nReturn is an array of objects, it will be explained in trello"
			},
			"response": []
		},
		{
			"name": "registrationForm.getRegForm",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 84, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"getRegForm\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns information about an existing registrationform and includes data about guests that are connected to this registrationForm<br><br>\n\nparams:  \nint -> rg_id of the registrationForm  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an object containing 2 subobjects:  \n\"regform\": object that contains data about the registrationForm  \n\"bookingGuests\": an array of objects that hold data about the guests"
			},
			"response": []
		},
		{
			"name": "registrationForm.addPersonToBookingGuest",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 525, \"adult\", \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"addPersonToBookingGuest\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request adds a person to a booking-registration-form set<br><br>\n\nparams:  \nint -> b_id of a booking that the person will be added to  \nstring -> Eiterh \"adult\" or \"child\": indicates which type of person to add  \n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "registrationForm.deleteManuallyAddedPerson",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1099, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"deleteManuallyAddedPerson\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This deletes a manually added person from a booking-registrationform set<br><br>\n\nparams:  \nint -> cbrf_id of the person  \n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "registrationForm.getCountriesForGuestGroups",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"getCountriesForGuestGroups\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a special list of countries that's needed for registrationForms.<br><br>\n\nparams:  \nint -> rfgs_id of the registration service configuration  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array of objects, it will be explained in trello"
			},
			"response": []
		},
		{
			"name": "registrationForm.validateGuests",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"(430, 431)\", \"appUser\", 430, 19 ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"validateGuests\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request validates guest data for a set of guests that are identified by cbrf_ids<br><br>\n\nparams:  \nstring -> csv list of cbrf_ids of guests that shall get validated surrounded by brackets. For example \"(430,431)\"  \n\"appUser\" -> fixed string  \nint -> cbrf_id of the main guest  \nint -> rfgs_id of the registration form service provider configuration<br><br>\n\nReturn:  \nEither an empty array if all guests have valid data.  \nOr an array with only 1 element that holds the cbrf_id of a guest with invalid data."
			},
			"response": []
		},
		{
			"name": "registrationForm.saveRegistrationForm",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"rg_fromDate\": \"2018-02-20\",\n\t\"rg_plannedUntilDate\": \"2018-02-26\",\n\t\"rg_untilDate\": \"\",\n\t\"rg_id\": \"102\",\n\t\"rg_number\": \"0\",\n\t\"rfgs_id\": \"19\",\n\t\"rg_registrationType_id\": 1,\n\t\"rg_arrived\": \"off\",\n\t\"rg_departed\": \"off\",\n\t\"booking_id\": \"370\",\n\t\"selectedGuests\": [{\n\t        \"cbrf_id\": \"430\",\n\t\t\t\"cbrf_guestType_id\": 3,\n\t\t\t\"cbrf_registrationTaxType_id\": \"3152\",\n\t\t\t\"cbrf_guestCardNumber\": \"\"\n\t\t}, {\n\t\t\t\"cbrf_id\": \"431\",\n\t\t\t\"cbrf_guestType_id\": 1,\n\t\t\t\"cbrf_registrationTaxType_id\": \"3152\",\n\t\t\t\"cbrf_guestCardNumber\": \"\"\n\t\t}\n\t]\n}, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"saveRegistrationForm\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves all data of a registrationform to DB and sends it to the registration service provider<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;string rg_fromDate: Arrival date in format YYYY-MM-DD  \n&nbsp;&nbsp;string rg_plannedUntilDate: Planned departure date in format YYYY-MM-DD  \n&nbsp;&nbsp;string rg_untilDate: Actual Departure date in format YYYY-MM-DD (can be empty string)  \n&nbsp;&nbsp;int rg_id: If an existing registration form gets updated put its rg_id here. Else use -1 as value for this parameter.  \n&nbsp;&nbsp;int rg_number: If an existing regform gets updated put its rg_number here. Else use -1.  \n&nbsp;&nbsp;int rfgs_id: Id of the registrationform configuration  \n&nbsp;&nbsp;int rg_registrationType_id: Numeric Id of the registration form type (the types are Individual, Travel Group or Travel Group Detail)  \n&nbsp;&nbsp;string rg_arrived: Either 'on' or 'off', reflects the status of the \"Arrived\" checkbox  \n&nbsp;&nbsp;string rg_departed: Either 'on' or 'off', reflects the status of the \"Departed\" checkbox  \n&nbsp;&nbsp;int booking_id: b_id of the related booking (comes from request registrationForm.getBookingList)  \n&nbsp;&nbsp;string rg_travelPurpose: Optional parameter that's only needed for provider Wilken. Can be either: \"holiday\", \"cure\", \"business\" or \"sport\"  \n<br>\n**Only pass the following array to the request if rg_registrationType_id is either 1 or 3 (Individual or Travel Group Detail):**  \n&nbsp;&nbsp;array of objects `selectedGuests`:  \n&nbsp;&nbsp;{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;int cbrf_id: unique id of the guest (came from guestDetails.getBookingGuests)  \n&nbsp;&nbsp;&nbsp;&nbsp;int cbrf_guestType_id: id of the guest-type (comes from dropdown in UI, links to for example \"Main Guest\", \"Traveling Person\"...)  \n&nbsp;&nbsp;&nbsp;&nbsp;int cbrf_registrationTaxType_id: id of the tax-type (comes from dropdown in UI)  \n&nbsp;&nbsp;&nbsp;&nbsp;string cbrf_guestCardNumber: Number of guest card. Can be an empty string.  \n&nbsp;&nbsp;}<br>\n<br>\n**Only pass the following fields to the request if rg_registrationType_id is 2 (Travel Group)**  \n&nbsp;&nbsp;array of objects `guestGroupCountries` (Describes \"Travel Group Guests\" from the UI):  \n&nbsp;&nbsp;{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;int rtt_id: id of the Guest Type (also called tax-type)  \n&nbsp;&nbsp;&nbsp;&nbsp;int rfc_id: id of the Country of Origin  \n&nbsp;&nbsp;&nbsp;&nbsp;int cnt: count of guests for this Guest Type and Country  \n&nbsp;&nbsp;}<br>\n&nbsp;&nbsp;int tourLeader_cbrf_id: cbrf_id of the tourleader  \n&nbsp;&nbsp;int tourLeader_cbrf_registrationTaxType_id: id of the tax-type of the tourleader  \n&nbsp;&nbsp;string tourLeader_cbrf_guestCardNumber: Number of guest card. Can be an empty string.  \n<br>\n}<br><br><br><br>\n\n**Return** is an object:  \n{<br>\n&nbsp;&nbsp;string status: Can be either \"success\" or \"error\"  \n&nbsp;&nbsp;array of objects errors (will be only present if status == \"error\"):  \n&nbsp;&nbsp;{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;string code: Error-code, usually a number, but in rare cases can be a string  \n&nbsp;&nbsp;&nbsp;&nbsp;string text: Error message  \n&nbsp;&nbsp;}<br>\n&nbsp;&nbsp;int retId: If the save request was called to create a new regform this will contain the rg_id of the newly created regform  \n&nbsp;&nbsp;int departed_rg_id: This contains the rg_id that has already been in the input-parameters if the saving process was about setting a regform to departed = 'on' that was only arrived = 'on' and not departed = 'on' yet  \n}"
			},
			"response": []
		},
		{
			"name": "registrationForm.forceSetDeparture",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 6, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"forceSetDeparture\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request sets a given registration form locally to departed, without sending anything to the registrationform service provider<br><br>\n\nparams:  \nint -> rg_id of the regform to set to departed  \n\"appUser\" -> fixed string<br><br>\n\nReturn is irrelevant, it's always an empty array"
			},
			"response": []
		},
		{
			"name": "registrationForm.getRegformList",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"rfgs_id\": \"1\",\n\t\"fromDate\": \"2018-01-01\",\n\t\"untilDate\": \"2020-02-29\",\n\t\"filterNumberFrom\": \"\",\n\t\"filterNumberUntil\": \"\",\n\t\"mode\": 4,\n\t\"nameFilter\": \"\",\n\t\"filterType\": 0\n}\n, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"getRegformList\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of registration forms, filtered on given criteria<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;int rfgs_id: unique id of the registration form service provider configuration (hotel name dropdown in UI)  \n&nbsp;&nbsp;string fromDate and untilDate: Optional! Period of time to filter regforms on (format YYYY-MM-DD)  \n&nbsp;&nbsp;int filterNumberFrom, filterNumberUntil: Optional! Range of regform numbers to filter  \n&nbsp;&nbsp;int mode: Indicates the tab-index of the currently selected tab in the UI. \"In Preparation\" = 2, \"Arrived\" = 3 and \"Departed\" = 4  \n&nbsp;&nbsp;string nameFilter: Search text, coming from the \"Name\" inputbox of the UI  \n&nbsp;&nbsp;int filterType: Indicates which registration form type shall be shown. (0 = show all). Comes from Registration Form type dropdown of the UI (rtl_registrationType_id)  \n}<br>\n\"appUser\" -> fixed string<br><br>\n\nReturn is an array of objects. It will be explained in trello"
			},
			"response": []
		},
		{
			"name": "registrationForm.getPrintLink",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"rfgs_id\":\"13\",\"prepareregforms\":false,\"rg_number\":\"28332\",\"batchprint\":true,\"rg_ids\":\"52\"}\n, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"getPrintLink\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request generates a printlink for given registration forms<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;int rfgs_id: unique id of the registration form service provider configuration (hotel name dropdown in UI)  \n&nbsp;&nbsp;int rg_ids: csv-list of registrationform ids (only relevant for batch-printing)  \n&nbsp;&nbsp;int rg_id: a single regform id (only relevant if NOT batch-printing)  \n&nbsp;&nbsp;string rg_number: csv-list of registrationform numbers (but can be also a single number without a comma in the string if just 1 regform gets printed)  \n**Optional Parameters**  \n&nbsp;&nbsp;bool prepareregforms: Indicates if this was called while the \"In Preparation\" tab was active in the UI (true if yes)  \n&nbsp;&nbsp;string rg_numberInternal: An alternative number that can also identify a regform  \n&nbsp;&nbsp;bool batchprint: Indicates if multiple registrationforms get printed  \n\n}<br><br>\n\nReturn is an object:  \n{<br>\n&nbsp;&nbsp;string url: If this string starts with a / character then this is a path relative to the current webserver-root, else it's a full path (starting with https://...)  \n&nbsp;&nbsp;string sessionid: Can be an empty string. Certain service-providers provide a session-id for print-sessions. Before a new print-session gets started the old one must get cancelled  \n&nbsp;&nbsp;array of objects postParams (only present if a certain service provider is used):  \n&nbsp;&nbsp;[{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;string name: POST parameter name  \n&nbsp;&nbsp;&nbsp;&nbsp;string value: POST parameter value  \n&nbsp;&nbsp;}]<br>\n}"
			},
			"response": []
		},
		{
			"name": "registrationForm.markDeparted",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"20,21\", \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"markDeparted\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This requests sets registrationsforms to departed without sending the departure to the regform service provider<br><br>\n\nparams:  \nstring -> csv list of rg_id (can be also a single number)  \n\"appUser\" -> fixed string<br><br>\n\nReturn is irrelevant, it's always an empty array"
			},
			"response": []
		},
		{
			"name": "registrationForm.printLinkLogout",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"sessionid\":\"5587b457-6c5a-4707-bef0-f492ab56560d\",\"rfgs_id\":\"3\"}, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"printLinkLogout\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request logs out a current printing session of a regform to make it possible to start a new one<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;string sessionid: sessionid of the session to logout from  \n&nbsp;&nbsp;int rfgs_id: id of the regform service provider  \n}<br><br>\n\nReturn is irrelevant, the request is always returning an empty array"
			},
			"response": []
		},
		{
			"name": "registrationForm.getWilkenGuestCardPrintLink",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 109, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"getWilkenGuestCardPrintLink\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request generates a URL that leads directly to a guest-card-printing page.<br><br>\n\nparams:  \nint -> rg_id of the registrationform  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an object:  \n{<br>\n&nbsp;&nbsp;string status: Either \"ok\" or \"error\"  \n&nbsp;&nbsp;int code: Numeric error code. This field will be only present if status == \"error\".  \n&nbsp;&nbsp;string text: Description of the error. Only present if status == \"error\"  \n&nbsp;&nbsp;string url: The printlink to the guest-card-printing page. This is an absolute path including https, domain and so on. The field is only present if status == \"ok\"  \n}"
			},
			"response": []
		},
		{
			"name": "registrationForm.validateGuestsForRgId",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 109, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"validateGuestsForRgId\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request validates guest data of all guests that are currently linked to a given registrationform<br><br>\n\nparams:  \nint -> rg_id of the registrationform  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an object:  \n{<br>\n&nbsp;&nbsp;string status: Either \"OK\" or \"ERROR\"  \n**In case of \"ERROR\":**  \n&nbsp;&nbsp;int cbrf_id: Points to the customer-record that causes problems in validation  \n&nbsp;&nbsp;int booking_id: The b_id of the booking that this registrationform belongs to  \n**In case of \"OK\":**  \n&nbsp;&nbsp;int rg_id: Same as the input-parameter  \n}"
			},
			"response": []
		},
		{
			"name": "logBackendEvent",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \n{\n  \"be_ip\": \"\",\n  \"be_browser\": \"Chrome 80.0.3987.149\",\n  \"be_dbName\": \"srv0010002\",\n  \"be_operatingSystem\": \"Windows NT 4.0\",\n  \"be_screenSize\": \"1920 x 1200\",\n  \"be_isMobile\": \"false\",\n  \"be_hotelName\": \"DemohotelTechnik Test\",\n  \"be_id\": \"0\",\n  \"be_longDesc\": \"andreas\",\n  \"eventType\": \"BackEnd\",\n  \"be_shortDesc\": \"INIT\",\n  \"be_eventDate\": \"\"\n}, \"srv0010002\" ],\n  \"className\": \"AppClass\",\n  \"functionName\": \"logBackEndEvent\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request is used to log client inits and logouts and to log data about clients (browser, operating system, screen resolution...)<br><br>\n\nparams:  \nThe only input parameter is an object.<br><br>\n\nObject to use at client-Init:  \n{<br>\n&nbsp;&nbsp;string be_ip: use empty string  \n&nbsp;&nbsp;string be_browser: comes from AC_OETags.js -> detectBrowser()  \n&nbsp;&nbsp;string be_dbName: `companyDetails.dbName`  \n&nbsp;&nbsp;string be_operatingSystem: AC_OETags.js -> detectOS()  \n&nbsp;&nbsp;string be_screenSize: AC_OETags.js -> detectScreensize()  \n&nbsp;&nbsp;string be_isMobile: AC_OETags.js -> detectMobile()  \n&nbsp;&nbsp;string be_hotelName: `companyDetails.c_name`  \n&nbsp;&nbsp;int be_id: Use 0 (zero)  \n&nbsp;&nbsp;string be_longDesc: `companyDetails.username`  \n&nbsp;&nbsp;string eventType: Use \"BackEnd\"  \n&nbsp;&nbsp;string be_shortDesc: Use \"INIT\"  \n&nbsp;&nbsp;string be_eventDate: Use empty string  \n}<br><br>\n\nObject for Logout:  \n{<br>\n&nbsp;&nbsp;string be_ip: use empty string,  \n&nbsp;&nbsp;string eventType: Use \"BackEnd\",  \n&nbsp;&nbsp;string be_longDesc: Use empty string,  \n&nbsp;&nbsp;string be_hotelName: Use empty string,  \n&nbsp;&nbsp;string be_id: Use the id that was returned at the Init-request,  \n&nbsp;&nbsp;string be_eventDate: Use empty string,  \n&nbsp;&nbsp;string be_shortDesc: Use \"LogOut\",  \n&nbsp;&nbsp;string be_dbName: Use empty string  \n}<br><br>\n\n**Return**  \nIf the request is called with the client-Init object it will return an array with only 1 int element: This is the id of the client-session.  \nThis id needs to be used in the Logout-Object for this request (\"be_id\") and also at request `sendAliveSignal`.  <br>\nAt the Logout request the return is irrelevant."
			},
			"response": []
		},
		{
			"name": "getCurrentVersion",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ ],\n  \"className\": \"notificationMessages\",\n  \"functionName\": \"getCurrentVersion\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the current client-version. No input parameters needed.  \nReturn is an array with only 1 string element that is the current version number (for example \"2.3.76\")"
			},
			"response": []
		},
		{
			"name": "registrationForm.reOrderProviders",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ [{\n\t\t\"rfgs_id\": \"19\",\n\t\t\"rfgs_sortOrder\": 1\n\t}, {\n\t\t\"rfgs_id\": \"25\",\n\t\t\"rfgs_sortOrder\": 2\n\t}, {\n\t\t\"rfgs_id\": \"1\",\n\t\t\"rfgs_sortOrder\": 3\n\t}, {\n\t\t\"rfgs_id\": \"7\",\n\t\t\"rfgs_sortOrder\": 4\n\t}, {\n\t\t\"rfgs_id\": \"4\",\n\t\t\"rfgs_sortOrder\": 5\n\t}, {\n\t\t\"rfgs_id\": \"5\",\n\t\t\"rfgs_sortOrder\": 6\n\t}, {\n\t\t\"rfgs_id\": \"9\",\n\t\t\"rfgs_sortOrder\": 7\n\t}, {\n\t\t\"rfgs_id\": \"3\",\n\t\t\"rfgs_sortOrder\": 8\n\t}, {\n\t\t\"rfgs_id\": \"6\",\n\t\t\"rfgs_sortOrder\": 9\n\t}, {\n\t\t\"rfgs_id\": \"13\",\n\t\t\"rfgs_sortOrder\": 10\n\t}, {\n\t\t\"rfgs_id\": \"21\",\n\t\t\"rfgs_sortOrder\": 11\n\t}, {\n\t\t\"rfgs_id\": \"2\",\n\t\t\"rfgs_sortOrder\": 12\n\t}, {\n\t\t\"rfgs_id\": \"23\",\n\t\t\"rfgs_sortOrder\": 13\n\t}\n]\n, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"reOrderProviders\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request sets the sortorder of the configuration-list.<br><br>\n\nparams:  \narray of objects ->  \n[{  <br>\n&nbsp;&nbsp;int rfgs_id: unique id of this configuration item  \n&nbsp;&nbsp;int rfgs_sortOrder: sorting index of this item  \n}],<br>\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "registrationForm.getProviders",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"getProviders\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of all possible registration form providers. No input parameters needed.  \nReturn is an array of objects that is explained in trello."
			},
			"response": []
		},
		{
			"name": "registrationForm.newConfiguration",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"rfgs_name\":\"test2\"}, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"newConfiguration\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request adds a new registration-form configuration.<br><br>\n\nparams:  \nobject -> { string rfgs_name: Name of the new configuration }  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array with only 1 int element. This is the `rfgs_id` (unique id) of the newly created configuration"
			},
			"response": []
		},
		{
			"name": "registrationForm.deleteConfiguration",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 26, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"deleteConfiguration\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes a registration-form configuration.<br><br>\n\nparams:  \nint -> the `rfgs_id` of the configuration  \n\"appUser\" -> fixed string<br><br>\n\nReturn of this request is irrelevant."
			},
			"response": []
		},
		{
			"name": "registrationForm.setGeneralSettings",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\n\t\"rfgs_name\": \"Demo Feratel\",\n\t\"rfgs_id\": \"1\",\n\t\"cf_desklineEdition\": \"on\",\n\t\"saveDesklineEdition\": \"on\",\n\t\"rfgs_password\": \"EASYB\",\n\t\"rfgs_altLink\": \"http:\\/\\/capcorn.medatec.at\",\n\t\"rfgs_communityNumber\": \"41503\",\n\t\"rfgs_businessIndicator\": \"96329\",\n\t\"rfgs_guestCardSeparate\": \"off\",\n\t\"rfgs_mcNumber\": \"84227\",\n\t\"grp_id\": 1,\n\t\"rfgs_username\": \"EASYB\",\n\t\"rfgs_clientCode\": \"leftfield\",\n\t\"rfgs_code\": \"rightfield\",\n\t\"rfgs_emailToFeratel\": \"off\"\n}\n, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"setGeneralSettings\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves details of a registration form configuration.  \nIf one of the inputboxes/checkboxes is not visible in the UI just forward the value that was originally returned by `registrationForm.getGeneralSettings`<br><br>\n\nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;string rfgs_name: corresponds with \"Hotel Name\" inputbox of the UI  \n&nbsp;&nbsp;int rfgs_id: unique id of the configuration as it was returned by request `registrationForm.getGeneralSettings` (It's also named `rfgs_id` there)  \n&nbsp;&nbsp;string cf_desklineEdition: Either \"on\" or \"off\". Corresponds with the \"V3.0\" checkbox in the UI  \n&nbsp;&nbsp;string saveDesklineEdition: Either \"on\" or \"off\". Provide \"on\", if the \"V3.0\" checkbox is visible in the UI and \"off\" if not  \n&nbsp;&nbsp;string rfgs_password: \"Password\" inputbox of the UI  \n&nbsp;&nbsp;string rfgs_altLink: \"Alternative Provider Link\" inputbox  \n&nbsp;&nbsp;string rfgs_communityNumber: \"Local Community Number\" inputbox  \n&nbsp;&nbsp;string rfgs_businessIndicator: \"Company Flag\" inputbox  \n&nbsp;&nbsp;string rfgs_guestCardSeparate: \"Guest Card Printing Paper\" checkbox  \n&nbsp;&nbsp;string rfgs_mcNumber: \"MCNumber\" inputbox  \n&nbsp;&nbsp;int grp_id: `grp_id` of the selected element of the \"Reporting Client Provider\" dropdown  \n&nbsp;&nbsp;string rfgs_username: \"User\" inputbox  \n&nbsp;&nbsp;string rfgs_clientCode: Left inputbox at \"Client Code\"  \n&nbsp;&nbsp;string rfgs_code: Right inputbox at \"Client Code\"  \n&nbsp;&nbsp;string rfgs_emailToFeratel: Either \"on\" or \"off\". Corresponds with the checkbox \"Include email in guest data\"  \n},<br>\n\"appUser\" -> fixed string<br><br>\n\nReturn of this request is irrelevant."
			},
			"response": []
		},
		{
			"name": "admin.getCentralSalutation",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ ],\n  \"className\": \"AppClass\",\n  \"functionName\": \"getCentralSalutation\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a minimalistic version of salutations. No input parameters needed."
			},
			"response": []
		},
		{
			"name": "registrationForm.getNumberRanges",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 19, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"getNumberRanges\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns details about number ranges<br><br>\n\nparams:  \nint -> the `rfgs_id` of the configuration  \n\"appUser\" -> fixed string<br><br>\n\n**Return is an object:**  \n{<br>\n&nbsp;&nbsp;int maxRgNumber: The last used registrationform number  \n&nbsp;&nbsp;string enableAddButton: Eiter \"on\" or \"off\". Determines, if the \"Add Number Circle\" button should be enabled (\"on\") or disabled (\"off\")  \n&nbsp;&nbsp;string disableNumberRangeEditing: Either \"on\" or \"off\". Determines, if the \"Save\" button should be enabled (\"off\") or disabled (\"on\")  \n&nbsp;&nbsp;array of objects ranges: [<br>\n&nbsp;&nbsp;{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;int rfnr_id: unique id of the number range  \n&nbsp;&nbsp;&nbsp;&nbsp;int rfnr_from: start number of this number range  \n&nbsp;&nbsp;&nbsp;&nbsp;int rfnr_until: end number of this number range  \n&nbsp;&nbsp;&nbsp;&nbsp;string enabled: Either \"on\" or \"off\". Determines, if this number range should be editable. If this is \"off\" disable the corresponding inputboxes  \n&nbsp;&nbsp;}<br>\n&nbsp;&nbsp;]<br>\n}<br><br>"
			},
			"response": []
		},
		{
			"name": "registrationForm.insertNumberRange",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 19, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"insertNumberRange\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request inserts a blank, new registration form number range into the database<br><br>\n\nparams:  \nint -> the `rfgs_id` of the configuration  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an object. It's irrelevant for the client"
			},
			"response": []
		},
		{
			"name": "registrationForm.updateNumberRanges",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 19,\n      [{\n\t\t\"rfnr_id\": \"4870\",\n\t\t\"rfnr_from\": \"1000000\",\n\t\t\"rfnr_until\": \"1009997\"\n\t}, {\n\t\t\"rfnr_id\": \"4868\",\n\t\t\"rfnr_from\": \"2000000\",\n\t\t\"rfnr_until\": \"2009999\"\n\t}\n]\n, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"updateNumberRanges\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request updates registration form number ranges data<br><br>\n\nparams:  \nint -> the `rfgs_id` of the configuration  \narray of objects ->  \n[{<br>\n&nbsp;&nbsp;int rfnr_id: unique id of the number range  \n&nbsp;&nbsp;int rfnr_from: start number of this number range  \n&nbsp;&nbsp;int rfnr_until: end number of this number range  \n]}<br>\n\"appUser\" -> fixed string<br><br>\n\nReturn is irrelevant"
			},
			"response": []
		},
		{
			"name": "registrationForm.saveMyGuestTypes",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ [{\n\t\t\"global_rtt_id\": \"429\"\n\t}, {\n\t\t\"global_rtt_id\": \"158\"\n\t}, {\n\t\t\"global_rtt_id\": \"159\"\n\t}\n], 19, \"appUser\"\n],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"saveMyGuestTypes\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves a list of tax-types that are used by a given registration form configuration<br><br>\n\nparams:  \narray of objects -> [ { int global_rtt_id: unique id of a tax type as it's returned by `registrationForm.getRegistrationTaxTypes` (It's also named `global_rtt_id` there  }]  \nint -> `rfgs_id` of a registrationform configuration  \n\"appUser\" -> fixed string<br><br>\n\nreturn of this request is irrelevant"
			},
			"response": []
		},
		{
			"name": "templateAdmin.getAttachment",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 3, 1, 174, \"appUser\" ],\n  \"className\": \"EMailTemplateAdmin\",\n  \"functionName\": \"getAttachment\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns information about attachments that are linked to a certain email template.<br><br>\n\nparams:  \nint -> `er_id`, unique id of the emailReason (for example 3 would be \"EnquiryCustomerEMail\")  \nint -> `l_id`, unique id of the locale_id (for example 2 = german)  \nint -> `sp_id`, unique id of the season  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array of objects. It's explained in trello"
			},
			"response": []
		},
		{
			"name": "billing.checkCleanupChargeSeparateSetting",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"BillingWorkbench\",\n  \"functionName\": \"checkCleanupChargeSeparateSetting\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the current state of the \"Is cleanup charge separate?\" setting  \n\nparams:  \n\"appUser\" -> fixed string<br><br>\n\nreturn of this request is an array with only 1 string element that is either \"on\" or \"off\" and represents the current state of the setting"
			},
			"response": []
		},
		{
			"name": "createEventsPDFForBooking",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1163, \"off\", \"srv0010002\" ],\n  \"className\": \"feratelEvents\",\n  \"functionName\": \"createEventsPDFForBooking\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request creates a PDF at the webserver that contains guest-information about events that take place in the region where the guest has the stay.  \n\nparams:  \nint -> b_id, unique id of the booking  \nstring -> If this is \"on\" then the hotel-version of the PDF will be created. At any other value the guest-version  \nstring -> `companyDetails.dbName`<br><br>\n\nReturn is an array that only contains 1 string element which is the absolute path of the PDF at the webserver, for example:  \n\"/var/www/html/wo/Services/emailPDF/srv0010002/1163_events_20200612123313_991888_customer.pdf\"  \nThe webserver root is under /var/www/html/, so the client needs to remove that from the returned path to navigate to the final destination, for example:  \nhttps://test3.easy-booking.at/wo/Services/emailPDF/srv0010002/1163_events_20200612123313_991888_customer.pdf  \n(The PDF will be always created at the webserver that's target to this request, so in the example createEventsPDFForBooking was called at test-eb-3.easy-booking.at)"
			},
			"response": []
		},
		{
			"name": "billingOverview.createBillBillVersionStandAlone",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"2020-10-22\", \"2020-10-22\", \"srv0010002\" ],\n  \"className\": \"Billing\",\n  \"functionName\": \"createBillBillVersionStandAlone\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This requests creates a new, empty standalone bill (standalone = a bill that is not linked to a booking).<br><br>\n\nparams:  \nstring -> bill-fromdate to use in format YYYY-MM-DD. Provide the current date  \nstring -> bill-untildate to use in format YYYY-MM-DD. Provide the current date  \nstring -> database name (`companyDetails.dbName`)\n<br><br>\nReturn ist an object with 2 fields:  \n{  <br>\n&nbsp;&nbsp;int billId: The `bill_id` value to use as input for the `getBillVersionDetail` request that will be usually the next step after this request  \n&nbsp;&nbsp;int billVersionId: Just additional information, not needed for the client (contains `billVersion.bv_id` of the created billVersion record from the billVersion DB table)  \n}"
			},
			"response": []
		},
		{
			"name": "billingOverview.cleanupStandaloneBill",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1581, \"appUser\" ],\n  \"className\": \"BillingWorkbench\",\n  \"functionName\": \"cleanupStandaloneBill\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request cleans up a standalone bill from the database.<br><br>\n\nparams:  \nint -> bill_id of the bill to clean up  \n\"appUser\" -> fixed string<br><br>\n\nreturn value is irrelevant (just an empty array)"
			},
			"response": []
		},
		{
			"name": "CompanyCustomerAdmin.getAutoAnonymizationSettings",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"CompanyCustomerAdmin\",\n  \"functionName\": \"getAutoAnonymizationSettings\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the needed values for the GDPR tab in the guest admin settings<br><br>\r\n\r\nparams:  \r\n\"appUser\" -> fixed string<br><br>\r\n\r\nReturn is explained in https://gitlab.easy-booking.at/easybooking/juliaangular/-/issues/84"
			},
			"response": []
		},
		{
			"name": "CompanyCustomerAdmin.excelExportAnonymizationReport",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"CompanyCustomerAdmin\",\n  \"functionName\": \"excelExportAnonymizationReport\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns an html-table and sets some headers so the output will get interpreted as an Excel-file to download by the browser<br><br>\r\n\r\nparams:  \r\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "CompanyCustomerAdmin.setAutoAnonymizationSettings",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \n      { \n          \"c_autoAnonymizationDays\" : 30,\n          \"c_autoAnonymize\" : \"1\",\n          \"c_autoAnonymizeEmailToGuest\" : \"0\",\n          \"c_hideAnonymizedGuests\" : \"1\",\n          \"c_anonymizeIcal\" : \"on\"\n      }, \n  \"appUser\" ],\n  \"className\": \"CompanyCustomerAdmin\",\n  \"functionName\": \"setAutoAnonymizationSettings\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request saves settings done in the GDPR tab of the guest admin settings. Which field name belongs to which field in the UI is explained in https://gitlab.easy-booking.at/easybooking/juliaangular/-/issues/84\r\n<br><br>\r\n\r\nparams:  \r\nobject -> contains values of settings (check the example body, it contains all the needed fields)  \r\n\"appUser\" -> fixed string<br><br>\r\n\r\nReturn of this function is irrelevant, it's always returning an empty array"
			},
			"response": []
		},
		{
			"name": "AppClass.setCompanyFlag",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"cmDirectConnectNotInterested\", \"1\", \"appUser\" ],\n  \"className\": \"AppClass\",\n  \"functionName\": \"setCompanyFlag\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "bookingSource.getCMDirectConnectLink",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"bookingSource\",\n  \"functionName\": \"getCMDirectConnectLink\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "PricingTestConsole.getEntityList",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 6, \"appUser\" ],\n  \"className\": \"PricingTestConsole\",\n  \"functionName\": \"getEntityList\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns an array of rooms (\"entities\") that are linked to a given category (\"entityGroup\")<br><br>\r\n\r\nparams:  \r\nint -> `eg_id` of the category  \r\n\"appUser\" -> fixed string<br><br>\r\n\r\nReturn is an array of objects:  \r\n{<br>\r\n&nbsp;&nbsp;int e_id: unique `e_id` of the room  \r\n&nbsp;&nbsp;string e_uniqueNo: Name of the room, can be also a non-numeric string  \r\n}<br>\r\nThe request will return an array with only 1 string element \"ZERO\" if there are no rooms linked to the given category"
			},
			"response": []
		},
		{
			"name": "PricingBefe.getMinMaxPersons",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 185, \"2020-12-10\", \"srv0010002\" ],\n  \"className\": \"PricingBEFE\",\n  \"functionName\": \"getMinMaxPersons\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request tells the min- and max-persons for a given room<br><br>\r\n\r\nparams:  \r\nint -> `e_id` of the room  \r\nstring -> arrival-date in format YYYY-MM-DD  \r\ndbName -> comes from `companyDetails.dbName`<br><br>\r\n\r\nReturn is an object with 2 fields:  \r\n{<br>\r\n&nbsp;&nbsp;int bc_minPersons: min persons in this room  \r\n&nbsp;&nbsp;int bc_maxPersons: max persons in this room  \r\n}<br>\r\nIf the given room cannot be found in the database an empty array will get returned"
			},
			"response": []
		},
		{
			"name": "PricingBefe.getServiceTypeForPeriod",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 185, \"2020-12-10\", 3, 2, \"srv0010002\" ],\n  \"className\": \"PricingBEFE\",\n  \"functionName\": \"getServiceTypeForPeriod\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns a list of possible catering options for given stay-criteria<br><br>\r\n\r\nparams:  \r\nint -> `e_id` of the room  \r\nstring -> arrivaldate in format YYYY-MM-DD  \r\nint -> number of nights for the stay  \r\nint -> `locale_id` of the language to display the catering options in. Use `companyDetails.c_beLocale_id`  \r\nstring -> dbName. Use `companyDetails.dbName`<br><br>\r\n\r\nReturn is an array of objects:  \r\n{<br>\r\n&nbsp;&nbsp;int st_id: unique id of the catering type (called \"serviceType\" in the database)  \r\n&nbsp;&nbsp;string stl_name: Translated name of the catering type  \r\n&nbsp;&nbsp;string st_name: Administrative name of the catering type (sort of a unique id in the form of a string)  \r\n&nbsp;&nbsp;string isDefault: Either \"on\" or \"off\". Indicates if this is the default catering type  \r\n}"
			},
			"response": []
		},
		{
			"name": "PricingBefe.getPricingForBEFE",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 186\n              ,\"2020-03-31\"\n              ,2\n              ,2\n              ,5\n              ,\"2019-12-05\"\n              ,1\n              ,1\n              ,\"OverNight\"\n              ,1\n              ,0\n              ,\"en_GB\"\n              ,\"srv0010002\" \n            ],\n  \"className\": \"PricingBEFE\",\n  \"functionName\": \"getPricingForBEFE\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns pricing details about given pricing criteria<br><br>\r\n\r\nparams:  \r\nint -> `e_id` of the room  \r\nstring -> arrival date in format YYYY-MM-DD  \r\nint -> number of nights of the stay  \r\nint -> number of adults  \r\nint -> number of children  \r\nstring -> CSV list of date of birth of the children. If there are no children provide an empty string. If there are multiple dates they are delimitted by ;. Example: 2019-12-05;2020-12-11  \r\nint -> number of small pets  \r\nint -> number of large pets  \r\nstring -> catering type  \r\nint -> number of cots  \r\nint -> number of garages  \r\nstring -> use \"en_GB\" fixed  \r\nstring -> dbname, use `companyDetails.dbName`<br><br>\r\n\r\nReturn is a big object containing a lot of details. The needed details will be explained in the relevant task-description"
			},
			"response": []
		},
		{
			"name": "enquiryPool.getEQPMaxId",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"enquiryPool\",\n  \"functionName\": \"getEQPMaxId\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the current max-id of the table that stores enquirypool-enquiries<br><br>\r\n\r\nparams:  \r\n\"appUser\" -> fixed string<br><br>\r\n\r\nReturn is an array that only contains 1 int element which is the max-id."
			},
			"response": []
		},
		{
			"name": "enquiryPool.pollForFeratelDesklineEnquiry",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \n              { \"currentMaxId\": 947 },\n              \"appUser\" \n            ],\n  \"className\": \"enquiryPool\",\n  \"functionName\": \"pollForFeratelDesklineEnquiry\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request checks if a new enquiry arrived in the enquirypool that has a higher id than an id that's provided.<br><br>\r\n\r\nparams:  \r\nobject -> { int currentMaxId: Contains the current max-id as previously retrieved by request `enquiryPool.getEQPMaxId` }  \r\n\"appUser\" -> fixed string<br><br>\r\n\r\nReturn is either an empty array if no new enquiry arrived or an object that holds data about the new enquiry.  \r\nThis object will also contain a field `currentMaxId` that has the new max-id as `enquiryPool.getEQPMaxId` would return it now.  \r\n(So there's no need to call `enquiryPool.getEQPMaxId` again after a new enquiry got received by this request here)"
			},
			"response": []
		},
		{
			"name": "notificationMessages.getCurrentMessageCount",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \"appUser\" ],\n  \"className\": \"notificationMessages\",\n  \"functionName\": \"getCurrentMessageCount\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the current count of messages in message center<br><br>  \n\nparams:  \n\"appUser\" -> fixed string<br><br>\n\nReturn is an array that only contains 1 int element which is the current count of messages in Messagecenter"
			},
			"response": []
		},
		{
			"name": "apiGlobal.Login",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"andilein\",\r\n    \"password\" : \"testerlein\",\r\n    \"target\"   : \"angular\",\r\n    \"rememberme\" : true\r\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/apiGlobal/Login/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"apiGlobal",
						"Login",
						"3",
						"1",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "apiGlobal.Logout",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-csrf-token",
						"value": "asdf",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/apiGlobal/Logout/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"apiGlobal",
						"Logout",
						"3",
						"1",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "julia.pciNagScreenDontShow",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-csrf-token",
						"value": "asdf",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"dontshow\": false\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/PciNagscreenDonotShow/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"PciNagscreenDonotShow",
						"3",
						"1",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "CompanyCustomerBooking.getBookingLog",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 1339, \"appUser\" ],\n  \"className\": \"CompanyCustomerBooking\",\n  \"functionName\": \"getBookingLog\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns an array of objects that represent the history of a booking.  \r\nUsing this data it's possible to see, who created a booking, when it was created, when something was changed and what changed and who changed it.  \r\nThe array comes pre-sorted by change-date.  <br><br>\r\n  \r\nparams:  \r\nint -> `b_id` of the booking  \r\n\"appUser\" -> fixed string"
			},
			"response": []
		},
		{
			"name": "Billing.getBilltextLocale",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ \n      { \n                \"customer_id\": 15,\n                \"billVersion_id\": 1721,\n                \"new_locale_id\": 1\n  },\n              \"appUser\" \n            ],\n  \"className\": \"Billing\",\n  \"functionName\": \"getBilltextLocale\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the default billtext for a certain bill and if there's already a custom billtext used at this bill<br><br>\n  \nparams:  \nobject ->  \n{<br>\n&nbsp;&nbsp;int customer_id: id of the customer of this bill  \n&nbsp;&nbsp;int billVersion_id: bv_id of the linked bill  \n&nbsp;&nbsp;int new_locale_id: the `l_id` of the language that we want to know the billtext in  \n}<br>\n\"appUser\" -> fixed string<br><br>\n  \nReturn is an object:  \n{<br>\n&nbsp;&nbsp;bool customBillTextUsed: If this is true then the billtext that's already used at at the bill must stay  \n&nbsp;&nbsp;string newBillText: That's the billtext to use for the given language  \n}"
			},
			"response": []
		},
		{
			"name": "visitorsTaxScreen.settings",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/visitorsTaxScreen/settings/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"visitorsTaxScreen",
						"settings",
						"3",
						"1",
						""
					]
				},
				"description": "This request returns the visitorstax configuration of a customer. Request body stays empty because the customer is already identified by the id in the URL-route."
			},
			"response": []
		},
		{
			"name": "visitorsTaxScreen.updateSettings",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"locales\": [\r\n        {\r\n            \"vtl_locale_id\": \"1\",\r\n            \"vtl_value\": \"Local tax1\"\r\n        },\r\n        {\r\n            \"vtl_locale_id\": \"2\",\r\n            \"vtl_value\": \"Kurtaxe1\"\r\n        },\r\n        {\r\n            \"vtl_locale_id\": \"3\",\r\n            \"vtl_value\": \"Toeristenbelasting\"\r\n        },\r\n        {\r\n            \"vtl_locale_id\": \"4\",\r\n            \"vtl_value\": \"Tasso locale\"\r\n        },\r\n        {\r\n            \"vtl_locale_id\": \"5\",\r\n            \"vtl_value\": \"Taxe de séjour\"\r\n        },\r\n        {\r\n            \"vtl_locale_id\": \"6\",\r\n            \"vtl_value\": \"Idegenforgalmi adó\"\r\n        },\r\n        {\r\n            \"vtl_locale_id\": \"10\",\r\n            \"vtl_value\": \"Курортный сбор\"\r\n        }\r\n    ],\r\n    \"c_visitorsTaxEnabled\": true,\r\n    \"c_visitorsTaxIncluded\": false,\r\n    \"visitorsTax\": [\r\n        {\r\n            \"vt_id\": \"0\",\r\n            \"vt_name\": \"Komplett neu\",\r\n            \"vt_fromDate\": \"2020-01-01\",\r\n            \"vt_untilDate\": \"2025-01-01\",\r\n            \"vt_visitorsTaxChargeType_id\": \"1\",\r\n            \"vt_visitorsTaxCalculationRule_id\": \"1\",\r\n            \"ageGroupDetails\": [\r\n                {\r\n                    \"vtd_id\": \"0\",\r\n                    \"vtd_from\": \"4\",\r\n                    \"vtd_until\": \"5\",\r\n                    \"vtd_value\": \"60\"\r\n                },\r\n                {\r\n                    \"vtd_id\": \"0\",\r\n                    \"vtd_from\": \"7\",\r\n                    \"vtd_until\": \"8\",\r\n                    \"vtd_value\": \"90\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/visitorsTaxScreen/updateSettings/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"visitorsTaxScreen",
						"updateSettings",
						"3",
						"1",
						""
					]
				},
				"description": "This request updates details of an existing visitorstax configuration. The structure of the input JSON is exactly the same as of the return of `visitorsTaxScreen.settings`.  \nThe only difference is, that it's not needed to provide ALL fields here that are possible in the structure. For example it would be okay to just provide the following piece of JSON if only the visitors-tax-enabled flag changed:  \n{  <br>\n&nbsp;&nbsp;&nbsp;&nbsp;\"c_visitorsTaxEnabled\": false  \n}  <br>\nIt would be also okay to put only 1 element into the `locales` array if only that element changed.  \n  \nIf it's needed to **insert a new agegroup** then set the field `vtd_id` to 0 (zero) within the `ageGroupDetails` array. Example:  \n{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;\"vtd_id\": \"0\",  \n&nbsp;&nbsp;&nbsp;&nbsp;\"vtd_from\": \"1\",  \n&nbsp;&nbsp;&nbsp;&nbsp;\"vtd_until\": \"2\",  \n&nbsp;&nbsp;&nbsp;&nbsp;\"vtd_value\": \"300\"<br>\n}  \n  \nTo **delete an existing agegroup** only provide the `vtd_id` of the agegroup to delete as negative value in the agegroup object. Here's an example, where the agegroups with `vtd_id` 34 and 33 shall get deleted and the one with `vtd_id` 35 shall get updated:  \n\"ageGroupDetails\":&nbsp;[  \n&nbsp;&nbsp;{  \n&nbsp;&nbsp;&nbsp;&nbsp;\"vtd_id\":&nbsp;\"35\",  \n&nbsp;&nbsp;&nbsp;&nbsp;\"vtd_from\":&nbsp;\"2007\",  \n&nbsp;&nbsp;&nbsp;&nbsp;\"vtd_until\":&nbsp;null,  \n&nbsp;&nbsp;&nbsp;&nbsp;\"vtd_value\":&nbsp;40  \n&nbsp;&nbsp;},  \n&nbsp;&nbsp;{  \n&nbsp;&nbsp;&nbsp;&nbsp;\"vtd_id\":&nbsp;\"-34\"  \n&nbsp;&nbsp;},  \n&nbsp;&nbsp;{  \n&nbsp;&nbsp;&nbsp;&nbsp;\"vtd_id\":&nbsp;\"-33\"  \n&nbsp;&nbsp;}  \n]  <br>\n*Remark: At the agegroup-objects to delete it's also possible and doesn't do any harm to provide the rest of the fields `vtd_from`, `vtd_until` and `vtd_value` - it's just not needed*\n  \nIf a **completely new visitorsTax configuration** shall be inserted then provide an object in the array `visitorsTax` that has set `vt_id` = 0, also make sure that all fields `vtd_id` within the `ageGroupDetails` array are set to 0.  \n  \n**Return of this request** is an object:  \n{<br>\n&nbsp;&nbsp;status -> either \"OK\" or \"ERROR\"  \n&nbsp;&nbsp;errors -> array of strings containing error-messages (if status == \"OK\" then the array is empty)  \n}"
			},
			"response": []
		},
		{
			"name": "visitorsTaxScreen.deleteSettings",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"vt_id\" : 84\r\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/visitorsTaxScreen/deleteSettings/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"visitorsTaxScreen",
						"deleteSettings",
						"3",
						"1",
						""
					]
				},
				"description": "This request deletes an existing visitorsTax configuration.  \n  \nInput is a JSON object:  \n{<br>\n&nbsp;&nbsp;&nbsp;&nbsp;int vt_id -> The vt_id of the configuration to delete  \n}"
			},
			"response": []
		},
		{
			"name": "category.adminEntityGroupOrder",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ [{\"eg_id\":\"1\",\"eg_sortOrder\":\"008\"},{\"eg_id\":\"5\",\"eg_sortOrder\":\"006\"},{\"eg_id\":\"6\",\"eg_sortOrder\":\"007\"},{\"eg_id\":\"7\",\"eg_sortOrder\":\"004\"},{\"eg_id\":\"22\",\"eg_sortOrder\":\"005\"},{\"eg_id\":\"44\",\"eg_sortOrder\":\"003\"},{\"eg_id\":\"45\",\"eg_sortOrder\":\"002\"},{\"eg_id\":\"49\",\"eg_sortOrder\":\"001\"},{\"eg_id\":\"52\",\"eg_sortOrder\":\"011\"},{\"eg_id\":\"53\",\"eg_sortOrder\":\"010\"},{\"eg_id\":\"56\",\"eg_sortOrder\":\"009\"},{\"eg_id\":\"57\",\"eg_sortOrder\":\"\"},{\"eg_id\":\"58\",\"eg_sortOrder\":\"1\"},{\"eg_id\":\"59\",\"eg_sortOrder\":\"\"},{\"eg_id\":\"60\",\"eg_sortOrder\":\"\"},{\"eg_id\":\"62\",\"eg_sortOrder\":\"\"},{\"eg_id\":\"63\",\"eg_sortOrder\":\"\"},{\"eg_id\":\"64\",\"eg_sortOrder\":\"\"},{\"eg_id\":\"65\",\"eg_sortOrder\":\"\"},{\"eg_id\":\"66\",\"eg_sortOrder\":\"\"}]\n, \"appUser\" ],\n  \"className\": \"EntityGroup\",\n  \"functionName\": \"adminEntityGroupOrder\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request saves the sortorder for entityGroups (room categories). It's not needed to provide ALL entityGroups - if just 1 entityGroup is provided for example the API will only change the sortOrder for this one.<br><br>\n\nparams:  \narray of objects ->  \n{<br>\n&nbsp;&nbsp;int eg_id: unique id of the entityGroup  \n&nbsp;&nbsp;string eg_sortOrder: new sortorder value for this entityGroup  \n}<br><br>\n\nThe request always returns an empty array."
			},
			"response": []
		},
		{
			"name": "room.updateEntityOrder",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ [{\"e_id\":\"185\",\"e_sortOrder\":\"005\"},{\"e_id\":\"186\",\"e_sortOrder\":\"009\"},{\"e_id\":\"190\",\"e_sortOrder\":\"006\"},{\"e_id\":\"191\",\"e_sortOrder\":\"010\"},{\"e_id\":\"192\",\"e_sortOrder\":\"003\"},{\"e_id\":\"193\",\"e_sortOrder\":\"008\"},{\"e_id\":\"194\",\"e_sortOrder\":\"011\"},{\"e_id\":\"201\",\"e_sortOrder\":\"015\"},{\"e_id\":\"203\",\"e_sortOrder\":\"016\"},{\"e_id\":\"205\",\"e_sortOrder\":\"012\"},{\"e_id\":\"206\",\"e_sortOrder\":\"004\"},{\"e_id\":\"207\",\"e_sortOrder\":\"002\"},{\"e_id\":\"209\",\"e_sortOrder\":\"014\"},{\"e_id\":\"210\",\"e_sortOrder\":\"017\"},{\"e_id\":\"216\",\"e_sortOrder\":\"030\"},{\"e_id\":\"220\",\"e_sortOrder\":\"018\"},{\"e_id\":\"227\",\"e_sortOrder\":\"019\"},{\"e_id\":\"229\",\"e_sortOrder\":\"007\"},{\"e_id\":\"230\",\"e_sortOrder\":\"\\u00dcberbucher\"},{\"e_id\":\"231\",\"e_sortOrder\":\"100\"},{\"e_id\":\"232\",\"e_sortOrder\":\"101\"},{\"e_id\":\"233\",\"e_sortOrder\":\"2552\"},{\"e_id\":\"234\",\"e_sortOrder\":\"55555\"},{\"e_id\":\"235\",\"e_sortOrder\":\"44444\"},{\"e_id\":\"236\",\"e_sortOrder\":\"2222\"},{\"e_id\":\"237\",\"e_sortOrder\":\"24223\"},{\"e_id\":\"238\",\"e_sortOrder\":\"444\"},{\"e_id\":\"239\",\"e_sortOrder\":\"5555555\"},{\"e_id\":\"240\",\"e_sortOrder\":\"234\"},{\"e_id\":\"241\",\"e_sortOrder\":\"000a\"},{\"e_id\":\"242\",\"e_sortOrder\":\"666\"},{\"e_id\":\"243\",\"e_sortOrder\":\"\\u00dcberbuchungszimmer\"},{\"e_id\":\"244\",\"e_sortOrder\":\"5a\"},{\"e_id\":\"245\",\"e_sortOrder\":\"888\"},{\"e_id\":\"246\",\"e_sortOrder\":\"000\"},{\"e_id\":\"247\",\"e_sortOrder\":\"500\"},{\"e_id\":\"248\",\"e_sortOrder\":\"Kaiser 01\"},{\"e_id\":\"249\",\"e_sortOrder\":\"Kaiser 02\"},{\"e_id\":\"250\",\"e_sortOrder\":\"maria01\"},{\"e_id\":\"251\",\"e_sortOrder\":\"000b\"},{\"e_id\":\"252\",\"e_sortOrder\":\"rte\"},{\"e_id\":\"253\",\"e_sortOrder\":\"xx1\"},{\"e_id\":\"254\",\"e_sortOrder\":\"\\u00dcberbuchungszimmer02\"},{\"e_id\":\"255\",\"e_sortOrder\":\"333\"},{\"e_id\":\"256\",\"e_sortOrder\":\"280\"},{\"e_id\":\"257\",\"e_sortOrder\":\"345\"},{\"e_id\":\"258\",\"e_sortOrder\":\"\\u00fc1\"},{\"e_id\":\"259\",\"e_sortOrder\":\"1\"},{\"e_id\":\"260\",\"e_sortOrder\":\"2\"},{\"e_id\":\"261\",\"e_sortOrder\":\"19\"},{\"e_id\":\"262\",\"e_sortOrder\":\"\\u00dcberbucher\"},{\"e_id\":\"263\",\"e_sortOrder\":\"22\"},{\"e_id\":\"264\",\"e_sortOrder\":\"30\"},{\"e_id\":\"265\",\"e_sortOrder\":\"100\"},{\"e_id\":\"266\",\"e_sortOrder\":\"qawc\"},{\"e_id\":\"267\",\"e_sortOrder\":\"11\"},{\"e_id\":\"268\",\"e_sortOrder\":\"12\"},{\"e_id\":\"269\",\"e_sortOrder\":\"11\\/2\"},{\"e_id\":\"270\",\"e_sortOrder\":\"12\\/2\"},{\"e_id\":\"271\",\"e_sortOrder\":\"501\"},{\"e_id\":\"272\",\"e_sortOrder\":\"501\"},{\"e_id\":\"273\",\"e_sortOrder\":\"Marc\"},{\"e_id\":\"274\",\"e_sortOrder\":\"Georg\"},{\"e_id\":\"275\",\"e_sortOrder\":\"GZ Test\"},{\"e_id\":\"276\",\"e_sortOrder\":\"GZ Test\"},{\"e_id\":\"277\",\"e_sortOrder\":\"Test 1\"},{\"e_id\":\"278\",\"e_sortOrder\":\"test\"},{\"e_id\":\"279\",\"e_sortOrder\":\"Marc\"},{\"e_id\":\"280\",\"e_sortOrder\":\"Georg\"},{\"e_id\":\"281\",\"e_sortOrder\":\"Lolek\"},{\"e_id\":\"282\",\"e_sortOrder\":\"Bolek\"},{\"e_id\":\"283\",\"e_sortOrder\":\"Sancho \"},{\"e_id\":\"284\",\"e_sortOrder\":\"Pancho\"},{\"e_id\":\"285\",\"e_sortOrder\":\"Siegfried\"},{\"e_id\":\"286\",\"e_sortOrder\":\"Roy\"},{\"e_id\":\"287\",\"e_sortOrder\":\"77\"},{\"e_id\":\"288\",\"e_sortOrder\":\"Georg\"},{\"e_id\":\"289\",\"e_sortOrder\":\"111\"},{\"e_id\":\"290\",\"e_sortOrder\":\"112\"},{\"e_id\":\"291\",\"e_sortOrder\":\"113\"},{\"e_id\":\"292\",\"e_sortOrder\":\"114\"},{\"e_id\":\"293\",\"e_sortOrder\":\"65\"},{\"e_id\":\"294\",\"e_sortOrder\":\"987\"},{\"e_id\":\"295\",\"e_sortOrder\":\"988\"},{\"e_id\":\"296\",\"e_sortOrder\":\"88\"},{\"e_id\":\"297\",\"e_sortOrder\":\"1\"},{\"e_id\":\"298\",\"e_sortOrder\":\"test\"},{\"e_id\":\"299\",\"e_sortOrder\":\"test\"},{\"e_id\":\"300\",\"e_sortOrder\":\"111\"},{\"e_id\":\"301\",\"e_sortOrder\":\"111\"},{\"e_id\":\"302\",\"e_sortOrder\":\"111\"},{\"e_id\":\"303\",\"e_sortOrder\":\"1111\"},{\"e_id\":\"304\",\"e_sortOrder\":\"11111\"},{\"e_id\":\"305\",\"e_sortOrder\":\"11111\"},{\"e_id\":\"306\",\"e_sortOrder\":\"111\"},{\"e_id\":\"307\",\"e_sortOrder\":\"111\"},{\"e_id\":\"308\",\"e_sortOrder\":\"1\"},{\"e_id\":\"309\",\"e_sortOrder\":\"11\"},{\"e_id\":\"310\",\"e_sortOrder\":\"222\"},{\"e_id\":\"311\",\"e_sortOrder\":\"5656\"},{\"e_id\":\"312\",\"e_sortOrder\":\"89898\"},{\"e_id\":\"313\",\"e_sortOrder\":\"56565\"},{\"e_id\":\"314\",\"e_sortOrder\":\"7878\"},{\"e_id\":\"315\",\"e_sortOrder\":\"6556\"},{\"e_id\":\"316\",\"e_sortOrder\":\"1\"},{\"e_id\":\"317\",\"e_sortOrder\":\"1\"},{\"e_id\":\"318\",\"e_sortOrder\":\"22\"}]\n, \"appUser\" ],\n  \"className\": \"EntityType\",\n  \"functionName\": \"updateEntityOrder\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/2/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"2",
						""
					]
				},
				"description": "This request saves the sortorder for entities (= rooms). It's not needed to provide ALL entities - if just 1 entity is provided for example the API will only change the sortOrder for this one.<br><br>\n\nparams:  \narray of objects ->  \n{<br>\n&nbsp;&nbsp;int e_id: unique id of the entity  \n&nbsp;&nbsp;string e_sortOrder: new sortorder value for this entity  \n}<br><br>\n\nThe request always returns an empty array."
			},
			"response": []
		},
		{
			"name": "logoutCompletely",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ {\"sessionid\":\"5587b457-6c5a-4707-bef0-f492ab56560d\",\"rfgs_id\":\"3\"}, \"appUser\" ],\n  \"className\": \"registrationForm\",\n  \"functionName\": \"printLinkLogout\"\n}"
				},
				"url": {
					"raw": "http://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "http",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "This request will expire the juliaAngularToken cookie. It also expires the corresponding token in the oauth database.  \n  \nAfter this request got called, the user needs to log in again. After the successful re-login a new token is generated for the user.  \n  \n*Remark:  \nThere's another endpoint `apiGlobal.Logout`. This one only expires the browser cookie. After calling `apiGlobal.Logout` and logging in again the user will get the same token in the juliaAngularToken cookie as before.*"
			},
			"response": []
		},
		{
			"name": "BillVersionPayment.emailPaymentConfirmationFromReceipt",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \n  \"params\": [ 251, \"ap@easybooking.eu\", \"appUser\" ],\n  \"className\": \"BillVersionPayment\",\n  \"functionName\": \"emailPaymentConfirmationFromReceipt\"\n}"
				},
				"url": {
					"raw": "https://{{SERVERIP}}/easybooking/index.php/juliaAngular/mainApi/3/1/",
					"protocol": "https",
					"host": [
						"{{SERVERIP}}"
					],
					"path": [
						"easybooking",
						"index.php",
						"juliaAngular",
						"mainApi",
						"3",
						"1",
						""
					]
				},
				"description": "Email-sends a payment confirmation of the receipt identified by `rc_id` to the specified email-address<br><br>\n\nparams:<br>\nint -> The `rc_id` of the receipt<br>\nstring -> the email-address to send the confirmation to <br>\n\"appUser\" -> fixed string"
			},
			"response": []
		}
	]
}